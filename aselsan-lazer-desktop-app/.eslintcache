[{"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/index.js":"1","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/App.js":"2","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/tabs.js":"3","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/compass.js":"4","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/slide.js":"5","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/moreInfo.js":"6","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/selectDevice.js":"7","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/componenets/Loading.js":"8","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/componenets/SetModal.tsx":"9","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/laserMeter.js":"10","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/setting.js":"11","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/measure.js":"12","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/device.js":"13","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/componenets/Header.js":"14","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/stores/InstantStore.ts":"15","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/stores/MainStore.ts":"16","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/constants/Colors.ts":"17","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/constants/Config.ts":"18","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/constants/Params.ts":"19","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/services/BLEService.ts":"20","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/Conversions.tsx":"21","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/toast.tsx":"22","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/findLocation.tsx":"23","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/locales/index.tsx":"24","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/cMoment.tsx":"25","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/findData.tsx":"26","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/Buffer.tsx":"27","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/locales/en.tsx":"28","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/locales/tr.tsx":"29"},{"size":1623,"mtime":1658402677692,"results":"30","hashOfConfig":"31"},{"size":1153,"mtime":1658486217306,"results":"32","hashOfConfig":"31"},{"size":4020,"mtime":1658487976834,"results":"33","hashOfConfig":"31"},{"size":13009,"mtime":1658402677693,"results":"34","hashOfConfig":"31"},{"size":3082,"mtime":1658486759466,"results":"35","hashOfConfig":"31"},{"size":8616,"mtime":1658488379708,"results":"36","hashOfConfig":"31"},{"size":3445,"mtime":1658493711709,"results":"37","hashOfConfig":"31"},{"size":922,"mtime":1658488959424,"results":"38","hashOfConfig":"31"},{"size":9447,"mtime":1658489777442,"results":"39","hashOfConfig":"31"},{"size":20411,"mtime":1658492119185,"results":"40","hashOfConfig":"31"},{"size":7467,"mtime":1658489010496,"results":"41","hashOfConfig":"31"},{"size":1647,"mtime":1658487702603,"results":"42","hashOfConfig":"31"},{"size":8023,"mtime":1658488999835,"results":"43","hashOfConfig":"31"},{"size":1991,"mtime":1658489964044,"results":"44","hashOfConfig":"31"},{"size":1255,"mtime":1658402677695,"results":"45","hashOfConfig":"31"},{"size":744,"mtime":1658402677695,"results":"46","hashOfConfig":"31"},{"size":304,"mtime":1658402677690,"results":"47","hashOfConfig":"31"},{"size":5521,"mtime":1658402677690,"results":"48","hashOfConfig":"31"},{"size":4912,"mtime":1658402677690,"results":"49","hashOfConfig":"31"},{"size":6800,"mtime":1658492758885,"results":"50","hashOfConfig":"31"},{"size":1150,"mtime":1658402677691,"results":"51","hashOfConfig":"31"},{"size":511,"mtime":1658402677691,"results":"52","hashOfConfig":"31"},{"size":1856,"mtime":1658402677691,"results":"53","hashOfConfig":"31"},{"size":499,"mtime":1658402677692,"results":"54","hashOfConfig":"31"},{"size":242,"mtime":1658402677691,"results":"55","hashOfConfig":"31"},{"size":6661,"mtime":1658402677691,"results":"56","hashOfConfig":"31"},{"size":211,"mtime":1658402677690,"results":"57","hashOfConfig":"31"},{"size":6089,"mtime":1658402677692,"results":"58","hashOfConfig":"31"},{"size":4156,"mtime":1658402677692,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1wn0x3z",{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/index.js",[],["138","139"],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/App.js",["140"],"import React, {useEffect} from 'react';\nimport './App.css';\nimport Colors from \"./constants/Colors\";\nimport {useHistory} from \"react-router-dom\";\nimport { Spin } from 'antd';\nimport {IStore} from \"./stores/InstantStore\";\nimport {MStore} from \"./stores/MainStore\";\nimport useStayAwake from \"use-stay-awake\";\n\n\nfunction App() {\n    const history = useHistory()\n    const device = useStayAwake();\n\n    const ble = IStore.ble;\n    useEffect(()=>{\n\n\n        setTimeout(()=>{\n            controlData()\n        },1000)\n    },[])\n\n\n    function controlData() {\n\n        if(MStore.settings.lock_screen){\n            device.preventSleeping();\n        }else{\n            device.allowSleeping();\n        }\n\n        if(MStore.first){\n            history.push(\"slide\")\n        }else{\n\n            let device = ble.getDevice()\n\n            if(device){\n                history.push(\"tabs\")\n            }else{\n                history.push(\"select-device\")\n            }\n\n        }\n    }\n\n  return (\n    <div className=\"contain\" style={{backgroundColor:Colors.darkGray,justifyContent:'center',alignItems:'center'}}>\n        <Spin/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/tabs.js",["141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"import React, { useEffect, useState } from \"react\";\nimport Colors from \"../constants/Colors\";\nimport BottomNavigation from \"@mui/material/BottomNavigation\";\nimport BottomNavigationAction from \"@mui/material/BottomNavigationAction\";\nimport { styled } from \"@mui/material/styles\";\n\nimport { string } from \"../locales\";\nimport Measure from \"./measure\";\nimport Device from \"./device\";\nimport LaserMeter from \"./laserMeter\";\nimport { IStore } from \"../stores/InstantStore\";\nimport { observer } from \"mobx-react-lite\";\nimport Setting from \"./setting\";\nimport { ipcRenderer } from \"electron\";\n\nconst Tabs = () => {\n  const page = IStore.tab_index;\n\n  return (\n    <div\n      style={{\n        backgroundColor: Colors.darkGray,\n        height: \"100vh\",\n        width: \"100%\",\n      }}\n    >\n      <div>\n        {page == \"olcum\" ? (\n          <Measure />\n        ) : page == \"cihaz\" ? (\n          <Device />\n        ) : page == \"yapilandirici\" ? (\n          <Setting />\n        ) : page == \"lazer\" ? (\n          <LaserMeter />\n        ) : null}\n      </div>\n      <div style={{ position: \"fixed\", bottom: 0, left: 0, right: 0 }}>\n        <BottomNavigation\n          showLabels\n          value={page}\n          sx={{\n            p: 5,\n            bgcolor: Colors.primary,\n            \"& .MuiBottomNavigationAction-label\": {\n              filter: \"opacity(0.4)\",\n              color: Colors.white,\n              fontSize: (theme) => theme.typography.caption,\n              transition: \"none\",\n              fontWeight: \"bold\",\n              lineHeight: \"20px\",\n            },\n            \"& .Mui-selected\": {\n              \"& .MuiBottomNavigationAction-label\": {\n                filter: \"none\",\n                color: Colors.white,\n                fontSize: (theme) => theme.typography.caption,\n                transition: \"none\",\n                fontWeight: \"bold\",\n                lineHeight: \"20px\",\n              },\n            },\n          }}\n          onChange={(event, newValue) => {\n            IStore.setTabIndex(newValue);\n          }}\n        >\n          <BottomNavigationAction\n            className=\"btn\"\n            value={\"olcum\"}\n            label={string.olcum2}\n            icon={\n              <img\n                src={require(\"../assets/images/goz.png\").default}\n                style={{\n                  ...(page == \"olcum\" ? {} : { filter: \"opacity(0.4)\" }),\n                  width: 30,\n                  height: 30,\n                }}\n              />\n            }\n          />\n          <BottomNavigationAction\n            className=\"btn\"\n            value={\"cihaz\"}\n            label={string.cihaz2}\n            icon={\n              <img\n                src={require(\"../assets/images/cihaz2.png\").default}\n                style={{\n                  ...(page == \"cihaz\" ? {} : { filter: \"opacity(0.4)\" }),\n                  width: 30,\n                  height: 30,\n                }}\n              />\n            }\n          />\n          <BottomNavigationAction\n            className=\"btn\"\n            value={\"yapilandirici\"}\n            label={string.yapilandirici}\n            icon={\n              <img\n                src={require(\"../assets/images/yapilandirici.png\").default}\n                style={{\n                  ...(page == \"yapilandirici\"\n                    ? {}\n                    : { filter: \"opacity(0.4)\" }),\n                  width: 30,\n                  height: 30,\n                }}\n              />\n            }\n          />\n          <BottomNavigationAction\n            className=\"btn\"\n            value={\"lazer\"}\n            label={string.lazermesafeolcer}\n            icon={\n              <img\n                src={require(\"../assets/images/lazer.png\").default}\n                style={{\n                  ...(page == \"lazer\" ? {} : { filter: \"opacity(0.4)\" }),\n                  width: 30,\n                  height: 30,\n                }}\n              />\n            }\n          />\n        </BottomNavigation>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(Tabs);\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/compass.js",["157","158","159","160","161","162","163","164","165","166","167"],"\nimport * as React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport {IStore} from \"../stores/InstantStore\";\nimport {MStore} from \"../stores/MainStore\";\nimport Colors from \"../constants/Colors\";\nimport {AngleUnitTypes, HomeScreenTypes} from \"../constants/Config\";\nimport {observer} from \"mobx-react-lite\";\nimport {Params} from \"../constants/Params\";\nimport {info} from \"../functions/toast\";\nimport {angleConversion, distanceConversion} from \"../functions/Conversions\";\nimport BLEService from \"../services/BLEService\";\nimport {useHistory} from \"react-router-dom\";\nimport Header from \"../componenets/Header\";\nimport {string} from \"../locales\";\nimport {ColumnHeightOutlined, ColumnWidthOutlined,ReloadOutlined} from \"@ant-design/icons\";\nimport { Swiper, SwiperSlide ,useSwiper} from 'swiper/react/swiper-react'\nimport { Navigation } from \"swiper\";\n\n\nlet _auto = false\n\nfunction Compass({ navigation }) {\n    const history = useHistory()\n    const ble = IStore.ble\n    const param = Params()\n\n    const [distance,setDistance] = useState([])\n    const [distance_unit,setDistanceUnit] = useState(\"--\")\n    const [angle_unit,setAngleUnit] = useState(\"--\")\n    const [azimuth,setAzimuth] = useState(0)\n    const [elevation,setElevation] = useState(0)\n    const [roll,setRoll] = useState(0)\n    const [auto,setAuto] = useState(_auto)\n    const [spinValue,setSpinValue] = useState(0)\n\n\n    useEffect(()=>{\n\n        _auto=false\n        BLEService.event.on(\"distance_and_compass\",_setData)\n        controlDevice()\n\n\n\n        return()=>{\n            try {\n                if(auto){\n                    _auto=false\n                    setAuto(false)\n                }\n            }catch (e) {\n\n            }\n            BLEService.event.removeListener(\"distance_and_compass\",_setData)\n        }\n    },[])\n\n\n\n    function _setData({distance,distance_unit,angle_unit,azimuth,elevation,roll}) {\n        setDistance(distance)\n        setDistanceUnit(distanceConversion(0,distance_unit,distance_unit).unit)\n        setAngleUnit(angleConversion(0,angle_unit,angle_unit).unit)\n        setAzimuth(azimuth)\n        setElevation(elevation)\n        setRoll(roll)\n\n        setSpinValue(360-angleConversion(azimuth,angle_unit,AngleUnitTypes.Derece.id).angle)\n\n        if(_auto){\n            setTimeout(()=>{\n                controlDevice()\n            },2500)\n        }\n    }\n\n\n    function controlDevice() {\n\n        const device = ble.getDevice()\n\n        if(device){\n            getData()\n        }else{\n            history.push(\"select-device\")\n        }\n    }\n\n    async function getData() {\n        if(!_auto)\n            info(\"Atış Yapılıyor...\")\n        await ble.sendDataToDevice(\"distance_and_compass\",param.distance_and_compass.getHex)\n\n    }\n\n\n\n\n    function DistanceView({distance,distance_unit,row=true}) {\n\n        let len = distance.length\n\n        return <div className={`flex ${row?'row':'column'}`} style={{width:'80%',alignItems:'center',justifyContent:'space-around'}}>\n            {\n                distance.map((val,index)=><div className=\"flex\" key={index} style={{padding:\"10px 0\",textAlign:'center',color:Colors.text,fontWeight:'bold',fontSize:`${row?(len==3?4:len==2?5:len==1?6:0):6}vw`}}>{parseFloat(val.toString()).toFixed(2)+\" \"+distance_unit}</div>)\n            }\n        </div>\n\n    }\n\n  return (\n      <div className=\"contain column\">\n          <div className=\"center\" style={{width:'100%'}}>\n              <Header\n                  title={string.olcum2}\n                  onBack={()=>{\n                      history.goBack()\n                  }}\n              />\n          </div>\n\n          <div className=\"flex-1\" style={{padding:20}}>\n              <Swiper initialSlide={MStore.settings.home_screen_type}  navigation={true} modules={[Navigation]} style={{display:'flex',flex:1}}>\n                  <SwiperSlide >\n                      <div className={\" flex-1 column\"} style={{height:'100%', alignItems:'center'}} >\n                          <div className=\"flex-3 center\">\n                              <div style={{position:'absolute', fontSize:'6vh',fontWeight:'bold',color:Colors.text}}>{azimuth+\" \"+angle_unit}</div>\n                              <img src={require(\"../assets/images/compass.png\").default} style={{height:'40vh',transform: `rotate(${spinValue}deg)`,transitionDuration:'1000ms'}}   />\n                          </div>\n                          <div className=\"flex-2 row  center\" style={{width:'80%',alignItems:'center',justifyContent:'space-around'}}>\n                              <div>\n                                  <ColumnHeightOutlined style={{fontSize:'4vw',color:Colors.text}}/>\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{elevation+\"\"+angle_unit}</span>\n                              </div>\n                              <div>\n                                  <ColumnWidthOutlined style={{fontSize:'4vw',color:Colors.text}}/>\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{roll+\"\"+angle_unit}</span>\n                              </div>\n\n                          </div>\n                          <div className=\"flex-2  center\" style={{width:'100%'}}>\n                              <DistanceView distance={distance} distance_unit={distance_unit}/>\n                          </div>\n\n                          <div className=\"flex row  center\" style={{ width:'50%',alignItems:'center',justifyContent:'space-around'}}>\n                              <div\n                                  onClick={()=>{\n                                      if(!auto)\n                                          controlDevice()\n                                      _auto=!_auto\n                                      setAuto(!auto)\n                                  }}\n                                  className=\"flex-1 center column\"\n                              >\n                                  <ReloadOutlined style={{backgroundColor:Colors[auto?\"green\":\"red\"],fontSize:\"3.5vh\",color:Colors.white,padding:13,borderRadius:100}}/>\n                                  <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\n                                      {string.otomatikatis}\n                                  </div>\n                              </div>\n                              {\n                                  !auto?\n                                      <div className=\"flex-1 center column\" onClick={controlDevice} >\n                                          <div className=\"flex center\" style={{backgroundColor:Colors.primary,width:\"6.5vh\",height:\"6.5vh\",color:Colors.white,borderRadius:100}}>\n                                              <img src={require(\"../assets/images/measure.png\").default} style={{width:\"3vh\",height:\"3vh\"}}/>\n                                          </div>\n                                          <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\n                                              {string.atisyap}\n                                          </div>\n                                      </div>:<div className=\"flex-1\"/>\n                              }\n\n                          </div>\n                      </div>\n                  </SwiperSlide>\n                  <SwiperSlide  >\n                      <div className={\" flex-1 column\"} style={{height:'100%',alignItems:'center'}} >\n                          <div className=\"flex-3 center\">\n                              <div style={{position:'absolute', fontSize:'6vh',fontWeight:'bold',color:Colors.text}}>{azimuth+\" \"+angle_unit}</div>\n                              <img src={require(\"../assets/images/compass.png\").default} style={{height:'40vh',transform: `rotate(${spinValue}deg)`,transitionDuration:'1000ms'}}   />\n                          </div>\n                          <div className=\"flex-2 row  center\" style={{width:'80%',alignItems:'center',justifyContent:'space-around'}}>\n                              <div>\n                                  <ColumnHeightOutlined style={{fontSize:'4vw',color:Colors.text}}/>\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{elevation+\"\"+angle_unit}</span>\n                              </div>\n                              <div>\n                                  <ColumnWidthOutlined style={{fontSize:'4vw',color:Colors.text}}/>\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{roll+\"\"+angle_unit}</span>\n                              </div>\n\n                          </div>\n\n                          <div className=\"flex row  center\" style={{ width:'50%',alignItems:'center',justifyContent:'space-around'}}>\n                              <div\n                                  onClick={()=>{\n                                      if(!auto)\n                                          controlDevice()\n                                      _auto=!_auto\n                                      setAuto(!auto)\n                                  }}\n                                  className=\"flex-1 center column\"\n                              >\n                                  <ReloadOutlined style={{backgroundColor:Colors[auto?\"green\":\"red\"],fontSize:\"3.5vh\",color:Colors.white,padding:13,borderRadius:100}}/>\n                                  <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\n                                      {string.otomatikatis}\n                                  </div>\n                              </div>\n                              {\n                                  !auto?\n                                      <div className=\"flex-1 center column\" onClick={controlDevice} >\n                                          <div className=\"flex center\" style={{backgroundColor:Colors.primary,width:\"6.5vh\",height:\"6.5vh\",color:Colors.white,borderRadius:100}}>\n                                              <img src={require(\"../assets/images/measure.png\").default} style={{width:\"3vh\",height:\"3vh\"}}/>\n                                          </div>\n                                          <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\n                                              {string.atisyap}\n                                          </div>\n                                      </div>:<div className=\"flex-1\"/>\n                              }\n\n                          </div>\n                      </div>\n                  </SwiperSlide>\n                  <SwiperSlide >\n                      <div className={\" flex-1 column\"} style={{height:'100%', alignItems:'center'}} >\n\n                          <div className=\"flex-2  center\" style={{width:'100%'}}>\n                              <DistanceView distance={distance} distance_unit={distance_unit} row={false}/>\n                          </div>\n\n                          <div className=\"flex row  center\" style={{ width:'50%',alignItems:'center',justifyContent:'space-around'}}>\n                              <div\n                                  onClick={()=>{\n                                      if(!auto)\n                                          controlDevice()\n                                      _auto=!_auto\n                                      setAuto(!auto)\n                                  }}\n                                  className=\"flex-1 center column\"\n                              >\n                                  <ReloadOutlined style={{backgroundColor:Colors[auto?\"green\":\"red\"],fontSize:\"3.5vh\",color:Colors.white,padding:13,borderRadius:100}}/>\n                                  <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\n                                      {string.otomatikatis}\n                                  </div>\n                              </div>\n                              {\n                                  !auto?\n                                      <div className=\"flex-1 center column\" onClick={controlDevice} >\n                                          <div className=\"flex center\" style={{backgroundColor:Colors.primary,width:\"6.5vh\",height:\"6.5vh\",color:Colors.white,borderRadius:100}}>\n                                              <img src={require(\"../assets/images/measure.png\").default} style={{width:\"3vh\",height:\"3vh\"}}/>\n                                          </div>\n                                          <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\n                                              {string.atisyap}\n                                          </div>\n                                      </div>:<div className=\"flex-1\"/>\n                              }\n\n                          </div>\n                      </div>\n                  </SwiperSlide>\n              </Swiper>\n          </div>\n\n      </div>\n  );\n}\nexport default observer(Compass)","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/slide.js",["168"],"import React, {useEffect, useState} from \"react\"\nimport {useHistory} from \"react-router-dom\";\nimport {Col} from \"antd\";\nimport Colors from \"../constants/Colors\";\nimport {string} from \"../locales\";\nimport {MStore} from \"../stores/MainStore\";\n\nconst Slide = () => {\n    const history = useHistory()\n    const [page,setPage] = useState(1)\n\n    useEffect(() => {\n        setPage(1)\n    }, []);\n\n    const slide = [\n        {\n            title:\"olcum\",\n            desc:\"olcumdesc\",\n            icon:require(\"../assets/images/olcum.png\").default\n        },\n        {\n            title:\"cihaziyapilandir\",\n            desc:\"cihaziyapilandirdesc\",\n            icon:require(\"../assets/images/cihaz.png\").default\n        },\n        /*{\n            title:\"aygityazilimi\",\n            desc:\"aygityazilimidesc\",\n            icon:require(\"../assets/images/aygit.png\").default\n        },*/\n        {\n            title:\"cihazbagla\",\n            desc:\"cihazbagladesc\",\n            icon:require(\"../assets/images/bagla.png\").default\n        }\n    ]\n\n    const {title,desc,icon} = slide[page-1]\n\n    return (\n        <div  className=\"flex-1 column contain center background-img\" style={{width:'100%', backgroundImage:`url(${require(\"../assets/images/slide-bg/bg1.png\").default})`}}>\n            <div  className=\"flex center background-img \" style={{width:\"50vh\",height:\"50vh\", backgroundImage:`url(${require(\"../assets/images/slide-bg/bg2.png\").default})`}}>\n                <div className=\"flex row center\" style={{marginLeft:'18vw', flexDirection:'space-between'}}>\n                    <div style={{textAlign:'center',padding:'3vw', fontWeight:'bold',fontSize:\"4vh\",color:Colors.white}}>{string[title]}</div>\n                   <div className=\"flex center\" style={{padding:\"4vh\",borderRadius:1000,backgroundColor:Colors.primary}}>\n                       <img src={icon} alt={title} style={{width:\"6vh\",height:\"6vh\"}}/>\n                   </div>\n                </div>\n            </div>\n            <div style={{width:'50%', textAlign:'center', fontWeight:'500',fontSize:\"2vh\",color:Colors.text}}>{string[desc]}</div>\n            <div className=\"flex row center\" style={{marginTop:\"4vh\",}} >\n                {\n                    slide.map((_,index)=>\n                        <div key={index} style={{margin:10, width:\"10vw\",height:10,borderRadius:10,backgroundColor:page>=(index+1)?Colors.primary:Colors.lightBlack}}/>\n                    )\n                }\n            </div>\n            <div\n                onClick={()=>{\n                    if(page<slide.length){\n                        setPage(page+1)\n                    }else{\n\n                        MStore.setFirst(false)\n                        history.push(\"/\")\n                    }\n                }}\n\n                className=\"flex center btn\" style={{marginTop:\"3vh\", padding:\"1vh 7vh\",borderRadius:15,backgroundColor:Colors.primary}}>\n                <div style={{textAlign:'center',fontWeight:'500',fontSize:\"2vh\",color:Colors.white}}>{string[\"devamet\"]}</div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Slide\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/moreInfo.js",["169","170","171"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport Header, { HelpText, MoreInfoButton } from \"../componenets/Header\";\nimport { string } from \"../locales\";\nimport Colors from \"../constants/Colors\";\nimport { RightOutlined } from \"@ant-design/icons\";\n\nimport { contacts, findType, HomeScreenTypes } from \"../constants/Config\";\nimport { MStore } from \"../stores/MainStore\";\nimport { Modal, Switch } from \"antd\";\nimport { IStore } from \"../stores/InstantStore\";\nimport { setModalTypes } from \"../componenets/SetModal\";\nimport useStayAwake from \"use-stay-awake\";\n\nconst MoreInfo = () => {\n  const history = useHistory();\n  const device = useStayAwake();\n\n  const [visible, setVisible] = useState(false);\n\n  const { home_screen_type, lock_screen } = MStore.settings;\n\n  function Contact() {\n    return (\n      <Modal\n        bodyStyle={{ padding: 0, backgroundColor: Colors.darkGray }}\n        centered\n        closable={false}\n        visible={visible}\n        okText={string.kaydet}\n        cancelText={string.kapat}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n        footer={null}\n      >\n        <div style={{ width: \"100%\" }}>\n          <div\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <div\n              className=\"background-img\"\n              style={{\n                display: \"flex\",\n                width: 60,\n                height: 55,\n                backgroundImage: `url(${\n                  require(\"../assets/images/modal/corner.png\").default\n                })`,\n              }}\n            >\n              <div\n                style={{ marginLeft: 20, marginBottom: 10 }}\n                className=\"flex-1 center\"\n              >\n                <img\n                  src={require(\"../assets/images/modal/iletisim.png\").default}\n                  height={25}\n                  width={25}\n                />\n              </div>\n            </div>\n          </div>\n          <div style={{ padding: 15 }}>\n            <div\n              style={{\n                fontSize: 18,\n                fontWeight: \"bold\",\n                color: Colors.primary,\n                textAlign: \"center\",\n              }}\n            >\n              {string[\"bizeulasin\"]}\n            </div>\n          </div>\n          <div\n            className=\"flex center row\"\n            style={{ display: \"grid\", width: \"100%\", padding: 10 }}\n          >\n            {Object.values(contacts).map(({ title, value, onPress }, index) => (\n              <div\n                key={index}\n                style={{ cursor: \"pointer\", display: \"flex\" }}\n                onClick={() => {\n                  onPress(value.replace(/ /g, \"\"));\n                }}\n              >\n                <div style={{ padding: 10 }}>\n                  <div\n                    style={{\n                      fontSize: 18,\n                      fontWeight: \"bold\",\n                      color: Colors.white,\n                    }}\n                  >\n                    {string[title] + \": \" + value}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div\n            className={\"flex row\"}\n            style={{\n              padding: 15,\n              width: \"100%\",\n              margin: \"40px 0\",\n              alignItems: \"center\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            <div className=\"flex-1 center\">\n              <div\n                style={{\n                  fontSize: 18,\n                  color: Colors.primary,\n                  fontWeight: \"bold\",\n                  padding: 10,\n                }}\n                onClick={() => {\n                  setVisible(false);\n                }}\n              >\n                {string.kapat}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 column contain center\">\n      <Contact />\n      <div className=\"center\" style={{ width: \"100%\" }}>\n        <Header\n          onBack={() => {\n            history.goBack();\n          }}\n          right={() => <MoreInfoButton close />}\n        />\n      </div>\n      <div\n        className=\"flex row\"\n        style={{ fontSize: 25, fontWeight: \"bold\", color: Colors.primary }}\n      >\n        {string.dahafazla}\n      </div>\n      <div\n        className=\"flex-1 scroll column\"\n        style={{ width: \"100%\", alignItems: \"center\" }}\n      >\n        <div\n          className=\"flex row btn\"\n          style={{\n            width: \"50%\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            padding: 12,\n            margin: \"20px 0px\",\n            borderRadius: 15,\n            backgroundColor: Colors.secondary,\n          }}\n          onClick={() => {\n            IStore.setSetModal({\n              visible: true,\n              title: string[\"olcumonceligi\"],\n              value: home_screen_type,\n              type: setModalTypes.Select,\n              options: Object.values(HomeScreenTypes),\n              icon: require(\"../assets/images/modal/oncelik.png\"),\n              onChange: async (id) => {\n                MStore.setSettings({\n                  ...MStore.settings,\n                  home_screen_type: id,\n                });\n              },\n            });\n          }}\n        >\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\n            {string[\"olcumonceligi\"]}\n          </div>\n          <div className=\"flex row center\">\n            <div\n              style={{\n                display: \"flex\",\n                flex: 2,\n                textAlign: \"left\",\n                color: Colors.text,\n                padding: 10,\n                fontSize: 15,\n              }}\n            >\n              {string[findType(HomeScreenTypes, home_screen_type)]}\n            </div>\n            <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\n          </div>\n        </div>\n        <div\n          className=\"flex row\"\n          style={{\n            borderBottomStyle: \"dashed\",\n            borderBottomWidth: 3,\n            borderRadius: 2,\n            borderColor: \"#667587\",\n            width: \"50%\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            padding: 12,\n            margin: \"15px 0px\",\n          }}\n        >\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\n            {string[\"ekranklidiniengelle\"]}\n          </div>\n          <div>\n            <Switch\n              defaultChecked={lock_screen}\n              onChange={(lock_screen) => {\n                MStore.setSettings({ ...MStore.settings, lock_screen });\n                if (lock_screen) {\n                  device.preventSleeping();\n                } else {\n                  device.allowSleeping();\n                }\n              }}\n            />\n          </div>\n        </div>\n        <div\n          className=\"flex row btn\"\n          style={{\n            width: \"50%\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            padding: 12,\n            margin: \"20px 0px\",\n            borderRadius: 15,\n            backgroundColor: Colors.secondary,\n          }}\n          onClick={() => {\n            history.push(\"select-device\");\n          }}\n        >\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\n            {string[\"cihazabaglan\"]}\n          </div>\n          <div className=\"flex row center\">\n            <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\n          </div>\n        </div>\n        <div\n          className=\"flex row btn\"\n          style={{\n            width: \"50%\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            padding: 12,\n            margin: \"20px 0px\",\n            borderRadius: 15,\n            backgroundColor: Colors.secondary,\n          }}\n          onClick={() => {\n            setVisible(true);\n          }}\n        >\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\n            {string[\"hakkinda\"]}\n          </div>\n          <div className=\"flex row center\">\n            <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(MoreInfo);\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/selectDevice.js",["172","173","174"],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/componenets/Loading.js",["175"],"import React, { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport Colors from \"../constants/Colors\";\nimport { Spin } from \"antd\";\nimport { IStore } from \"../stores/InstantStore\";\n\nconst Loading = () => {\n  if (!IStore.loading) return null;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        width: \"100%\",\n        height: \"100vh\",\n        zIndex: 9999,\n        flex: 1,\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        className=\"center\"\n        style={{\n          border: `4px solid ${Colors.primary}`,\n          width: 80,\n          height: 80,\n          backgroundColor: Colors.darkGray,\n          borderRadius: 1000,\n        }}\n      >\n        <Spin size=\"large\" style={{ display: \"flex\" }} />\n      </div>\n    </div>\n  );\n};\n\nexport default observer(Loading);\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/componenets/SetModal.tsx",["176","177","178","179","180","181","182","183","184"],"import * as React from \"react\";\n\nimport { observer } from \"mobx-react-lite\";\nimport { IStore } from \"../stores/InstantStore\";\nimport { useEffect, useState } from \"react\";\nimport { InputNumber, Modal, Spin } from \"antd\";\nimport { string } from \"../locales\";\nimport Colors from \"../constants/Colors\";\nimport { CheckCircleOutlined, MinusCircleOutlined } from \"@ant-design/icons\";\nimport { error } from \"../functions/toast\";\n\nexport const setModalTypes = {\n  Select: \"select\",\n  Number: \"number\",\n};\n\nfunction SetModal() {\n  const {\n    visible,\n    title = \"\",\n    description = \"\",\n    icon = require(\"../assets/images/cihaz2.png\"),\n    value,\n    options,\n    type,\n    numberParams = {},\n    onChange = async (data: any) => {},\n  } = IStore.set_modal;\n\n  const [defaultValue, setDefaultValue]: any = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setDefaultValue(value);\n  }, [value]);\n\n  return (\n    <Modal\n      bodyStyle={{ padding: 0, backgroundColor: Colors.darkGray }}\n      centered\n      closable={false}\n      visible={visible}\n      okText={string.kaydet}\n      cancelText={string.kapat}\n      onOk={() => {\n        IStore.setSetModal({ visible: false });\n      }}\n      onCancel={() => {\n        IStore.setSetModal({ visible: false });\n      }}\n      footer={null}\n    >\n      <div style={{ width: \"100%\" }}>\n        {icon ? (\n          <div\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <div\n              className=\"background-img\"\n              style={{\n                display: \"flex\",\n                width: 60,\n                height: 55,\n                backgroundImage: `url(${\n                  require(\"../assets/images/modal/corner.png\").default\n                })`,\n              }}\n            >\n              <div\n                style={{ marginLeft: 20, marginBottom: 10 }}\n                className=\"flex-1 center\"\n              >\n                <img src={icon.default} height={25} width={25} />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div style={{ height: 25 }} />\n        )}\n        <div style={{ padding: 15 }}>\n          {title ? (\n            <div\n              style={{\n                fontSize: 18,\n                fontWeight: \"bold\",\n                color: Colors.text,\n                textAlign: \"center\",\n              }}\n            >\n              {string[title]}\n            </div>\n          ) : null}\n          {description ? (\n            <div\n              style={{\n                fontSize: 15,\n                fontWeight: \"bold\",\n                color: Colors.text,\n                textAlign: \"center\",\n              }}\n            >\n              {string[description]}\n            </div>\n          ) : null}\n        </div>\n        <div className=\"flex center\" style={{ width: \"100%\", padding: 10 }}>\n          {type == setModalTypes.Select ? (\n            <Select\n              defaultValue={defaultValue}\n              options={options}\n              onChange={(data: any) => {\n                setDefaultValue(data);\n              }}\n            />\n          ) : type == setModalTypes.Number ? (\n            <Number\n              numberParams={numberParams}\n              defaultValue={defaultValue}\n              onChange={(data: any) => {\n                setDefaultValue(data);\n              }}\n            />\n          ) : null}\n        </div>\n\n        <div\n          className={\"flex row\"}\n          style={{\n            padding: 15,\n            width: \"100%\",\n            margin: \"40px 0\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <div className=\"flex-1 center\">\n            <div\n              className=\"btn\"\n              style={{\n                fontSize: 18,\n                color: Colors.primary,\n                fontWeight: \"bold\",\n                padding: 10,\n              }}\n              onClick={() => {\n                IStore.setSetModal({ visible: false });\n              }}\n            >\n              {string.kapat}\n            </div>\n          </div>\n          <div className=\"flex-1 center\">\n            <div\n              className=\"btn\"\n              style={{\n                fontSize: 18,\n                color: Colors.primary,\n                fontWeight: \"bold\",\n                padding: 10,\n              }}\n              onClick={() => {\n                if (loading) {\n                  return;\n                }\n                let value: any = defaultValue;\n\n                if (type == setModalTypes.Number) {\n                  let { fixed, min, max, unit = \"\" } = numberParams;\n\n                  value = parseInt(value.toString());\n                  console.warn(value, max);\n\n                  if (isNaN(value) || !/^-?\\d+$/.test(value.toString())) {\n                    error(\"Geçersiz Veri\");\n                    return;\n                  }\n                  if (min != undefined && value < min) {\n                    if (fixed) {\n                      min = min / Math.pow(10, fixed);\n                    }\n                    error(\"Minimum \" + min + \" \" + unit);\n                    return;\n                  }\n                  if (max != undefined && value > max) {\n                    if (fixed) {\n                      max = max / Math.pow(10, fixed);\n                    }\n                    error(\"Maximum \" + max + \" \" + unit);\n                    return;\n                  }\n                }\n\n                setLoading(true);\n                onChange(value).then(() => {\n                  setLoading(false);\n                  IStore.setSetModal({ visible: false });\n                });\n              }}\n            >\n              {loading ? <Spin /> : string.kaydet}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nfunction Select({ defaultValue, options, onChange }: any) {\n  return (\n    <div style={{ width: \"50%\" }}>\n      {Array.isArray(options)\n        ? options.map(({ id, value }: any) => (\n            <div\n              key={id}\n              style={{ width: \"100%\" }}\n              onClick={() => {\n                onChange(id);\n              }}\n            >\n              <div\n                style={\n                  {\n                    borderBottomStyle: \"dashed\",\n                    borderBottomWidth: 1,\n                    borderRadius: 1,\n                    borderColor: \"#667587\",\n                    padding: 10,\n                    width: \"100%\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    \"--active-color\":\n                      Colors.text + (defaultValue == id ? \"\" : \"88\"),\n                    \"--default-color\": Colors.text,\n                  } as React.CSSProperties\n                }\n                className={`flex row select-button`}\n              >\n                <div\n                  style={\n                    {\n                      display: \"flex\",\n                      flex: 1,\n                      fontSize: 15,\n                      fontWeight: \"bold\",\n                      // color: Colors.text + (defaultValue == id ? \"\" : \"88\"),\n                      padding: 7,\n                    } as React.CSSProperties\n                  }\n                >\n                  {string[value] ?? value}\n                </div>\n                {defaultValue == id ? (\n                  <CheckCircleOutlined\n                    style={{\n                      fontSize: 18,\n                      // color: Colors.text + (defaultValue == id ? \"\" : \"88\"),\n                    }}\n                  />\n                ) : (\n                  <MinusCircleOutlined\n                    style={{\n                      fontSize: 18,\n                      // color: Colors.text + (defaultValue == id ? \"\" : \"88\"),\n                    }}\n                  />\n                )}\n              </div>\n            </div>\n          ))\n        : null}\n    </div>\n  );\n}\n\nfunction Number({\n  defaultValue = \"loading\",\n  onChange,\n  numberParams = {},\n}: any) {\n  let { fixed = 0, min = 0, max = 0, unit = \"\" } = numberParams;\n\n  if (fixed) {\n    min = min / Math.pow(10, fixed);\n    max = max / Math.pow(10, fixed);\n  }\n\n  if (defaultValue == \"loading\") return null;\n\n  return (\n    <div className=\"flex center\" style={{ width: \"100%\" }}>\n      <div\n        className=\"flex row\"\n        style={{\n          width: \"50%\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          alignSelf: \"center\",\n          display: \"flex\",\n          padding: 10,\n          borderStyle: \"dashed\",\n          borderWidth: 1,\n          borderRadius: 1,\n          borderColor: \"#667587\",\n        }}\n      >\n        <InputNumber\n          bordered={false}\n          precision={fixed}\n          style={{\n            flex: 1,\n            color: Colors.text,\n            backgroundColor: Colors.darkGray,\n            borderColor: Colors.text,\n          }}\n          size=\"large\"\n          min={min}\n          max={max}\n          defaultValue={defaultValue / Math.pow(10, fixed)}\n          stringMode\n          onChange={(num) => {\n            onChange(num * Math.pow(10, fixed));\n          }}\n        />\n        <div style={{ fontSize: 14, color: Colors.text }}>{unit}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default observer(SetModal);\n",["185","186"],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/laserMeter.js",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"import React, { useEffect, useRef, useState } from \"react\";\nimport GoogleMapReact, { fitBounds } from \"google-map-react\";\nimport { IStore } from \"../stores/InstantStore\";\nimport { Spin } from \"antd\";\nimport Colors from \"../constants/Colors\";\nimport { findLocation } from \"../functions/findLocation\";\nimport BLEService from \"../services/BLEService\";\nimport { info } from \"../functions/toast\";\nimport { Params } from \"../constants/Params\";\nimport { distanceConversion } from \"../functions/Conversions\";\nimport { useHistory } from \"react-router-dom\";\nimport { string } from \"../locales\";\nimport { DistanceUnitTypes } from \"../constants/Config\";\nimport { ipcRenderer } from \"electron\";\n\nlet _compass = false;\nlet old_heading = 0;\nlet _location = {};\nlet target_locations = [];\nlet bound_target = {};\nlet maps = null;\n\nconst coords = {\n  accuracy: 15.98,\n  altitude: 124.65,\n  altitudeAccuracy: 3.5,\n  heading: null,\n  latitude: 0,\n  longitude: 0,\n  speed: null,\n};\n\nconst LaserMeter = () => {\n  const ble = IStore.ble;\n  const history = useHistory();\n  const param = Params();\n  const map = useRef();\n  const div = useRef();\n\n  const [location, setLocation] = useState(null);\n  const [targets, setTargets] = useState(null);\n  const [heading, setHeading] = useState(old_heading);\n  const [compass, setCompass] = useState(_compass);\n  const [distance_unit, setDistanceUnit] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const target_len = Array.isArray(targets) ? targets.length : 0;\n\n  useEffect(() => {\n    try {\n      ipcRenderer.send(\"get-location\", null);\n      ipcRenderer.on(\"find-location\", getLocation);\n    } catch (e) {}\n\n    BLEService.event.on(\"distance_and_compass\", _setData);\n\n    return () => {\n      BLEService.event.removeListener(\"distance_and_compass\", _setData);\n      ipcRenderer.removeListener(\"find-location\", getLocation);\n    };\n  }, []);\n\n  async function getLocation(e, res) {\n    console.warn(res);\n    _location = {\n      ...coords,\n      latitude: parseFloat(res[0].replace(\",\", \".\")),\n      longitude: parseFloat(res[1].replace(\",\", \".\")),\n      altitude: parseFloat(res[2].replace(\",\", \".\")),\n      accuracy: parseFloat(res[3].replace(\",\", \".\")),\n      altitudeAccuracy: parseFloat(res[4].replace(\",\", \".\")),\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421,\n    };\n    setLocation(_location);\n    await ble.sendDataToDevice(\n      \"distance_and_compass\",\n      param.distance_and_compass.getHex\n    );\n  }\n\n  function _setData({\n    distance,\n    distance_unit,\n    angle_unit,\n    azimuth,\n    elevation,\n    roll,\n  }) {\n    if (azimuth == 0 || azimuth == 180 || azimuth == 360) azimuth += 0.000001;\n    azimuth = azimuth % 360;\n\n    setLoading(false);\n    if (!_location?.latitude) return;\n\n    target_locations = [];\n\n    for (const val of distance) {\n      let target = findLocation(\n        _location.latitude,\n        _location.longitude,\n        val,\n        azimuth,\n        elevation,\n        angle_unit,\n        distance_unit\n      );\n      target_locations.push({\n        ...target,\n        height: target.y_distance,\n        distance: target.x_distance,\n        azimuth,\n        polyline: maps\n          ? new maps.Polyline({\n              path: [\n                { lat: target.latitude, lng: target.longitude },\n                { lat: _location.latitude, lng: _location.longitude },\n              ],\n              geodesic: true,\n              strokeColor: Colors.text,\n              strokeOpacity: 0.7,\n              strokeWeight: 4,\n            })\n          : null,\n      });\n    }\n    bound_target = target_locations[distance.indexOf(Math.max(...distance))];\n    setTargets([...target_locations]);\n    setDistanceUnit({\n      unit: distanceConversion(distance, distance_unit, distance_unit).unit,\n      id: distance_unit,\n    });\n\n    try {\n      for (const { polyline } of target_locations) {\n        polyline.setMap(map.current);\n      }\n    } catch (e) {}\n\n    setTimeout(() => {\n      try {\n        if (!_compass && maps) {\n          map.current.panTo([\n            ...target_locations.map(({ latitude, longitude }) => ({\n              lat: latitude,\n              lng: longitude,\n            })),\n            { lat: _location.latitude, lng: _location.longitude },\n          ]);\n        }\n      } catch (e) {}\n    }, 1000);\n  }\n\n  function controlDevice() {\n    try {\n      for (const { polyline } of target_locations) {\n        polyline.setMap(null);\n      }\n    } catch (e) {}\n    setTargets([]);\n    const device = ble.getDevice();\n\n    if (device) {\n      findTarget();\n    } else {\n      history.push(\"select-device\");\n    }\n  }\n  async function findTarget() {\n    info(\"Atış Yapılıyor...\");\n    setLoading(true);\n    ipcRenderer.send(\"get-location\", null);\n  }\n\n  const Marker = ({ my, title }) => {\n    if (my) {\n      return (\n        <div\n          className=\"center\"\n          style={{\n            marginTop: -15,\n            marginLeft: -15,\n            width: 30,\n            height: 30,\n            backgroundColor: Colors.primary,\n            borderRadius: 100,\n          }}\n        >\n          <div\n            style={{\n              width: 15,\n              height: 15,\n              backgroundColor: Colors.white,\n              borderRadius: 100,\n            }}\n          ></div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"flex center column\" style={{ marginTop: -40 }}>\n        <img\n          src={\n            target_len > 1\n              ? require(\"../assets/images/placeholder-full.png\").default\n              : require(\"../assets/images/placeholder.png\").default\n          }\n          style={{ width: 40, height: 40 }}\n        />\n        {target_len > 1 ? (\n          <div\n            style={{\n              marginBottom: 10,\n              position: \"absolute\",\n              textAlign: \"center\",\n              fontSize: 17,\n              color: Colors.white,\n              fontWeight: \"bold\",\n            }}\n          >\n            {title}\n          </div>\n        ) : null}\n      </div>\n    );\n  };\n\n  if (!location)\n    return (\n      <div className=\"contain center\">\n        <Spin />\n      </div>\n    );\n\n  let center = { lat: location.latitude, lng: location.longitude },\n    zoom = 15;\n\n  if (Array.isArray(targets) && targets.length) {\n    const res = fitBounds(\n      bound_target.azimuth > 180\n        ? {\n            ne: {\n              lat: location.latitude,\n              lng: location.longitude,\n            },\n            sw: {\n              lat: bound_target.latitude,\n              lng: bound_target.longitude,\n            },\n          }\n        : {\n            nw: {\n              lat: location.latitude,\n              lng: location.longitude,\n            },\n            se: {\n              lat: bound_target.latitude,\n              lng: bound_target.longitude,\n            },\n          },\n      {\n        width: div?.current?.offsetWidth ?? 0, // Map width in pixels\n        height: div?.current?.offsetHeight ?? 0, // Map height in pixels\n      }\n    );\n    center = res.center;\n    zoom = (res.zoom ?? 10) - 0.5;\n  }\n\n  function ConvertDDToDMS(D) {\n    return [\n      0 | D,\n      \"D \",\n      0 | (((D = (D < 0 ? -D : D) + 1e-4) % 1) * 60),\n      \"' \",\n      0 | (((D * 60) % 1) * 60),\n      '\"',\n    ].join(\"\");\n  }\n\n  return (\n    <div style={{ height: \"90vh\", width: \"100%\" }}>\n      <div ref={div} style={{ display: \"flex\", height: \"55%\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyAJ_6n7wqqK8sIk0LV6IqO3OuukpMIbQMM\" }}\n          center={center}\n          zoom={zoom}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map: _map, maps: _maps }) => {\n            map.current = _map;\n            maps = _maps;\n          }}\n          options={{\n            styles: [\n              { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\n              {\n                elementType: \"labels.text.stroke\",\n                stylers: [{ color: \"#242f3e\" }],\n              },\n              {\n                elementType: \"labels.text.fill\",\n                stylers: [{ color: \"#746855\" }],\n              },\n              ...require(\"../assets/styles/googleMap.json\"),\n            ],\n          }}\n        >\n          <Marker lat={location.latitude} lng={location.longitude} my />\n          {Array.isArray(targets) && targets.length\n            ? targets.map((target, index) => (\n                <Marker\n                  key={index}\n                  lat={target.latitude}\n                  lng={target.longitude}\n                  title={index + 1}\n                />\n              ))\n            : null}\n        </GoogleMapReact>\n      </div>\n      <div\n        className=\"flex-1 center column\"\n        style={{ height: \"45%\", width: \"100%\" }}\n      >\n        {target_len ? (\n          <div\n            className=\"flex-1 row center\"\n            style={{\n              ...(target_len == 1 ? {} : { display: \"-webkit-box\" }),\n              overflowX: \"scroll\",\n              width: \"100%\",\n              alignItems: \"center\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {Array.isArray(targets)\n              ? targets.map(\n                  ({ latitude, longitude, height, distance }, index) => (\n                    <div key={index} style={{ padding: 10, margin: 10 }}>\n                      {target_len > 1 ? (\n                        <div\n                          style={{\n                            textAlign: \"center\",\n                            width: \"100%\",\n                            fontSize: \"1.1rem\",\n                            marginBottom: 15,\n                            color: Colors.white,\n                            textDecorationLine: \"underline\",\n                            fontWeight: \"500\",\n                          }}\n                        >\n                          {\"Hedef \" + (index + 1)}\n                        </div>\n                      ) : null}\n\n                      <div\n                        className=\"flex row\"\n                        style={{\n                          backgroundColor: Colors.primary + \"20\",\n                          borderRadius: 10,\n                          padding: 5,\n                          margin: 5,\n                        }}\n                      >\n                        <div\n                          className=\"flex column\"\n                          style={{\n                            padding: 10,\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <img\n                            src={\n                              require(\"../assets/images/distance.png\").default\n                            }\n                            style={{ width: \"2.2rem\", height: \"2.2rem\" }}\n                          />\n                          <div\n                            style={{\n                              fontSize: \"0.9rem\",\n                              color: Colors.white,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {parseFloat(distance).toFixed(2) +\n                              distance_unit.unit}\n                          </div>\n                          <div\n                            style={{\n                              fontSize: \"0.7rem\",\n                              color: Colors.primary,\n                            }}\n                          >\n                            {string.mesafe2}\n                          </div>\n                        </div>\n                        <div\n                          className=\"flex column\"\n                          style={{\n                            padding: 10,\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <img\n                            src={require(\"../assets/images/target.png\").default}\n                            style={{ width: \"2.2rem\", height: \"2.2rem\" }}\n                          />\n                          <div\n                            style={{\n                              fontSize: \"0.9rem\",\n                              color: Colors.white,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {\"±\" +\n                              parseFloat(\n                                distanceConversion(\n                                  location.accuracy,\n                                  DistanceUnitTypes.Metre.id,\n                                  distance_unit.id\n                                ).distance\n                              ).toFixed(2) +\n                              distance_unit.unit}\n                          </div>\n                          <div\n                            style={{\n                              fontSize: \"0.7rem\",\n                              color: Colors.primary,\n                            }}\n                          >\n                            {string.konumdogrulugu}\n                          </div>\n                        </div>\n                        <div\n                          className=\"flex column\"\n                          style={{\n                            padding: 10,\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <img\n                            src={require(\"../assets/images/height.png\").default}\n                            style={{ width: \"2.2rem\", height: \"2.2rem\" }}\n                          />\n                          <div className=\"flex row center\">\n                            <div\n                              style={{\n                                fontSize: \"0.9rem\",\n                                color: Colors.white,\n                                fontWeight: \"bold\",\n                              }}\n                            >\n                              {parseFloat(\n                                height + (location.altitude ?? 0)\n                              ).toFixed(2) + distance_unit.unit}\n                            </div>\n                            {location.altitudeAccuracy ? (\n                              <div\n                                style={{\n                                  fontSize: \"0.7rem\",\n                                  color: Colors.white,\n                                  fontWeight: \"bold\",\n                                  marginLeft: 5,\n                                }}\n                              >\n                                {\"±\" +\n                                  parseInt(\n                                    distanceConversion(\n                                      location.altitudeAccuracy,\n                                      DistanceUnitTypes.Metre.id,\n                                      distance_unit.id\n                                    ).distance\n                                  )}\n                              </div>\n                            ) : null}\n                          </div>\n                          <div\n                            style={{\n                              fontSize: \"0.7rem\",\n                              color: Colors.primary,\n                            }}\n                          >\n                            {string.yukseklik}\n                          </div>\n                        </div>\n                      </div>\n                      <div\n                        className=\"flex row\"\n                        style={{\n                          alignItems: \"center\",\n                          justifyContent: \"space-between\",\n                          width: \"100%\",\n                        }}\n                      >\n                        <div\n                          className=\"flex-1 column\"\n                          style={{\n                            padding: 10,\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <div\n                            className=\"center\"\n                            style={{\n                              width: \"1.8rem\",\n                              height: \"1.8rem\",\n                              backgroundColor: Colors.primary,\n                              borderRadius: 100,\n                            }}\n                          >\n                            <div\n                              style={{\n                                width: \"0.9rem\",\n                                height: \"0.9rem\",\n                                backgroundColor: Colors.white,\n                                borderRadius: 100,\n                              }}\n                            ></div>\n                          </div>\n                          <div\n                            style={{\n                              fontSize: \"0.8rem\",\n                              color: Colors.white,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {ConvertDDToDMS(location.latitude) + \" N\"}\n                          </div>\n                          <div\n                            style={{\n                              fontSize: \"0.8rem\",\n                              color: Colors.white,\n                              fontWeight: \"500\",\n                            }}\n                          >\n                            {ConvertDDToDMS(location.longitude) + \" E\"}\n                          </div>\n                        </div>\n                        <div\n                          className=\"flex-1\"\n                          style={{\n                            borderStyle: \"dashed\",\n                            borderWidth: 1,\n                            borderRadius: 1,\n                            borderColor: \"#667587\",\n                          }}\n                        />\n                        <div\n                          className=\"flex-1 column\"\n                          style={{\n                            padding: 10,\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <img\n                            src={\n                              require(\"../assets/images/placeholder.png\")\n                                .default\n                            }\n                            style={{ width: \"1.8rem\", height: \"1.8rem\" }}\n                          />\n                          <div\n                            style={{\n                              fontSize: \"0.8rem\",\n                              color: Colors.white,\n                              fontWeight: \"500\",\n                            }}\n                          >\n                            {ConvertDDToDMS(latitude) + \" N\"}\n                          </div>\n                          <div\n                            style={{\n                              fontSize: \"0.8rem\",\n                              color: Colors.white,\n                              fontWeight: \"500\",\n                            }}\n                          >\n                            {ConvertDDToDMS(longitude) + \" E\"}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                )\n              : null}\n          </div>\n        ) : null}\n        <div\n          onClick={controlDevice}\n          className=\"flex row center btn\"\n          style={{\n            padding: \"10px 15px\",\n            margin: 10,\n            borderRadius: 10,\n            backgroundColor: Colors.primary,\n          }}\n        >\n          <div\n            style={{ color: Colors.white, fontWeight: \"bold\", fontSize: 14 }}\n          >\n            {string.atisyap}\n          </div>\n          <img\n            src={require(\"../assets/images/measure.png\").default}\n            style={{ width: 25, height: 25 }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaserMeter;\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/setting.js",["203","204","205"],"import React, { useEffect, useState } from \"react\";\nimport Colors from \"../constants/Colors\";\nimport { string } from \"../locales\";\nimport Header, { HelpText, MoreInfoButton } from \"../componenets/Header\";\nimport { IStore } from \"../stores/InstantStore\";\nimport { Params } from \"../constants/Params\";\nimport { InputNumber, Spin } from \"antd\";\nimport { ReloadOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { observer } from \"mobx-react-lite\";\nimport BLEService from \"../services/BLEService\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Setting = () => {\n  const history = useHistory();\n  const ble = IStore.ble;\n  const params = Params();\n  const usage_params = {\n    distance_unit: params.distance_unit,\n    article_mode: params.article_mode,\n    language: params.language,\n    angle_unit_type: params.angle_unit_type,\n    night_vision_mode: params.night_vision_mode,\n    device_sleep_time: params.device_sleep_time,\n    bluetooth_sleep_time: params.bluetooth_sleep_time,\n    bottom_door_lock: params.bottom_door_lock,\n    top_door_lock: params.top_door_lock,\n    magnetic_declination_angle: params.magnetic_declination_angle,\n  };\n\n  const [data, setData] = useState(ble.getData());\n  const [device, setDevice] = useState(\"loading\");\n\n  useEffect(() => {\n    BLEService.event.on(\"monitor\", _setData);\n    controlDevice();\n\n    return () => {\n      BLEService.event.removeListener(\"monitor\", _setData);\n    };\n  }, []);\n\n  function _setData({ all_data }) {\n    setData({ ...all_data });\n  }\n\n  function reload() {\n    setData({\n      ...data,\n      ...{\n        distance_unit: \"\",\n        article_mode: \"\",\n        language: \"\",\n        angle_unit_type: \"\",\n        night_vision_mode: \"\",\n        device_sleep_time: null,\n        bluetooth_sleep_time: null,\n        bottom_door_lock: 0,\n        top_door_lock: 0,\n        magnetic_declination_angle: 0,\n      },\n    });\n\n    controlDevice();\n  }\n\n  async function controlDevice() {\n    const device = ble.getDevice();\n    setDevice(device);\n\n    if (device) {\n      getValues();\n    }\n  }\n\n  function getValues() {\n    for (let [key, param] of Object.entries(usage_params)) {\n      if (param.getHex) ble.sendDataToDevice(key, param.getHex).then(() => {});\n    }\n  }\n\n  if (!device) {\n    return (\n      <div className=\"column contain center\">\n        <div style={{ fontSize: 20, color: Colors.text, fontWeight: \"bold\" }}>\n          {string[\"101\"]}\n        </div>\n        <div\n          className=\"btn\"\n          onClick={() => {\n            history.push(\"select-device\");\n          }}\n          style={{\n            margin: 10,\n            padding: \"10px 15px\",\n            backgroundColor: Colors.primary,\n            borderRadius: 10,\n            fontSize: 16,\n            color: Colors.text,\n            fontWeight: \"bold\",\n          }}\n        >\n          {string.simdibaglan}\n        </div>\n      </div>\n    );\n  }\n\n  if (device == \"loading\") {\n    return null;\n  }\n\n  return (\n    <div className=\"center contain column\">\n      <div className=\"center\" style={{ width: \"100%\" }}>\n        <Header left={() => <HelpText />} right={() => <MoreInfoButton />} />\n      </div>\n\n      <div\n        className=\"flex row\"\n        style={{\n          width: \"50%\",\n          flexDirection: \"space-between\",\n          alignItems: \"center\",\n          fontSize: 25,\n          fontWeight: \"bold\",\n          color: Colors.primary,\n        }}\n      >\n        <div className=\"flex-1\"></div>\n        <div className=\"flex-3 center\" style={{ textAlign: \"center\" }}>\n          {string.ayarlar}\n        </div>\n        <div className=\"flex-1\" style={{ justifyContent: \"flex-end\" }}>\n          <div className=\"btn\" style={{ padding: 20 }} onClick={reload}>\n            <ReloadOutlined style={{ fontSize: 20, color: Colors.text }} />\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"flex column scroll\"\n        style={{ width: \"100%\", height: \"100vh\" }}\n      >\n        <div\n          style={{\n            alignSelf: \"center\",\n            padding: 20,\n            margin: 20,\n            borderRadius: 10,\n            width: \"50%\",\n          }}\n        >\n          {Object.entries(usage_params).map(\n            (\n              [\n                key,\n                { title, setHex = () => {}, options, type, numberParams = {} },\n              ],\n              index\n            ) => {\n              const value = data[key];\n\n              return (\n                <div\n                  key={index}\n                  className=\"flex row btn\"\n                  style={{\n                    zIndex: 999,\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    padding: 12,\n                    margin: \"15px 0px\",\n                    borderRadius: 15,\n                    backgroundColor: Colors.secondary,\n                  }}\n                  onClick={() => {\n                    if (value) {\n                      IStore.setSetModal({\n                        visible: true,\n                        title,\n                        value: value?.id ?? value,\n                        type,\n                        numberParams,\n                        options: options ? Object.values(options) : null,\n                        onChange: async (id) => {\n                          await ble.sendDataToDevice(key, setHex(id));\n                          return true;\n                        },\n                      });\n                    }\n                  }}\n                >\n                  <div\n                    style={{\n                      fontSize: 18,\n                      fontWeight: \"bold\",\n                      color: Colors.text,\n                    }}\n                  >\n                    {string[title]}\n                  </div>\n                  <div className=\"flex row center\">\n                    {value ? (\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flex: 2,\n                          textAlign: \"left\",\n                          color: Colors.text,\n                          padding: 10,\n                          fontSize: 16,\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {value?.value\n                          ? string[value?.value] ?? value?.value\n                          : (numberParams?.fixed\n                              ? value / Math.pow(10, numberParams?.fixed)\n                              : value) +\n                            \"\" +\n                            (numberParams?.unit\n                              ? \" \" + numberParams?.unit\n                              : \"\")}\n                      </div>\n                    ) : (\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flex: 2,\n                          textAlign: \"left\",\n                          padding: 10,\n                        }}\n                      >\n                        <Spin />\n                      </div>\n                    )}\n                    <RightOutlined\n                      style={{ fontSize: 20, color: Colors.text }}\n                    />\n                  </div>\n                </div>\n              );\n            }\n          )}\n          <div style={{ height: 100 }} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(Setting);\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/measure.js",["206"],"import React, { useEffect } from \"react\";\nimport Colors from \"../constants/Colors\";\nimport { string } from \"../locales\";\nimport Header, { HelpText, MoreInfoButton } from \"../componenets/Header\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Measure = () => {\n  const history = useHistory();\n\n  useEffect(() => {}, []);\n\n  return (\n    <div className=\"center contain column\" style={{ paddingBottom: 100 }}>\n      <div className=\"center\" style={{ width: \"100%\" }}>\n        <Header left={() => <HelpText />} right={() => <MoreInfoButton />} />\n      </div>\n      <div\n        className=\"center\"\n        style={{\n          flex: 1,\n          fontSize: 25,\n          fontWeight: \"bold\",\n          color: Colors.text,\n        }}\n      >\n        LOGO\n      </div>\n      <div\n        className=\"center background-img\"\n        style={{\n          flex: 6,\n          width: \"100%\",\n          backgroundImage: `url(${\n            require(\"../assets/images/measure/bg.png\").default\n          })`,\n        }}\n      >\n        <img\n          onClick={() => {\n            history.push(\"compass\");\n          }}\n          src={require(\"../assets/images/measure/button.png\").default}\n          className=\"btn\"\n          width={250}\n          height={250}\n        />\n      </div>\n      <div\n        className=\"flex column center\"\n        style={{\n          flex: 1,\n          fontSize: 17,\n          fontWeight: \"bold\",\n          color: Colors.text,\n        }}\n      >\n        {string.olcumyap}\n        <div style={{ fontSize: 14, fontWeight: \"normal\" }}>\n          {string.olcumyapdesc}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Measure;\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/pages/device.js",["207","208"],"import React, { useEffect, useState } from \"react\";\nimport Colors from \"../constants/Colors\";\nimport { string } from \"../locales\";\nimport Header, { HelpText, MoreInfoButton } from \"../componenets/Header\";\nimport { IStore } from \"../stores/InstantStore\";\nimport { Params } from \"../constants/Params\";\nimport { Spin } from \"antd\";\nimport { ReloadOutlined } from \"@ant-design/icons\";\nimport { observer } from \"mobx-react-lite\";\nimport BLEService from \"../services/BLEService\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Device = () => {\n  const history = useHistory();\n  const ble = IStore.ble;\n  const params = Params();\n  const usage_params = {\n    serial_no: params.serial_no,\n    device_version: params.device_version,\n    temperature: params.temperature,\n    pressure: params.pressure,\n    shot_counter: params.shot_counter,\n    statuses: params.statuses,\n  };\n\n  const [data, setData] = useState(ble.getData());\n  const [device, setDevice] = useState(\"loading\");\n\n  useEffect(() => {\n    BLEService.event.on(\"monitor\", _setData);\n    controlDevice();\n\n    return () => {\n      BLEService.event.removeListener(\"monitor\", _setData);\n    };\n  }, []);\n\n  function _setData({ all_data }) {\n    setData({ ...all_data });\n  }\n\n  function reload() {\n    setData({\n      ...data,\n      ...{\n        serial_no: \"\",\n        device_version: \"\",\n        temperature: \"\",\n        pressure: \"\",\n        shot_counter: \"\",\n        statuses: {\n          odometer_activity: {\n            title: \"lazermesafeolceraktifligi\",\n            value: null,\n          },\n          compass_activity: {\n            title: \"pusulaaktifligi\",\n            value: null,\n          },\n          bluetooth_activity: {\n            title: \"bluetoothaktifligi\",\n            value: null,\n          },\n          odometer_error: {\n            title: \"lazermesafeolcerhatabilgisi\",\n            value: null,\n          },\n          compass_error: {\n            title: \"pusulahatabilgisi\",\n            value: null,\n          },\n          bluetooth_error: {\n            title: \"bluetoothhatabilgisi\",\n            value: null,\n          },\n          battery_error: {\n            title: \"bataryahatabilgisi\",\n            value: null,\n          },\n        },\n      },\n    });\n\n    controlDevice();\n  }\n\n  async function controlDevice() {\n    const device = ble.getDevice();\n    setDevice(device);\n\n    if (device) {\n      getValues();\n    }\n  }\n\n  function getValues() {\n    for (let [key, param] of Object.entries(usage_params)) {\n      if (param.getHex) ble.sendDataToDevice(key, param.getHex).then(() => {});\n    }\n  }\n\n  if (!device) {\n    return (\n      <div className=\"column contain center\">\n        <div style={{ fontSize: 20, color: Colors.text, fontWeight: \"bold\" }}>\n          {string[\"101\"]}\n        </div>\n        <div\n          className=\"btn\"\n          onClick={() => {\n            history.push(\"select-device\");\n          }}\n          style={{\n            margin: 10,\n            padding: \"10px 15px\",\n            backgroundColor: Colors.primary,\n            borderRadius: 10,\n            fontSize: 16,\n            color: Colors.text,\n            fontWeight: \"bold\",\n          }}\n        >\n          {string.simdibaglan}\n        </div>\n      </div>\n    );\n  }\n\n  if (device == \"loading\") {\n    return null;\n  }\n\n  return (\n    <div className=\"center contain column\">\n      <div className=\"center\" style={{ width: \"100%\" }}>\n        <Header left={() => <HelpText />} right={() => <MoreInfoButton />} />\n      </div>\n      <div\n        className=\"flex row\"\n        style={{\n          width: \"50%\",\n          flexDirection: \"space-between\",\n          alignItems: \"center\",\n          fontSize: 25,\n          fontWeight: \"bold\",\n          color: Colors.primary,\n        }}\n      >\n        <div className=\"flex-1\"></div>\n        <div className=\"flex-3 center\" style={{ textAlign: \"center\" }}>\n          {string.cihazdurumbilgisi}\n        </div>\n        <div className=\"flex-1\" style={{ justifyContent: \"flex-end\" }}>\n          <div className=\"btn\" style={{ padding: 20 }} onClick={reload}>\n            <ReloadOutlined style={{ fontSize: 20, color: Colors.text }} />\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"flex column scroll\"\n        style={{ width: \"100%\", height: \"100vh\" }}\n      >\n        <div\n          style={{\n            alignSelf: \"center\",\n            padding: 20,\n            margin: 20,\n            borderRadius: 10,\n            backgroundColor: Colors.secondary,\n            width: \"50%\",\n          }}\n        >\n          {Object.entries(usage_params).map(([key, { title }]) => {\n            const value = data[key];\n\n            return (\n              <div\n                key={key}\n                style={{\n                  margin: 5,\n                  marginBottom: 20,\n                  padding: 5,\n                  borderStyle: \"dashed\",\n                  borderWidth: 1,\n                  borderRadius: 1,\n                  borderColor: \"#667587\",\n                }}\n              >\n                <div\n                  style={{\n                    color: Colors.text,\n                    padding: 10,\n                    fontSize: 16,\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {string[title]}\n                </div>\n                <hr style={{ borderColor: \"#4c5f72\" }} />\n                <div>\n                  {value ? (\n                    typeof value == \"string\" ? (\n                      <div\n                        style={{\n                          height: 50,\n                          color: Colors.text,\n                          padding: 10,\n                          fontSize: 16,\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {value}\n                      </div>\n                    ) : (\n                      Object.values(value).map(({ title, value }, index) => (\n                        <div\n                          key={index}\n                          className=\"flex row\"\n                          style={{\n                            justifyContent: \"space-between\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              flex: 2,\n                              textAlign: \"left\",\n                              color: Colors.text,\n                              padding: 10,\n                              fontSize: 16,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {string[title]}\n                          </div>\n                          <div\n                            style={{\n                              height: 40,\n                              display: \"flex\",\n                              flex: 1,\n                              textAlign: \"left\",\n                              color: Colors.text,\n                              padding: 10,\n                              fontSize: 14,\n                              fontWeight: \"bold\",\n                            }}\n                          >\n                            {value ? string[value] ?? value : <Spin />}\n                          </div>\n                        </div>\n                      ))\n                    )\n                  ) : (\n                    <div\n                      style={{\n                        padding: 10,\n                        height: 50,\n                        display: \"flex\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      <Spin />\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n          <div style={{ height: 100 }} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default observer(Device);\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/componenets/Header.js",["209","210","211"],"import React, { useEffect } from \"react\";\nimport Colors from \"../constants/Colors\";\nimport { string } from \"../locales\";\nimport { LeftOutlined } from \"@ant-design/icons\";\nimport { useHistory } from \"react-router-dom\";\n\nexport function HelpText() {\n  return (\n    <div\n        className=\"btn\"\n      onClick={() => {\n        alert(\"yardım\");\n      }}\n      style={{\n        cursor: \"pointer\",\n        padding: 20,\n        textDecorationLine: \"underline\",\n        fontWeigh: \"bold\",\n        fontSize: 14,\n      }}\n    >\n      {string.yardimaihtiyacinvarmi}\n    </div>\n  );\n}\n\nexport function MoreInfoButton({ close = false }) {\n  const history = useHistory();\n\n  if (close) {\n    return (\n      <div>\n        <img\n          style={{ marginTop: 15, width: 70, height: 75 }}\n          src={require(\"../assets/images/secili-dahafazla.png\").default}\n        />\n      </div>\n    );\n  }\n  return (\n    <div\n      onClick={() => {\n        history.push(\"more-info\");\n      }}\n      className=\"btn\"\n    >\n      <img\n        style={{ width: 50, height: 50 }}\n        src={require(\"../assets/images/dahafazla.png\").default}\n      />\n    </div>\n  );\n}\n\nfunction Header({\n  onBack,\n  left = () => <div />,\n  title = \"\",\n  right = () => <div />,\n}) {\n  return (\n    <div\n      className=\"flex row\"\n      style={{\n        flexDirection: \"space-between\",\n        alignItems: \"center\",\n        color: Colors.text,\n        width: \"100%\",\n        height: 60,\n        backgroundColor: Colors.darkGray,\n      }}\n    >\n      <div className=\"flex-1 left\">\n        {onBack ? (\n          <div className=\"btn\" onClick={onBack} style={{ padding: 20}}>\n            <LeftOutlined style={{ fontSize: 25, color: Colors.text }} />\n          </div>\n        ) : null}\n        {left()}\n      </div>\n      <div\n        className=\"flex-1 center\"\n        style={{ fontSize: 18, fontWeight: \"bold\" }}\n      >\n        {title}\n      </div>\n      <div className=\"flex-1 right\">{right()}</div>\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/stores/InstantStore.ts",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/stores/MainStore.ts",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/constants/Colors.ts",["212"],"export default {\n  darkPrimary: \"#002067\",\n  primary: \"#024089\",\n  secondary: \"#182b3f\",\n  white: \"white\",\n  black: \"black\",\n  gray: \"#8d8b8b\",\n  lightGray: \"#f5f5f5\",\n  darkGray: \"#1e2227\",\n  lightBlack: \"#0f1013\",\n  text:\"#a4a5a2\",\n  red:\"#B71C1C\",\n  green:\"#2E7D32\",\n  transparent: \"transparent\",\n};\n\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/constants/Config.ts",["213","214"],"import {string} from \"../locales\";\nconst shell = require('electron').shell;\n\nexport const contacts={\n  Phone:{\n    title:\"telefon\",\n    value:\"+0850 360 10 30\",\n    onPress:(phone:any)=>{\n      shell.openExternal(`tel:${phone}`)\n    }\n  },\n  Email:{\n    title:\"email\",\n    value:\"aselsan@hs02.kep.tr\",\n    onPress:(email:any)=>{\n      shell.openExternal(`mailto:${email}`)\n    }\n  },\n  WebSite:{\n    title:\"website\",\n    value:\"www.aselsan.com.tr\",\n    onPress:(web:any)=>{\n      shell.openExternal(`https://${web}`)\n    }\n  },\n  Address:{\n    title:\"adres\",\n    value:\"P.K.1, 06200, Yenimahalle | Ankara, Türkiye\",\n    onPress:(address:any)=>{\n      shell.openExternal(`http://maps.google.com/?q=1200 ${address}`)\n    }\n  }\n}\n\nexport const sss = string.dil==\"tr\"?{\n  Application:[\n    {\n      title:\"Uygulama Soru 1\",\n      content:\"Cevap 1\"\n    },\n    {\n      title:\"Uygulama Soru 2\",\n      content:\"Cevap 2\"\n    },\n    {\n      title:\"Uygulama Soru 3\",\n      content:\"Cevap 3\"\n    }\n  ],\n  DEVICE:[\n    {\n      title:\"Cihaz Soru 1\",\n      content:\"Cevap 1\"\n    },\n    {\n      title:\"Cihaz Soru 2\",\n      content:\"Cevap 2\"\n    },\n    {\n      title:\"Cihaz Soru 3\",\n      content:\"Cevap 3\"\n    }\n  ]\n}:{\n  Application:[\n    {\n      title:\"Application Ask 1\",\n      content:\"Answer 1\"\n    },\n    {\n      title:\"Application Ask 2\",\n      content:\"Answer 2\"\n    },\n    {\n      title:\"Application Ask 3\",\n      content:\"Answer 3\"\n    }\n  ],\n  DEVICE:[\n    {\n      title:\"Device Ask 1\",\n      content:\"Answer 1\"\n    },\n    {\n      title:\"Device Ask 2\",\n      content:\"Answer 2\"\n    },\n    {\n      title:\"Device Ask 3\",\n      content:\"Answer 3\"\n    }\n  ]\n}\n\nexport const HomeScreenTypes = {\n  MesafeVePusula: {\n    id: 0,\n    value: \"mesafevepusula\",\n  },\n  Pusula: {\n    id: 1,\n    value: \"pusula\",\n  },\n  Mesafe: {\n    id: 2,\n    value: \"mesafe\",\n  }\n};\n\nexport const DistanceUnitTypes = {\n  Metre: {\n    id: 0,\n    value: \"metre\",\n    symbol:\"m\",\n    toFeet:((f:number)=>parseFloat((f * 3.281).toString())),\n  },\n  Feet: {\n    id: 1,\n    value: \"feet\",\n    symbol:\"ft\",\n    toMeter:((f:number)=>parseFloat((f / 3.281).toString()))\n  }\n};\n\nexport const AngleUnitTypes = {\n  Derece: {\n    id: 0,\n    value: \"derece\",\n    symbol:\"°\",\n  },\n  Milyem6000: {\n    id: 1,\n    value: \"6000 Milyem\",\n    symbol:\"m/\",\n    toDegree:((m:number)=>m*(360/6000))\n  },\n  Milyem6300: {\n    id: 2,\n    value: \"6300 Milyem\",\n    symbol:\"m/\",\n    toDegree:((m:number)=>m*(360/6300))\n\n  },\n  Milyem6400: {\n    id: 3,\n    value: \"6400 Milyem\",\n    symbol:\"m/\",\n    toDegree:((m:number)=>m*(360/6400))\n  }\n\n};\n\nexport const OdometerActivityTypes = {\n  Kapali: {\n    id: \"0\",\n    value: \"kapali\",\n  },\n  Acik: {\n    id: \"1\",\n    value: \"acik\",\n  }\n};\n\nexport const CompassActivityTypes = {\n  Kapali: {\n    id: \"0\",\n    value: \"kapali\",\n  },\n  Acik: {\n    id: \"1\",\n    value: \"acik\",\n  }\n};\n\nexport const BluetoothActivityTypes = {\n  Kapali: {\n    id: \"0\",\n    value: \"kapali\",\n  },\n  Acik: {\n    id: \"1\",\n    value: \"acik\",\n  }\n};\n\nexport const OdometerErrorTypes = {\n  BilgiYok: {\n    id: \"00\",\n    value: \"bilgiyok\",\n  },\n  NA: {\n    id: \"01\",\n    value: \"N/A\",\n  },\n  HataYok: {\n    id: \"10\",\n    value: \"hatayok\",\n  },\n  HataVar: {\n    id: \"11\",\n    value: \"hatavar\",\n  }\n};\n\nexport const CompassErrorTypes = {\n  BilgiYok: {\n    id: \"00\",\n    value: \"bilgiyok\",\n  },\n  NA: {\n    id: \"01\",\n    value: \"N/A\",\n  },\n  HataYok: {\n    id: \"10\",\n    value: \"hatayok\",\n  },\n  HataVar: {\n    id: \"11\",\n    value: \"hatavar\",\n  },\n};\n\nexport const BluetoothErrorTypes = {\n  BilgiYok: {\n    id: \"00\",\n    value: \"bilgiyok\",\n  },\n  NA: {\n    id: \"01\",\n    value: \"N/A\",\n  },\n  HataVar: {\n    id: \"10\",\n    value: \"hatavar\",\n  },\n  HataYok: {\n    id: \"11\",\n    value: \"hatayok\",\n  }\n};\n\nexport const BatteryErrorTypes = {\n  BilgiYok: {\n    id: \"00\",\n    value: \"bilgiyok\",\n  },\n  NA: {\n    id: \"01\",\n    value: \"N/A\",\n  },\n  PilGucuIyi: {\n    id: \"10\",\n    value: \"pilgucuiyi\",\n  },\n  PilGucuZayif: {\n    id: \"11\",\n    value: \"pilgucuzayif\",\n  }\n};\n\nexport const ArticleMode = {\n  Kapali: {\n    id: 0,\n    value: \"kapali\",\n  },\n  Acik: {\n    id: 1,\n    value: \"acik\",\n  },\n  Otomatik: {\n    id: 2,\n    value: \"otomatik\",\n  }\n};\n\n\nexport const Language = {\n  Turkce: {\n    id: 0,\n    value: \"turkce\",\n  },\n  Ingilizce: {\n    id: 1,\n    value: \"ingilizce\",\n  }\n};\n\n\nexport const NightVisionMode = {\n  Kapali: {\n    id: 0,\n    value: \"kapali\",\n  },\n  Acik: {\n    id: 1,\n    value: \"acik\",\n  }\n};\n\n\nexport const DeviceSleepTime = {\n  t0: {\n    id: 0,\n    value: \"sonsuz\",\n  },\n  t20: {\n    id: 1,\n    value: \"20 \"+string.saniye,\n  },\n  t30: {\n    id: 2,\n    value: \"30 \"+string.saniye,\n  },\n  t60: {\n    id: 3,\n    value: \"1 \"+string.dakika,\n  },\n  t120: {\n    id: 4,\n    value: \"2 \"+string.dakika,\n  },\n  t300: {\n    id: 5,\n    value: \"5 \"+string.dakika,\n  },\n  t600: {\n    id: 6,\n    value: \"10 \"+string.dakika,\n  }\n};\n\n\nexport const BluetoothSleepTime = {\n  t0: {\n    id: 0,\n    value: \"sonsuz\",\n  },\n  t20: {\n    id: 1,\n    value: \"20 \"+string.saniye,\n  },\n  t30: {\n    id: 2,\n    value: \"30 \"+string.saniye,\n  },\n  t60: {\n    id: 3,\n    value: \"1 \"+string.dakika,\n  },\n  t120: {\n    id: 4,\n    value: \"2 \"+string.dakika,\n  },\n  t300: {\n    id: 5,\n    value: \"5 \"+string.dakika,\n  },\n  t600: {\n    id: 6,\n    value: \"10 \"+string.dakika,\n  }\n};\n\nexport function findType(data: any, id: any, key = \"value\") {\n  let res: any = \" \";\n  try {\n    res = Object.values(data).find((e: any) => e.id == id);\n    if (key) res = res[key];\n  } catch (e) {}\n  return res;\n}\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/constants/Params.ts",["215"],"import {\n  AngleUnitTypes,\n  ArticleMode,\n  BluetoothSleepTime,\n  DeviceSleepTime, DistanceUnitTypes,\n  Language,\n  NightVisionMode\n} from \"./Config\";\nimport {string} from \"../locales\";\nimport {setModalTypes} from \"../componenets/SetModal\";\n\ndeclare global {\n  interface Array<T> {\n    checksum(data:any): Array<T>;\n  }\n}\n\n\nexport const PROCESS_KEYS={\n  DurumBilgisi:0x10,\n  Versiyon:0x11,\n  Mesafe:0x12,\n  CIT:0x13,\n  AltKapiLimitiYaz:0x14,\n  AltKapiLimiti:0x15,\n  UstKapiLimitiYaz:0x16,\n  UstKapiLimiti:0x17,\n  ArtikilYaz:0x18,\n  Artikil:0x19,\n  DilYaz:0x1A,\n  Dil:0x1B,\n  Pusula:0x1C,\n  MesafeVePusula:0x1D,\n  Sicaklik:0x1E,\n  AciOlcuBirimiYaz:0x1F,\n  AciOlcuBirimi:0x20,\n  MesafeOlcuBirimiYaz:0x21,\n  MesafeOlcuBirimi:0x22,\n  GeceGorusYaz:0x23,\n  GeceGorus:0x24,\n  CihazKapanmaSuresiYaz:0x25,\n  CihazKapanmaSuresi:0x26,\n  BluetoothKapanmaSuresiYaz:0x29,\n  BluetoothKapanmaSuresi:0x2A,\n  ManyetikSapmaAcisiYaz:0x2B,\n  ManyetikSapmaAcisi:0x2C,\n  SeriNo:0x51,\n  Sayac:0x53,\n  Basinc:0x68,\n}\n\nArray.prototype.checksum = function(data:number){\n  return checkSum([...this,...intToBytes(data)])\n}\n\n\nfunction intToBytes(x:number) {\n  return [(x<<16),(x<<24)].map(z=> z>>>24)\n}\n\nfunction checkSum(bytes:any) {\n  let checksum = 0x00\n  for(let i = 0; i < bytes.length - 1; i++)\n    checksum += bytes[i]\n\n  checksum = ((checksum ^ 0xFF) + 1);\n  return [...bytes,checksum]\n}\n\nexport const Params = ()=>{\n  return {\n    statuses:{\n      title:\"cihazdurumbilgisi\",\n      getHex:[0xA5,PROCESS_KEYS.DurumBilgisi].checksum(0)\n    },\n    device_version:{\n      title:\"cihazversiyonu\",\n      getHex:[0xA5,PROCESS_KEYS.Versiyon].checksum(0)\n    },\n    bottom_door_lock:{\n      title:\"altkapikilidi\",\n      type:setModalTypes.Number,\n      numberParams:{fixed:0,min:0,max:15000,unit:string.metre2},\n      setHex:((number:number)=>[0xA5,PROCESS_KEYS.AltKapiLimitiYaz].checksum(number)),\n      getHex:[0xA5,PROCESS_KEYS.AltKapiLimiti].checksum(0)\n    },\n    top_door_lock:{\n      title:\"ustkapikilidi\",\n      type:setModalTypes.Number,\n      numberParams:{fixed:0,min:0,max:5000,unit:string.metre2},\n      setHex:((number:number)=>[0xA5,PROCESS_KEYS.UstKapiLimitiYaz].checksum(number)),\n      getHex:[0xA5,PROCESS_KEYS.UstKapiLimiti].checksum(0)\n    },\n    article_mode:{\n      title:\"artikilmodu\",\n      options:ArticleMode,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.ArtikilYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.Artikil].checksum(0)\n    },\n    language:{\n      title:\"dilsecimi\",\n      options:Language,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.DilYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.Dil].checksum(0)\n    },\n    distance_and_compass:{\n      title:\"mesafevepusula\",\n      getHex:[0xA5,PROCESS_KEYS.MesafeVePusula].checksum(0)\n    },\n    temperature:{\n      title:\"sicaklik\",\n      getHex:[0xA5,PROCESS_KEYS.Sicaklik].checksum(0)\n    },\n    angle_unit_type:{\n      title:\"aciolcubirimi\",\n      options:AngleUnitTypes,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.AciOlcuBirimiYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.AciOlcuBirimi].checksum(0)\n    },\n    distance_unit:{\n      title:\"mesafeolcubirimi\",\n      options:DistanceUnitTypes,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.MesafeOlcuBirimiYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.MesafeOlcuBirimi].checksum(0)\n    },\n    night_vision_mode:{\n      title:\"gecegorusmodu\",\n      options:NightVisionMode,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.GeceGorusYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.GeceGorus].checksum(0)\n    },\n    device_sleep_time:{\n      title:\"cihazkapanmasuresi\",\n      options:DeviceSleepTime,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.CihazKapanmaSuresiYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.CihazKapanmaSuresi].checksum(0)\n    },\n    bluetooth_sleep_time:{\n      title:\"bluetoothzamanasimisuresi\",\n      options:BluetoothSleepTime,\n      type:setModalTypes.Select,\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.BluetoothKapanmaSuresiYaz].checksum(id)),\n      getHex:[0xA5,PROCESS_KEYS.BluetoothKapanmaSuresi].checksum(0)\n    },\n    magnetic_declination_angle:{\n      title:\"manyetiksapmaacisi\",\n      type:setModalTypes.Number,\n      numberParams:{fixed:1, min:-3599,max:3599,unit:string.derece},\n      setHex:((number:number)=>[0xA5,PROCESS_KEYS.ManyetikSapmaAcisiYaz].checksum(number)),\n      getHex:[0xA5,PROCESS_KEYS.ManyetikSapmaAcisi].checksum(0)\n    },\n    serial_no:{\n      title:\"serino\",\n      getHex:[0xA6,PROCESS_KEYS.SeriNo].checksum(0)\n    },\n    shot_counter:{\n      title:\"atissayaci\",\n      getHex:[0xA6,PROCESS_KEYS.Sayac].checksum(0)\n    },\n    pressure:{\n      title:\"basinc\",\n      getHex:[0xA6,PROCESS_KEYS.Basinc].checksum(0)\n    },\n\n  }\n}","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/services/BLEService.ts",["216","217","218","219"],"import {\n  AngleUnitTypes,\n  DistanceUnitTypes\n} from \"../constants/Config\";\nimport {error} from \"../functions/toast\";\nimport {findData} from \"../functions/findData\";\nimport DeviceEventEmitter from \"events\";\nimport {HexToBase64} from \"../functions/Buffer\";\nimport {IStore} from \"../stores/InstantStore\";\nimport {l_moment} from \"../functions/cMoment\";\n\n\n\nlet exampleRes:any = {\n  serial_no:\"tlEJEQU=\",\n  device_version:\"tREEESU=\",\n  temperature:\"tR4EBT0=\",\n  pressure:\"tmgEBAUFPQ==\",\n  shot_counter:\"tlMAAAIBPQ==\",\n  statuses:\"tRCjtAQ=\",\n  distance_unit:\"tSIAALM=\",\n  article_mode:\"tRgAAbM=\",\n  distance_and_compass:\"tR0AAIf/AKwQAEQzAAEEABUAGQ==\",\n  language:\"tRsAALM=\",\n  angle_unit_type:\"tSAAA7M=\",\n  night_vision_mode:\"tSQAAbM=\",\n  device_sleep_time:\"tSYABbM=\",\n  bluetooth_sleep_time:\"tSoABrM=\",\n  bottom_door_lock:\"tRUD6LM=\",\n  top_door_lock:\"tRcA6LM=\",\n  magnetic_declination_angle:\"tSwK87M=\"\n}\n\nclass BLEService {\n  private device: any=null;\n  public characteristic: any=null;\n  private static _this: BLEService;\n  private static event: DeviceEventEmitter = new DeviceEventEmitter()\n\n  private data = {\n    serial_no:\"\",\n    device_version:\"\",\n    temperature:\"\",\n    pressure:\"\",\n    shot_counter:\"\",\n    statuses:{\n      odometer_activity:{\n        title:\"lazermesafeolceraktifligi\",\n        value:null\n      },\n      compass_activity:{\n        title:\"pusulaaktifligi\",\n        value:null\n      },\n      bluetooth_activity:{\n        title:\"bluetoothaktifligi\",\n        value:null\n      },\n      odometer_error:{\n        title:\"lazermesafeolcerhatabilgisi\",\n        value:null\n      },\n      compass_error:{\n        title:\"pusulahatabilgisi\",\n        value:null\n      },\n      bluetooth_error:{\n        title:\"bluetoothhatabilgisi\",\n        value:null\n      },\n      battery_error:{\n        title:\"bataryahatabilgisi\",\n        value:null\n      }\n    },\n    distance_unit:\"\",\n    article_mode:\"\",\n    distance_and_compass:{\n      distance:0,\n      distance_unit:DistanceUnitTypes.Metre.id,\n      angle_unit:AngleUnitTypes.Derece.id,\n      azimuth:0,\n      elevation:0,\n      roll:0\n    },\n    language:\"\",\n    angle_unit_type:\"\",\n    night_vision_mode:\"\",\n    device_sleep_time:null,\n    bluetooth_sleep_time:null,\n    bottom_door_lock:0,\n    top_door_lock:0,\n    magnetic_declination_angle:0\n  }\n\n\n  constructor() {\n    BLEService._this = this\n  }\n\n  public setData(new_data:any){\n    BLEService._this.data = {...BLEService._this.data,...new_data}\n  }\n  public getData(){\n    return BLEService._this.data\n  }\n\n  public setDevice(device:any){\n    BLEService._this.device = device\n  }\n\n  public getDevice(){\n    return BLEService._this.device\n  }\n\n  public async sendDataToDevice(_key:string,data:any){\n\n\n    IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"sending...\",})\n\n    let device = BLEService._this.getDevice();\n    if(!device){\n      throw \"no_connect1\"\n    }\n\n    return new Promise((resolve, reject) => {\n      IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"success\",})\n\n      setTimeout(()=>{\n        IStore.setLogger({type:\"receive\", key:\"\", data:exampleRes[_key], date:l_moment(), res:\"data received\",})\n        const {key,value:res}:any = findData(exampleRes[_key])\n        IStore.setLogger({type:\"receive\", key, data:res, date:l_moment(), res:\"success\",})\n        BLEService._this.setData({[key]:res})\n\n        // @ts-ignore\n        BLEService.event.emit(\"monitor\",{\n          key,\n          value:res,\n          all_data:BLEService._this.getData()\n        })\n\n        // @ts-ignore\n        BLEService.event.emit(key,res)\n\n        resolve(true)\n\n      },Math.floor((Math.random()*1000)+2000))\n    })\n\n    return new Promise((resolve, reject) => {\n\n      device.getPrimaryService('2456e1b9-26e2-8f83-e744-f34f01e9d701')\n          .then((service:any) => {\n            return service.getCharacteristic('battery_level');\n          })\n          .then((characteristic:any) => {\n            return characteristic.writeValue(HexToBase64(data));\n          })\n          .then(() => {\n            IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"success\",})\n            resolve(true)\n          })\n          .catch((e:any)=>{\n            IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"error \"+JSON.stringify(e),})\n\n            reject(e)\n            error()\n          })\n    })\n  }\n\n\n  public startListener(){\n\n    const device = BLEService._this.getDevice()\n\n    if(!device || device==\"test\")\n      throw \"no_connect1\"\n\n\n    device.addEventListener('gattserverdisconnected', ()=>{\n      BLEService._this.setDevice(null)\n    });\n\n\n    IStore.setLogger({type:\"receive\", key:\"\", data:\"\", date:l_moment(), res:\"listener started\",})\n\n\n    device.getPrimaryService('2456e1b9-26e2-8f83-e744-f34f01e9d701')\n        .then((service:any) => {\n          return service.getCharacteristic('battery_level');\n        })\n        .then((_characteristic:any) => {\n          BLEService._this.characteristic = _characteristic\n          BLEService._this.characteristic.addEventListener('characteristicvaluechanged',BLEService._this.onChangeListener);\n        })\n        .catch((e:any)=>{\n          console.warn(e)\n          error(\"Bağlantı Hatası\")\n        })\n\n  }\n\n  public onChangeListener(event:any){\n    let value = event.target.value;\n\n    IStore.setLogger({type:\"receive\", key:\"\", data:value, date:l_moment(), res:\"data received\",})\n\n    if(value){\n\n      const {key,value:res}:any = findData(value)\n\n      IStore.setLogger({type:\"receive\", key, data:JSON.stringify(res), date:l_moment(), res:\"success\",})\n\n      BLEService._this.setData({[key]:res})\n\n      // @ts-ignore\n      BLEService.event.emit(\"monitor\",{\n        key,\n        value:res,\n        all_data:BLEService._this.getData()\n      })\n\n      // @ts-ignore\n      BLEService.event.emit(key,res)\n    }\n  }\n\n  public stopListener(){\n    try {\n      BLEService._this.characteristic.removeEventListener('characteristicvaluechanged',BLEService._this.onChangeListener);\n      BLEService._this.characteristic = null\n\n    }catch{}\n  }\n\n\n\n\n\n}\n\nexport default BLEService;\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/Conversions.tsx",["220","221","222","223","224","225"],"import {AngleUnitTypes, DistanceUnitTypes, findType} from \"../constants/Config\";\n\n\nexport function distanceConversion(distance:number,unit1:any,unit2:any){\n    let unit\n    try {\n        unit1 = findType(DistanceUnitTypes,unit1,\"\")\n        unit2 = findType(DistanceUnitTypes,unit2,\"\")\n        unit = unit2.symbol\n\n        if(unit1.id == DistanceUnitTypes.Metre.id && unit2.id == DistanceUnitTypes.Feet.id){\n            distance = unit1.toFeet(distance)\n        }else if(unit1.id == DistanceUnitTypes.Feet.id && unit2.id == DistanceUnitTypes.Metre.id){\n            distance = unit1.toMeter(distance)\n        }\n    }catch (e) {\n        return {distance: 0,unit:\"\"}\n    }\n\n\n    return {distance,unit}\n}\n\n\nexport function angleConversion(angle:number,unit1:any,unit2:any){\n\n    let unit\n    try {\n        unit1 = findType(AngleUnitTypes,unit1,\"\")\n        unit2 = findType(AngleUnitTypes,unit2,\"\")\n        unit = unit2.symbol\n\n        if(unit1.id != AngleUnitTypes.Derece.id && unit2.id == AngleUnitTypes.Derece.id){\n            angle = unit1.toDegree(angle)\n        }\n\n    }catch (e) {\n\n        return {angle: 0,unit:\"\"}\n    }\n\n\n    return {angle,unit}\n}","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/toast.tsx",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/findLocation.tsx",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/locales/index.tsx",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/cMoment.tsx",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/findData.tsx",["226","227","228"],"import {PROCESS_KEYS} from \"../constants/Params\";\nimport {Base64ToHex} from \"./Buffer\";\nimport {\n  AngleUnitTypes,\n  ArticleMode,\n  BatteryErrorTypes,\n  BluetoothActivityTypes, BluetoothErrorTypes, BluetoothSleepTime,\n  CompassActivityTypes, CompassErrorTypes, DeviceSleepTime, DistanceUnitTypes,\n  findType, Language, NightVisionMode,\n  OdometerActivityTypes,\n  OdometerErrorTypes\n} from \"../constants/Config\";\n\n\nexport function findData(value:any) {\n  try {\n    value = Base64ToHex(value)\n    const command = value[1]\n\n\n    switch (command) {\n      case PROCESS_KEYS.SeriNo:\n        return {key:\"serial_no\",value:findSerial(value)}\n      case PROCESS_KEYS.Versiyon:\n        return {key:\"device_version\",value:findVersion(value)}\n      case PROCESS_KEYS.Sicaklik:\n        return {key:\"temperature\",value:findTemperature(value)}\n      case PROCESS_KEYS.Basinc:\n        return {key:\"pressure\",value:findPressure(value)}\n      case PROCESS_KEYS.Sayac:\n        return {key:\"shot_counter\",value:findShotCounter(value)}\n      case PROCESS_KEYS.DurumBilgisi:\n        return {key:\"statuses\",value:findStatuses(value)}\n      case PROCESS_KEYS.MesafeOlcuBirimi:\n      case PROCESS_KEYS.MesafeOlcuBirimiYaz:\n        return {key:\"distance_unit\",value:findDistanceUnit(value)}\n      case PROCESS_KEYS.Artikil:\n      case PROCESS_KEYS.ArtikilYaz:\n        return {key:\"article_mode\",value:findArticleMode(value)}\n      case PROCESS_KEYS.Dil:\n      case PROCESS_KEYS.DilYaz:\n        return {key:\"language\",value:findLanguage(value)}\n      case PROCESS_KEYS.AciOlcuBirimi:\n      case PROCESS_KEYS.AciOlcuBirimiYaz:\n        return {key:\"angle_unit_type\",value:findAngleUnit(value)}\n      case PROCESS_KEYS.GeceGorus:\n      case PROCESS_KEYS.GeceGorusYaz:\n        return {key:\"night_vision_mode\",value:findNightVisionMode(value)}\n      case PROCESS_KEYS.CihazKapanmaSuresi:\n      case PROCESS_KEYS.CihazKapanmaSuresiYaz:\n        return {key:\"device_sleep_time\",value:findDeviceSleep(value)}\n      case PROCESS_KEYS.BluetoothKapanmaSuresi:\n      case PROCESS_KEYS.BluetoothKapanmaSuresiYaz:\n        return {key:\"bluetooth_sleep_time\",value:findBluetoothSleep(value)}\n      case PROCESS_KEYS.AltKapiLimiti:\n      case PROCESS_KEYS.AltKapiLimitiYaz:\n        return {key:\"bottom_door_lock\",value:findBottomDoorLock(value)}\n      case PROCESS_KEYS.UstKapiLimiti:\n      case PROCESS_KEYS.UstKapiLimitiYaz:\n        return {key:\"top_door_lock\",value:findTopDoorLock(value)}\n      case PROCESS_KEYS.ManyetikSapmaAcisi:\n      case PROCESS_KEYS.ManyetikSapmaAcisiYaz:\n        return {key:\"magnetic_declination_angle\",value:findMagneticDeclinationAngle(value)}\n      case PROCESS_KEYS.MesafeVePusula:\n        return {key:\"distance_and_compass\",value:findDistanceAndCompass(value)}\n      default:\n        return \"Not Found\"\n\n    }\n  }catch (e) {\n    console.error(e,value)\n    return \"Error Data\"\n  }\n\n}\n\n\nfunction findSerial(value:any) {\n  return ((value[2] << 8) | (value[3])).toString()\n}\n\nfunction findVersion(value:any) {\n  return value[2]+\".\"+value[3]+\"v\"\n}\n\nfunction findTemperature(value:any) {\n  let data =(value[2] << 8) | (value[3])\n  if ((data & 0x8000) > 0) {\n    data = data - 0x10000;\n  }\n  return data/100+\"°\"\n}\n\nfunction findPressure(value:any) {\n  return ((value[2] << 8) | (value[3])).toString()\n}\n\nfunction findShotCounter(value:any) {\n  return ((value[2] << 24) | (value[3] << 16) | (value[4] << 8) | (value[5])).toString()\n}\n\nfunction findStatuses(value:any) {\n\n  let status1_binary = value[2].toString(2)\n  let status2_binary = value[3].toString(2)\n\n  return {\n    odometer_activity:{\n      title:\"lazermesafeolceraktifligi\",\n      value:findType(OdometerActivityTypes,status1_binary[2])\n    },\n    compass_activity:{\n      title:\"pusulaaktifligi\",\n      value:findType(CompassActivityTypes,status1_binary[1])\n    },\n    bluetooth_activity:{\n      title:\"bluetoothaktifligi\",\n      value:findType(BluetoothActivityTypes,status1_binary[0])\n    },\n    odometer_error:{\n      title:\"lazermesafeolcerhatabilgisi\",\n      value:findType(OdometerErrorTypes,status2_binary[6]+\"\"+status2_binary[7])\n    },\n    compass_error:{\n      title:\"pusulahatabilgisi\",\n      value:findType(CompassErrorTypes,status2_binary[4]+\"\"+status2_binary[5])\n    },\n    bluetooth_error:{\n      title:\"bluetoothhatabilgisi\",\n      value:findType(BluetoothErrorTypes,status2_binary[2]+\"\"+status2_binary[3])\n    },\n    battery_error:{\n      title:\"bataryahatabilgisi\",\n      value:findType(BatteryErrorTypes,status2_binary[0]+\"\"+status2_binary[1])\n    },\n  }\n}\n\nfunction findDistanceUnit(value:any) {\n  return findType(DistanceUnitTypes,value[3],\"\")\n}\n\nfunction findArticleMode(value:any) {\n  return findType(ArticleMode,value[3],\"\")\n}\n\nfunction findLanguage(value:any) {\n  return findType(Language,value[3],\"\")\n}\n\nfunction findAngleUnit(value:any) {\n  return findType(AngleUnitTypes,value[3],\"\")\n}\n\nfunction findNightVisionMode(value:any) {\n  return findType(NightVisionMode,value[3],\"\")\n}\n\nfunction findDeviceSleep(value:any) {\n  return findType(DeviceSleepTime,value[3],\"\")\n}\n\nfunction findBluetoothSleep(value:any) {\n  return findType(BluetoothSleepTime,value[3],\"\")\n}\n\nfunction findBottomDoorLock(value:any) {\n  return ((value[2] << 8) | (value[3])).toString()\n}\n\nfunction findTopDoorLock(value:any) {\n  return ((value[2] << 8) | (value[3])).toString()\n}\n\n\nfunction findMagneticDeclinationAngle(value:any) {\n  let data = (value[2] << 8) | (value[3]);\n\n  if ((data & 0x8000) > 0) {\n    data = data - 0x10000;\n  }\n\n  return data.toString()\n}\n\nfunction findDistanceAndCompass(value:any) {\n\n  const distance_unit = findType(DistanceUnitTypes,value[2],\"id\")\n  const distance1 = ((value[3] << 16) | (value[4] << 8)  | value[5])/100;\n  const distance2 = ((value[6] << 16) | (value[7] << 8)  | value[8])/100;\n  const distance3 = ((value[9] << 16) | (value[10] << 8)  | value[11])/100;\n  const distance = [...distance1?[distance1]:[],...distance2?[distance2]:[],...distance3?[distance3]:[]]\n\n  const angle_unit = findType(AngleUnitTypes,value[12],\"id\")\n  let azimuth = (value[13] << 8)  | (value[14]);\n  let elevation = (value[15] << 8)  | (value[16]);\n  let roll = (value[17] << 8)  | (value[18]);\n\n  if ((azimuth & 0x8000) > 0) {\n    azimuth = azimuth - 0x10000;\n  }\n  azimuth = azimuth/(angle_unit==AngleUnitTypes.Derece.id?10:1)\n\n  if ((elevation & 0x8000) > 0) {\n    elevation = elevation - 0x10000;\n  }\n  elevation = elevation/(angle_unit==AngleUnitTypes.Derece.id?10:1)\n\n  if ((roll & 0x8000) > 0) {\n    roll = roll - 0x10000;\n  }\n  roll = roll/(angle_unit==AngleUnitTypes.Derece.id?10:1)\n\n\n\n\n  return {\n    distance,\n    distance_unit,\n    angle_unit,\n    azimuth,\n    elevation,\n    roll\n  }\n}\n\n\n","/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/functions/Buffer.tsx",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/locales/en.tsx",[],"/Users/batuhanoztrk/Documents/GitHub/aselsanlazer/aselsan-lazer-desktop-app/src/locales/tr.tsx",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":22,"column":7,"nodeType":"235","endLine":22,"endColumn":9,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"241","line":1,"column":28,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"242","line":5,"column":10,"nodeType":"239","messageId":"240","endLine":5,"endColumn":16},{"ruleId":"237","severity":1,"message":"243","line":14,"column":10,"nodeType":"239","messageId":"240","endLine":14,"endColumn":21},{"ruleId":"244","severity":1,"message":"245","line":28,"column":15,"nodeType":"246","messageId":"247","endLine":28,"endColumn":17},{"ruleId":"244","severity":1,"message":"245","line":30,"column":18,"nodeType":"246","messageId":"247","endLine":30,"endColumn":20},{"ruleId":"244","severity":1,"message":"245","line":32,"column":18,"nodeType":"246","messageId":"247","endLine":32,"endColumn":20},{"ruleId":"244","severity":1,"message":"245","line":34,"column":18,"nodeType":"246","messageId":"247","endLine":34,"endColumn":20},{"ruleId":"248","severity":1,"message":"249","line":73,"column":15,"nodeType":"250","endLine":80,"endColumn":17},{"ruleId":"244","severity":1,"message":"245","line":76,"column":28,"nodeType":"246","messageId":"247","endLine":76,"endColumn":30},{"ruleId":"248","severity":1,"message":"249","line":88,"column":15,"nodeType":"250","endLine":95,"endColumn":17},{"ruleId":"244","severity":1,"message":"245","line":91,"column":28,"nodeType":"246","messageId":"247","endLine":91,"endColumn":30},{"ruleId":"248","severity":1,"message":"249","line":103,"column":15,"nodeType":"250","endLine":112,"endColumn":17},{"ruleId":"244","severity":1,"message":"245","line":106,"column":28,"nodeType":"246","messageId":"247","endLine":106,"endColumn":30},{"ruleId":"248","severity":1,"message":"249","line":120,"column":15,"nodeType":"250","endLine":127,"endColumn":17},{"ruleId":"244","severity":1,"message":"245","line":123,"column":28,"nodeType":"246","messageId":"247","endLine":123,"endColumn":30},{"ruleId":"237","severity":1,"message":"251","line":7,"column":25,"nodeType":"239","messageId":"240","endLine":7,"endColumn":40},{"ruleId":"237","severity":1,"message":"252","line":17,"column":31,"nodeType":"239","messageId":"240","endLine":17,"endColumn":40},{"ruleId":"233","severity":1,"message":"253","line":57,"column":7,"nodeType":"235","endLine":57,"endColumn":9,"suggestions":"254"},{"ruleId":"244","severity":1,"message":"245","line":106,"column":177,"nodeType":"246","messageId":"247","endLine":106,"endColumn":179},{"ruleId":"244","severity":1,"message":"245","line":106,"column":186,"nodeType":"246","messageId":"247","endLine":106,"endColumn":188},{"ruleId":"244","severity":1,"message":"245","line":106,"column":195,"nodeType":"246","messageId":"247","endLine":106,"endColumn":197},{"ruleId":"248","severity":1,"message":"249","line":129,"column":31,"nodeType":"250","endLine":129,"endColumn":183},{"ruleId":"248","severity":1,"message":"249","line":165,"column":47,"nodeType":"250","endLine":165,"endColumn":142},{"ruleId":"248","severity":1,"message":"249","line":180,"column":31,"nodeType":"250","endLine":180,"endColumn":183},{"ruleId":"248","severity":1,"message":"249","line":213,"column":47,"nodeType":"250","endLine":213,"endColumn":142},{"ruleId":"248","severity":1,"message":"249","line":250,"column":47,"nodeType":"250","endLine":250,"endColumn":142},{"ruleId":"237","severity":1,"message":"255","line":3,"column":9,"nodeType":"239","messageId":"240","endLine":3,"endColumn":12},{"ruleId":"237","severity":1,"message":"238","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"237","severity":1,"message":"256","line":4,"column":18,"nodeType":"239","messageId":"240","endLine":4,"endColumn":26},{"ruleId":"248","severity":1,"message":"249","line":64,"column":17,"nodeType":"250","endLine":68,"endColumn":19},{"ruleId":"237","severity":1,"message":"257","line":3,"column":10,"nodeType":"239","messageId":"240","endLine":3,"endColumn":16},{"ruleId":"237","severity":1,"message":"256","line":4,"column":18,"nodeType":"239","messageId":"240","endLine":4,"endColumn":26},{"ruleId":"237","severity":1,"message":"258","line":4,"column":28,"nodeType":"239","messageId":"240","endLine":4,"endColumn":36},{"ruleId":"237","severity":1,"message":"238","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"248","severity":1,"message":"249","line":77,"column":17,"nodeType":"250","endLine":77,"endColumn":66},{"ruleId":"244","severity":1,"message":"245","line":111,"column":17,"nodeType":"246","messageId":"247","endLine":111,"endColumn":19},{"ruleId":"244","severity":1,"message":"245","line":119,"column":20,"nodeType":"246","messageId":"247","endLine":119,"endColumn":22},{"ruleId":"244","severity":1,"message":"245","line":171,"column":26,"nodeType":"246","messageId":"247","endLine":171,"endColumn":28},{"ruleId":"244","severity":1,"message":"259","line":181,"column":27,"nodeType":"246","messageId":"247","endLine":181,"endColumn":29},{"ruleId":"244","severity":1,"message":"259","line":188,"column":27,"nodeType":"246","messageId":"247","endLine":188,"endColumn":29},{"ruleId":"244","severity":1,"message":"245","line":237,"column":51,"nodeType":"246","messageId":"247","endLine":237,"endColumn":53},{"ruleId":"244","severity":1,"message":"245","line":257,"column":31,"nodeType":"246","messageId":"247","endLine":257,"endColumn":33},{"ruleId":"244","severity":1,"message":"245","line":292,"column":20,"nodeType":"246","messageId":"247","endLine":292,"endColumn":22},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"237","severity":1,"message":"260","line":42,"column":10,"nodeType":"239","messageId":"240","endLine":42,"endColumn":17},{"ruleId":"237","severity":1,"message":"261","line":42,"column":19,"nodeType":"239","messageId":"240","endLine":42,"endColumn":29},{"ruleId":"237","severity":1,"message":"262","line":43,"column":10,"nodeType":"239","messageId":"240","endLine":43,"endColumn":17},{"ruleId":"237","severity":1,"message":"263","line":43,"column":19,"nodeType":"239","messageId":"240","endLine":43,"endColumn":29},{"ruleId":"237","severity":1,"message":"264","line":45,"column":10,"nodeType":"239","messageId":"240","endLine":45,"endColumn":17},{"ruleId":"233","severity":1,"message":"265","line":61,"column":6,"nodeType":"235","endLine":61,"endColumn":8,"suggestions":"266"},{"ruleId":"244","severity":1,"message":"245","line":90,"column":17,"nodeType":"246","messageId":"247","endLine":90,"endColumn":19},{"ruleId":"244","severity":1,"message":"245","line":90,"column":33,"nodeType":"246","messageId":"247","endLine":90,"endColumn":35},{"ruleId":"244","severity":1,"message":"245","line":90,"column":51,"nodeType":"246","messageId":"247","endLine":90,"endColumn":53},{"ruleId":"248","severity":1,"message":"249","line":203,"column":9,"nodeType":"250","endLine":210,"endColumn":11},{"ruleId":"244","severity":1,"message":"245","line":330,"column":30,"nodeType":"246","messageId":"247","endLine":330,"endColumn":32},{"ruleId":"248","severity":1,"message":"249","line":374,"column":27,"nodeType":"250","endLine":379,"endColumn":29},{"ruleId":"248","severity":1,"message":"249","line":407,"column":27,"nodeType":"250","endLine":410,"endColumn":29},{"ruleId":"248","severity":1,"message":"249","line":445,"column":27,"nodeType":"250","endLine":448,"endColumn":29},{"ruleId":"248","severity":1,"message":"249","line":561,"column":27,"nodeType":"250","endLine":567,"endColumn":29},{"ruleId":"248","severity":1,"message":"249","line":609,"column":11,"nodeType":"250","endLine":612,"endColumn":13},{"ruleId":"237","severity":1,"message":"267","line":7,"column":10,"nodeType":"239","messageId":"240","endLine":7,"endColumn":21},{"ruleId":"233","severity":1,"message":"268","line":40,"column":6,"nodeType":"235","endLine":40,"endColumn":8,"suggestions":"269"},{"ruleId":"244","severity":1,"message":"245","line":108,"column":14,"nodeType":"246","messageId":"247","endLine":108,"endColumn":16},{"ruleId":"248","severity":1,"message":"249","line":38,"column":9,"nodeType":"250","endLine":46,"endColumn":11},{"ruleId":"233","severity":1,"message":"268","line":36,"column":6,"nodeType":"235","endLine":36,"endColumn":8,"suggestions":"270"},{"ruleId":"244","severity":1,"message":"245","line":129,"column":14,"nodeType":"246","messageId":"247","endLine":129,"endColumn":16},{"ruleId":"237","severity":1,"message":"238","line":1,"column":17,"nodeType":"239","messageId":"240","endLine":1,"endColumn":26},{"ruleId":"248","severity":1,"message":"249","line":33,"column":9,"nodeType":"250","endLine":36,"endColumn":11},{"ruleId":"248","severity":1,"message":"249","line":47,"column":7,"nodeType":"250","endLine":50,"endColumn":9},{"ruleId":"271","severity":1,"message":"272","line":1,"column":1,"nodeType":"273","endLine":15,"endColumn":3},{"ruleId":"244","severity":1,"message":"245","line":35,"column":30,"nodeType":"246","messageId":"247","endLine":35,"endColumn":32},{"ruleId":"244","severity":1,"message":"245","line":368,"column":53,"nodeType":"246","messageId":"247","endLine":368,"endColumn":55},{"ruleId":"274","severity":1,"message":"275","line":52,"column":1,"nodeType":"276","messageId":"247","endLine":54,"endColumn":2},{"ruleId":"277","severity":1,"message":"278","line":123,"column":7,"nodeType":"279","messageId":"280","endLine":123,"endColumn":26},{"ruleId":"281","severity":1,"message":"282","line":150,"column":5,"nodeType":"283","messageId":"284","endLine":169,"endColumn":7},{"ruleId":"244","severity":1,"message":"245","line":177,"column":25,"nodeType":"246","messageId":"247","endLine":177,"endColumn":27},{"ruleId":"277","severity":1,"message":"278","line":178,"column":7,"nodeType":"279","messageId":"280","endLine":178,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":11,"column":21,"nodeType":"246","messageId":"247","endLine":11,"endColumn":23},{"ruleId":"244","severity":1,"message":"245","line":11,"column":63,"nodeType":"246","messageId":"247","endLine":11,"endColumn":65},{"ruleId":"244","severity":1,"message":"245","line":13,"column":27,"nodeType":"246","messageId":"247","endLine":13,"endColumn":29},{"ruleId":"244","severity":1,"message":"245","line":13,"column":68,"nodeType":"246","messageId":"247","endLine":13,"endColumn":70},{"ruleId":"244","severity":1,"message":"259","line":33,"column":21,"nodeType":"246","messageId":"247","endLine":33,"endColumn":23},{"ruleId":"244","severity":1,"message":"245","line":33,"column":61,"nodeType":"246","messageId":"247","endLine":33,"endColumn":63},{"ruleId":"244","severity":1,"message":"245","line":202,"column":32,"nodeType":"246","messageId":"247","endLine":202,"endColumn":34},{"ruleId":"244","severity":1,"message":"245","line":207,"column":36,"nodeType":"246","messageId":"247","endLine":207,"endColumn":38},{"ruleId":"244","severity":1,"message":"245","line":212,"column":26,"nodeType":"246","messageId":"247","endLine":212,"endColumn":28},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'controlData'. Either include it or remove the dependency array.","ArrayExpression",["287"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'styled' is defined but never used.","'ipcRenderer' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'HomeScreenTypes' is defined but never used.","'useSwiper' is defined but never used.","React Hook useEffect has missing dependencies: '_setData', 'auto', and 'controlDevice'. Either include them or remove the dependency array.",["288"],"'Col' is defined but never used.","'HelpText' is defined but never used.","'string' is defined but never used.","'MoreInfo' is defined but never used.","Expected '!==' and instead saw '!='.","'heading' is assigned a value but never used.","'setHeading' is assigned a value but never used.","'compass' is assigned a value but never used.","'setCompass' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.",["289"],"'InputNumber' is defined but never used.","React Hook useEffect has a missing dependency: 'controlDevice'. Either include it or remove the dependency array.",["290"],["291"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"298","fix":"300"},"Update the dependencies array to be: [controlData]",{"range":"301","text":"302"},"Update the dependencies array to be: [_setData, auto, controlDevice]",{"range":"303","text":"304"},"Update the dependencies array to be: [getLocation]",{"range":"305","text":"306"},"Update the dependencies array to be: [controlDevice]",{"range":"307","text":"308"},{"range":"309","text":"308"},[518,520],"[controlData]",[1801,1803],"[_setData, auto, controlDevice]",[1877,1879],"[getLocation]",[1436,1438],"[controlDevice]",[1157,1159]]