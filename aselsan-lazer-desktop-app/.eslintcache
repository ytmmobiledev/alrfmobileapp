[{"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\index.js":"1","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\App.js":"2","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\selectDevice.js":"3","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\tabs.js":"4","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\moreInfo.js":"5","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\slide.js":"6","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\compass.js":"7","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Loading.js":"8","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\SetModal.tsx":"9","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Header.js":"10","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\device.js":"11","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\measure.js":"12","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\setting.js":"13","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\laserMeter.js":"14","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Params.ts":"15","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Config.ts":"16","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Colors.ts":"17","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\InstantStore.ts":"18","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\MainStore.ts":"19","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\services\\BLEService.ts":"20","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Conversions.tsx":"21","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\toast.tsx":"22","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findLocation.tsx":"23","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\index.tsx":"24","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\cMoment.tsx":"25","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findData.tsx":"26","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Buffer.tsx":"27","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\tr.tsx":"28","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\en.tsx":"29"},{"size":1683,"mtime":1655279034895,"results":"30","hashOfConfig":"31"},{"size":1208,"mtime":1655279034835,"results":"32","hashOfConfig":"31"},{"size":3979,"mtime":1655477835908,"results":"33","hashOfConfig":"31"},{"size":3648,"mtime":1655454113302,"results":"34","hashOfConfig":"31"},{"size":8141,"mtime":1655279034899,"results":"35","hashOfConfig":"31"},{"size":3154,"mtime":1655297981481,"results":"36","hashOfConfig":"31"},{"size":13275,"mtime":1655535717947,"results":"37","hashOfConfig":"31"},{"size":769,"mtime":1655279034890,"results":"38","hashOfConfig":"31"},{"size":9131,"mtime":1655279034891,"results":"39","hashOfConfig":"31"},{"size":1909,"mtime":1655279034890,"results":"40","hashOfConfig":"31"},{"size":7340,"mtime":1655279034898,"results":"41","hashOfConfig":"31"},{"size":1480,"mtime":1655279034899,"results":"42","hashOfConfig":"31"},{"size":7132,"mtime":1655279034913,"results":"43","hashOfConfig":"31"},{"size":15176,"mtime":1655535593003,"results":"44","hashOfConfig":"31"},{"size":5083,"mtime":1655279034892,"results":"45","hashOfConfig":"31"},{"size":5893,"mtime":1655279034891,"results":"46","hashOfConfig":"31"},{"size":320,"mtime":1655279034891,"results":"47","hashOfConfig":"31"},{"size":1303,"mtime":1655279034916,"results":"48","hashOfConfig":"31"},{"size":779,"mtime":1655279034916,"results":"49","hashOfConfig":"31"},{"size":6346,"mtime":1655279034915,"results":"50","hashOfConfig":"31"},{"size":1193,"mtime":1655279034893,"results":"51","hashOfConfig":"31"},{"size":535,"mtime":1655279034895,"results":"52","hashOfConfig":"31"},{"size":1893,"mtime":1655279034894,"results":"53","hashOfConfig":"31"},{"size":522,"mtime":1655279034896,"results":"54","hashOfConfig":"31"},{"size":250,"mtime":1655279034893,"results":"55","hashOfConfig":"31"},{"size":6888,"mtime":1655279034894,"results":"56","hashOfConfig":"31"},{"size":222,"mtime":1655279034892,"results":"57","hashOfConfig":"31"},{"size":4267,"mtime":1655279034897,"results":"58","hashOfConfig":"31"},{"size":6249,"mtime":1655279034896,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"11ezs1a",{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"87"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"87"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"87"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\index.js",[],["140","141"],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\App.js",["142"],"import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Colors from \"./constants/Colors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport { Spin } from 'antd';\r\nimport {IStore} from \"./stores/InstantStore\";\r\nimport {MStore} from \"./stores/MainStore\";\r\nimport useStayAwake from \"use-stay-awake\";\r\n\r\n\r\nfunction App() {\r\n    const history = useHistory()\r\n    const device = useStayAwake();\r\n\r\n    const ble = IStore.ble;\r\n    useEffect(()=>{\r\n\r\n\r\n        setTimeout(()=>{\r\n            controlData()\r\n        },1000)\r\n    },[])\r\n\r\n\r\n    function controlData() {\r\n\r\n        if(MStore.settings.lock_screen){\r\n            device.preventSleeping();\r\n        }else{\r\n            device.allowSleeping();\r\n        }\r\n\r\n        if(MStore.first){\r\n            history.push(\"slide\")\r\n        }else{\r\n\r\n            let device = ble.getDevice()\r\n\r\n            if(device){\r\n                history.push(\"tabs\")\r\n            }else{\r\n                history.push(\"select-device\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"contain\" style={{backgroundColor:Colors.darkGray,justifyContent:'center',alignItems:'center'}}>\r\n        <Spin/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\selectDevice.js",["143","144","145"],"import React, {useEffect, useState} from \"react\"\r\nimport Colors from \"../constants/Colors\";\r\nimport {string} from \"../locales\";\r\nimport Header, {HelpText, MoreInfo} from \"../componenets/Header\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {error} from \"../functions/toast\";\r\nconst {ipcRenderer} = require(\"electron\");\r\n\r\nconst SelectDevice = () => {\r\n    const ble = IStore.ble\r\n    const history = useHistory()\r\n\r\n    const [devices,setDevices] = useState([])\r\n\r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n\r\n\r\n\r\n    function scan() {\r\n        navigator.bluetooth.requestDevice({ acceptAllDevices: true}).then((device)=>{\r\n            device.gatt.connect().then((service)=>{\r\n                console.warn(device.connected)\r\n                IStore.setLoading(false)\r\n                ble.setDevice(service)\r\n                history.goBack()\r\n            }).catch((e)=>{\r\n                IStore.setLoading(false)\r\n                setDevices([])\r\n                console.warn(e)\r\n                error()\r\n            })\r\n\r\n\r\n        })\r\n\r\n        ipcRenderer.on('devices', (event, deviceList) => {\r\n            if(Array.isArray(deviceList) && deviceList.length){\r\n                setDevices([...deviceList])\r\n            }\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"center contain column\" >\r\n\r\n\r\n           <div className=\"center\" style={{width:'100%'}}>\r\n               <Header\r\n                   title=\"Cihazlar\"\r\n                   onBack={()=>{\r\n                       history.goBack()\r\n                   }}\r\n               />\r\n           </div>\r\n            <div\r\n                className=\"button\"\r\n                onClick={()=>{\r\n                    IStore.setLoading(false)\r\n                    ble.setDevice(\"test\")\r\n                    history.goBack()\r\n                }}\r\n                style={{alignSelf:'center'}}\r\n            >\r\n                Demo Verileri Kullan\r\n            </div>\r\n\r\n            <div className={\"flex contain column scroll\"} style={{backgroundColor:Colors.darkGray}}>\r\n\r\n                {\r\n                    devices.length?\r\n                        <div className=\"scroll flex column\" style={{alignItems:'center'}}>\r\n                            {\r\n                                devices.map(({deviceId,deviceName},index)=>{\r\n                                    return(\r\n                                        <div\r\n                                            key={index}\r\n                                            onClick={()=>{\r\n                                                IStore.setLoading(true)\r\n                                                setTimeout(()=>{\r\n                                                    IStore.setLoading(false)\r\n                                                    setDevices([])\r\n                                                },10000)\r\n                                                ipcRenderer.send('selected-device', deviceId)\r\n\r\n                                            }}\r\n                                            style={{width:'60%', borderBottom:`1px solid ${Colors.text}`, textAlign:'center',padding:10, fontSize:20,fontWeight:'bold',color:'white'}}>{deviceName}\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div> :\r\n                        <div\r\n                            className={\"contain center flex\"}\r\n                        >\r\n                            <div\r\n                                className=\"button\"\r\n                                onClick={scan}\r\n                                style={{alignSelf:'center'}}\r\n                            >\r\n                                Cihazları Tara\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SelectDevice","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\tabs.js",["146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import React, {useEffect, useState} from \"react\"\r\nimport Colors from \"../constants/Colors\";\r\nimport BottomNavigation from '@mui/material/BottomNavigation';\r\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport {string} from \"../locales\";\r\nimport Measure from \"./measure\";\r\nimport Device from \"./device\";\r\nimport LaserMeter from \"./laserMeter\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport Setting from \"./setting\";\r\nimport { ipcRenderer } from \"electron\";\r\n\r\nconst Tabs = () => {\r\n\r\n\r\n\r\n\r\n    const page = IStore.tab_index\r\n\r\n    return (\r\n        <div style={{backgroundColor:Colors.darkGray, height: '100vh', width: '100%' }}>\r\n            <div >\r\n                {\r\n                    page==\"olcum\"?\r\n                        <Measure/>:\r\n                        page==\"cihaz\"?\r\n                            <Device/>:\r\n                            page==\"yapilandirici\"?\r\n                                <Setting/>:\r\n                                page==\"lazer\"?\r\n                                    <LaserMeter/>:null\r\n                }\r\n            </div>\r\n            <div style={{position: 'fixed', bottom: 0, left: 0, right: 0 }}>\r\n                <BottomNavigation\r\n                    showLabels\r\n                    value={page}\r\n                    sx={{\r\n                        p:5,\r\n                        bgcolor: Colors.primary,\r\n                        '& .MuiBottomNavigationAction-label': {\r\n                            filter:\"opacity(0.4)\",\r\n                            color: Colors.white,\r\n                            fontSize: theme => theme.typography.caption,\r\n                            transition: 'none',\r\n                            fontWeight: 'bold',\r\n                            lineHeight: '20px'\r\n                        },\r\n                        '& .Mui-selected': {\r\n                            '& .MuiBottomNavigationAction-label': {\r\n                                filter:\"none\",\r\n                                color: Colors.white,\r\n                                fontSize: theme => theme.typography.caption,\r\n                                transition: 'none',\r\n                                fontWeight: 'bold',\r\n                                lineHeight: '20px'\r\n                            }\r\n                        }\r\n                    }}\r\n\r\n                    onChange={(event, newValue) => {\r\n                        IStore.setTabIndex(newValue)\r\n                    }}\r\n                >\r\n                    <BottomNavigationAction value={\"olcum\"} label={string.olcum2} icon={ <img src={require(\"../assets/images/goz.png\").default} style={{...page==\"olcum\"?{}:{filter:\"opacity(0.4)\"}, width:30,height:30}}/>} />\r\n                    <BottomNavigationAction value={\"cihaz\"} label={string.cihaz2} icon={ <img src={require(\"../assets/images/cihaz2.png\").default} style={{...page==\"cihaz\"?{}:{filter:\"opacity(0.4)\"},width:30,height:30}}/>} />\r\n                    <BottomNavigationAction value={\"yapilandirici\"} label={string.yapilandirici} icon={ <img src={require(\"../assets/images/yapilandirici.png\").default} style={{...page==\"yapilandirici\"?{}:{filter:\"opacity(0.4)\"},width:30,height:30}}/>} />\r\n                    <BottomNavigationAction value={\"lazer\"} label={string.lazermesafeolcer} icon={ <img src={require(\"../assets/images/lazer.png\").default} style={{...page==\"lazer\"?{}:{filter:\"opacity(0.4)\"},width:30,height:30}}/>} />\r\n                </BottomNavigation>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(Tabs)","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\moreInfo.js",["162","163","164"],"import React, {useEffect, useState} from \"react\"\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport Header, {HelpText, MoreInfoButton} from \"../componenets/Header\";\r\nimport {string} from \"../locales\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { RightOutlined} from \"@ant-design/icons\";\r\n\r\nimport {contacts, findType, HomeScreenTypes} from \"../constants/Config\";\r\nimport {MStore} from \"../stores/MainStore\";\r\nimport {Modal, Switch} from \"antd\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {setModalTypes} from \"../componenets/SetModal\";\r\nimport useStayAwake from \"use-stay-awake\";\r\n\r\n\r\nconst MoreInfo = () => {\r\n    const history = useHistory()\r\n    const device = useStayAwake();\r\n\r\n\r\n    const [visible,setVisible] = useState(false)\r\n\r\n    const {home_screen_type,lock_screen} = MStore.settings\r\n\r\n    function Contact() {\r\n        return(\r\n            <Modal\r\n                bodyStyle={{padding:0, backgroundColor:Colors.darkGray}}\r\n                centered\r\n                closable={false}\r\n                visible={visible}\r\n                okText={string.kaydet}\r\n                cancelText={string.kapat}\r\n                onOk={()=>{setVisible(false)}}\r\n                onCancel={()=>{setVisible(false)}}\r\n                footer={null}\r\n            >\r\n                <div style={{width:'100%'}}>\r\n                    <div\r\n                        style={{width:'100%', display:'flex',justifyContent:'flex-end'}}\r\n                    >\r\n                        <div className=\"background-img\" style={{display:'flex', width:60,height:55,backgroundImage:`url(${require(\"../assets/images/modal/corner.png\").default})`}}  >\r\n                            <div style={{marginLeft:20,marginBottom:10}} className=\"flex-1 center\">\r\n                                <img src={require(\"../assets/images/modal/iletisim.png\").default} height={25} width={25} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{padding:15}}>\r\n                        <div style={{fontSize:18,fontWeight:'bold',color:Colors.primary,textAlign:'center'}} >{string[\"bizeulasin\"]}</div>\r\n                    </div>\r\n                    <div className=\"flex center row\" style={{display:'grid', width:'100%',padding:10}}>\r\n                        {\r\n                            Object.values(contacts).map(({title,value,onPress},index)=>\r\n                                <div key={index} style={{cursor:'pointer', display:'flex', }} onClick={()=>{onPress(value.replace(/ /g, ''))}}>\r\n                                    <div style={{padding:10}}>\r\n                                        <div  style={{fontSize:18,fontWeight:'bold',color:Colors.white}}>{string[title]+\": \"+value}</div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n\r\n                    <div className={\"flex row\"} style={{padding:15, width:'100%',margin:\"40px 0\",alignItems:'center',justifyContent:'space-around'}}>\r\n                        <div className=\"flex-1 center\">\r\n                            <div\r\n                                style={{fontSize:18,color:Colors.primary,fontWeight:'bold', padding:10}}\r\n                                onClick={()=>{setVisible(false)}}\r\n                            >\r\n                                {string.kapat}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div  className=\"flex-1 column contain center\" >\r\n            <Contact/>\r\n            <div className=\"center\" style={{width:'100%'}}>\r\n                <Header\r\n                    onBack={()=>{\r\n                        history.goBack()\r\n                    }}\r\n                    right={()=><MoreInfoButton close/>}\r\n                />\r\n            </div>\r\n            <div className=\"flex row\"  style={{fontSize:25,fontWeight:'bold',color:Colors.primary}}>\r\n                {string.dahafazla}\r\n            </div>\r\n            <div className=\"flex-1 scroll column\" style={{width:'100%',alignItems:'center'}} >\r\n\r\n                <div\r\n                    className=\"flex row\" style={{ width:'50%',alignItems:'center',justifyContent:'space-between',padding:12,margin:\"20px 0px\",borderRadius:15,backgroundColor:Colors.secondary}}\r\n                    onClick={()=>{\r\n                        IStore.setSetModal({\r\n                            visible:true,\r\n                            title:string[\"olcumonceligi\"],\r\n                            value:home_screen_type,\r\n                            type:setModalTypes.Select,\r\n                            options:Object.values(HomeScreenTypes),\r\n                            icon:require(\"../assets/images/modal/oncelik.png\"),\r\n                            onChange:async (id)=>{\r\n                                MStore.setSettings({...MStore.settings, home_screen_type:id})\r\n                            }\r\n                        })\r\n                    }}\r\n                >\r\n                    <div style={{fontSize:18,fontWeight:'bold',color:Colors.text}}>\r\n                        {string[\"olcumonceligi\"]}\r\n                    </div>\r\n                    <div className=\"flex row center\" >\r\n                        <div style={{display:'flex',flex:2,textAlign:'left',color:Colors.text,padding:10,fontSize:15}} >{string[findType(HomeScreenTypes,home_screen_type)]}</div>\r\n                        <RightOutlined style={{fontSize:20,color:Colors.text}} />\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"flex row\" style={{ borderBottomStyle:'dashed', borderBottomWidth:3,borderRadius:2,borderColor:'#667587',  width:'50%',alignItems:'center',justifyContent:'space-between',padding:12,margin:\"15px 0px\"}}\r\n                >\r\n                    <div style={{fontSize:18,fontWeight:'bold',color:Colors.text}}>\r\n                        {string[\"ekranklidiniengelle\"]}\r\n                    </div>\r\n                    <div >\r\n                        <Switch defaultChecked={lock_screen} onChange={(lock_screen)=>{\r\n                            MStore.setSettings({...MStore.settings,lock_screen})\r\n                            if(lock_screen){\r\n                                device.preventSleeping();\r\n                            }else{\r\n                                device.allowSleeping();\r\n                            }\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"flex row\" style={{ width:'50%',alignItems:'center',justifyContent:'space-between',padding:12,margin:\"20px 0px\",borderRadius:15,backgroundColor:Colors.secondary}}\r\n                    onClick={()=>{\r\n                        history.push(\"select-device\")\r\n                    }}\r\n                >\r\n                    <div style={{fontSize:18,fontWeight:'bold',color:Colors.text}}>\r\n                        {string[\"cihazabaglan\"]}\r\n                    </div>\r\n                    <div className=\"flex row center\" >\r\n                        <RightOutlined style={{fontSize:20,color:Colors.text}} />\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"flex row\" style={{ width:'50%',alignItems:'center',justifyContent:'space-between',padding:12,margin:\"20px 0px\",borderRadius:15,backgroundColor:Colors.secondary}}\r\n                    onClick={()=>{\r\n                        setVisible(true)\r\n                    }}\r\n                >\r\n                    <div style={{fontSize:18,fontWeight:'bold',color:Colors.text}}>\r\n                        {string[\"hakkinda\"]}\r\n                    </div>\r\n                    <div className=\"flex row center\" >\r\n                        <RightOutlined style={{fontSize:20,color:Colors.text}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MoreInfo)","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\slide.js",["165"],"import React, {useEffect, useState} from \"react\"\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Col} from \"antd\";\r\nimport Colors from \"../constants/Colors\";\r\nimport {string} from \"../locales\";\r\nimport {MStore} from \"../stores/MainStore\";\r\n\r\nconst Slide = () => {\r\n    const history = useHistory()\r\n    const [page,setPage] = useState(1)\r\n\r\n    useEffect(() => {\r\n        setPage(1)\r\n    }, []);\r\n\r\n    const slide = [\r\n        {\r\n            title:\"olcum\",\r\n            desc:\"olcumdesc\",\r\n            icon:require(\"../assets/images/olcum.png\").default\r\n        },\r\n        {\r\n            title:\"cihaziyapilandir\",\r\n            desc:\"cihaziyapilandirdesc\",\r\n            icon:require(\"../assets/images/cihaz.png\").default\r\n        },\r\n        /*{\r\n            title:\"aygityazilimi\",\r\n            desc:\"aygityazilimidesc\",\r\n            icon:require(\"../assets/images/aygit.png\").default\r\n        },*/\r\n        {\r\n            title:\"cihazbagla\",\r\n            desc:\"cihazbagladesc\",\r\n            icon:require(\"../assets/images/bagla.png\").default\r\n        }\r\n    ]\r\n\r\n    const {title,desc,icon} = slide[page-1]\r\n\r\n    return (\r\n        <div  className=\"flex-1 column contain center background-img\" style={{width:'100%', backgroundImage:`url(${require(\"../assets/images/slide-bg/bg1.png\").default})`}}>\r\n            <div  className=\"flex center background-img \" style={{width:\"50vh\",height:\"50vh\", backgroundImage:`url(${require(\"../assets/images/slide-bg/bg2.png\").default})`}}>\r\n                <div className=\"flex row center\" style={{marginLeft:'18vw', flexDirection:'space-between'}}>\r\n                    <div style={{textAlign:'center',padding:'3vw', fontWeight:'bold',fontSize:\"4vh\",color:Colors.white}}>{string[title]}</div>\r\n                   <div className=\"flex center\" style={{padding:\"4vh\",borderRadius:1000,backgroundColor:Colors.primary}}>\r\n                       <img src={icon} alt={title} style={{width:\"6vh\",height:\"6vh\"}}/>\r\n                   </div>\r\n                </div>\r\n            </div>\r\n            <div style={{width:'50%', textAlign:'center', fontWeight:'500',fontSize:\"2vh\",color:Colors.text}}>{string[desc]}</div>\r\n            <div className=\"flex row center\" style={{marginTop:\"4vh\",}} >\r\n                {\r\n                    slide.map((_,index)=>\r\n                        <div key={index} style={{margin:10, width:\"10vw\",height:10,borderRadius:10,backgroundColor:page>=(index+1)?Colors.primary:Colors.lightBlack}}/>\r\n                    )\r\n                }\r\n            </div>\r\n            <div\r\n                onClick={()=>{\r\n                    if(page<slide.length){\r\n                        setPage(page+1)\r\n                    }else{\r\n\r\n                        MStore.setFirst(false)\r\n                        history.push(\"/\")\r\n                    }\r\n                }}\r\n\r\n                className=\"flex center\" style={{marginTop:\"3vh\", padding:\"1vh 7vh\",borderRadius:15,backgroundColor:Colors.primary}}>\r\n                <div style={{textAlign:'center',fontWeight:'500',fontSize:\"2vh\",color:Colors.white}}>{string[\"devamet\"]}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Slide","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\compass.js",["166","167","168","169","170","171","172","173","174","175","176"],"\r\nimport * as React from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {MStore} from \"../stores/MainStore\";\r\nimport Colors from \"../constants/Colors\";\r\nimport {AngleUnitTypes, HomeScreenTypes} from \"../constants/Config\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Params} from \"../constants/Params\";\r\nimport {info} from \"../functions/toast\";\r\nimport {angleConversion, distanceConversion} from \"../functions/Conversions\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Header from \"../componenets/Header\";\r\nimport {string} from \"../locales\";\r\nimport {ColumnHeightOutlined, ColumnWidthOutlined,ReloadOutlined} from \"@ant-design/icons\";\r\nimport { Swiper, SwiperSlide ,useSwiper} from 'swiper/react/swiper-react'\r\nimport { Navigation } from \"swiper\";\r\n\r\n\r\nlet _auto = false\r\n\r\nfunction Compass({ navigation }) {\r\n    const history = useHistory()\r\n    const ble = IStore.ble\r\n    const param = Params()\r\n\r\n    const [distance,setDistance] = useState([])\r\n    const [distance_unit,setDistanceUnit] = useState(\"--\")\r\n    const [angle_unit,setAngleUnit] = useState(\"--\")\r\n    const [azimuth,setAzimuth] = useState(0)\r\n    const [elevation,setElevation] = useState(0)\r\n    const [roll,setRoll] = useState(0)\r\n    const [auto,setAuto] = useState(_auto)\r\n    const [spinValue,setSpinValue] = useState(0)\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        _auto=false\r\n        BLEService.event.on(\"distance_and_compass\",_setData)\r\n        controlDevice()\r\n\r\n\r\n\r\n        return()=>{\r\n            try {\r\n                if(auto){\r\n                    _auto=false\r\n                    setAuto(false)\r\n                }\r\n            }catch (e) {\r\n\r\n            }\r\n            BLEService.event.removeListener(\"distance_and_compass\",_setData)\r\n        }\r\n    },[])\r\n\r\n\r\n\r\n    function _setData({distance,distance_unit,angle_unit,azimuth,elevation,roll}) {\r\n        setDistance(distance)\r\n        setDistanceUnit(distanceConversion(0,distance_unit,distance_unit).unit)\r\n        setAngleUnit(angleConversion(0,angle_unit,angle_unit).unit)\r\n        setAzimuth(azimuth)\r\n        setElevation(elevation)\r\n        setRoll(roll)\r\n\r\n        setSpinValue(360-angleConversion(azimuth,angle_unit,AngleUnitTypes.Derece.id).angle)\r\n\r\n        if(_auto){\r\n            setTimeout(()=>{\r\n                controlDevice()\r\n            },2500)\r\n        }\r\n    }\r\n\r\n\r\n    function controlDevice() {\r\n\r\n        const device = ble.getDevice()\r\n\r\n        if(device){\r\n            getData()\r\n        }else{\r\n            history.push(\"select-device\")\r\n        }\r\n    }\r\n\r\n    async function getData() {\r\n        if(!_auto)\r\n            info(\"Atış Yapılıyor...\")\r\n        await ble.sendDataToDevice(\"distance_and_compass\",param.distance_and_compass.getHex)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function DistanceView({distance,distance_unit,row=true}) {\r\n\r\n        let len = distance.length\r\n\r\n        return <div className={`flex ${row?'row':'column'}`} style={{width:'80%',alignItems:'center',justifyContent:'space-around'}}>\r\n            {\r\n                distance.map((val,index)=><div className=\"flex\" key={index} style={{padding:\"10px 0\",textAlign:'center',color:Colors.text,fontWeight:'bold',fontSize:`${row?(len==3?4:len==2?5:len==1?6:0):6}vw`}}>{parseFloat(val.toString()).toFixed(2)+\" \"+distance_unit}</div>)\r\n            }\r\n        </div>\r\n\r\n    }\r\n\r\n  return (\r\n      <div className=\"contain column\">\r\n          <div className=\"center\" style={{width:'100%'}}>\r\n              <Header\r\n                  title={string.olcum2}\r\n                  onBack={()=>{\r\n                      history.goBack()\r\n                  }}\r\n              />\r\n          </div>\r\n\r\n          <div className=\"flex-1\" style={{padding:20}}>\r\n              <Swiper initialSlide={MStore.settings.home_screen_type}  navigation={true} modules={[Navigation]} style={{display:'flex',flex:1}}>\r\n                  <SwiperSlide >\r\n                      <div className={\" flex-1 column\"} style={{height:'100%', alignItems:'center'}} >\r\n                          <div className=\"flex-3 center\">\r\n                              <div style={{position:'absolute', fontSize:'6vh',fontWeight:'bold',color:Colors.text}}>{azimuth+\" \"+angle_unit}</div>\r\n                              <img src={require(\"../assets/images/compass.png\").default} style={{height:'40vh',transform: `rotate(${spinValue}deg)`,transitionDuration:'1000ms'}}   />\r\n                          </div>\r\n                          <div className=\"flex-2 row  center\" style={{width:'80%',alignItems:'center',justifyContent:'space-around'}}>\r\n                              <div>\r\n                                  <ColumnHeightOutlined style={{fontSize:'4vw',color:Colors.text}}/>\r\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{elevation+\"\"+angle_unit}</span>\r\n                              </div>\r\n                              <div>\r\n                                  <ColumnWidthOutlined style={{fontSize:'4vw',color:Colors.text}}/>\r\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{roll+\"\"+angle_unit}</span>\r\n                              </div>\r\n\r\n                          </div>\r\n                          <div className=\"flex-2  center\" style={{width:'100%'}}>\r\n                              <DistanceView distance={distance} distance_unit={distance_unit}/>\r\n                          </div>\r\n\r\n                          <div className=\"flex row  center\" style={{ width:'50%',alignItems:'center',justifyContent:'space-around'}}>\r\n                              <div\r\n                                  onClick={()=>{\r\n                                      if(!auto)\r\n                                          controlDevice()\r\n                                      _auto=!_auto\r\n                                      setAuto(!auto)\r\n                                  }}\r\n                                  className=\"flex-1 center column\"\r\n                              >\r\n                                  <ReloadOutlined style={{backgroundColor:Colors[auto?\"green\":\"red\"],fontSize:\"3.5vh\",color:Colors.white,padding:13,borderRadius:100}}/>\r\n                                  <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\r\n                                      {string.otomatikatis}\r\n                                  </div>\r\n                              </div>\r\n                              {\r\n                                  !auto?\r\n                                      <div className=\"flex-1 center column\" onClick={controlDevice} >\r\n                                          <div className=\"flex center\" style={{backgroundColor:Colors.primary,width:\"6.5vh\",height:\"6.5vh\",color:Colors.white,borderRadius:100}}>\r\n                                              <img src={require(\"../assets/images/measure.png\").default} style={{width:\"3vh\",height:\"3vh\"}}/>\r\n                                          </div>\r\n                                          <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\r\n                                              {string.atisyap}\r\n                                          </div>\r\n                                      </div>:<div className=\"flex-1\"/>\r\n                              }\r\n\r\n                          </div>\r\n                      </div>\r\n                  </SwiperSlide>\r\n                  <SwiperSlide  >\r\n                      <div className={\" flex-1 column\"} style={{height:'100%',alignItems:'center'}} >\r\n                          <div className=\"flex-3 center\">\r\n                              <div style={{position:'absolute', fontSize:'6vh',fontWeight:'bold',color:Colors.text}}>{azimuth+\" \"+angle_unit}</div>\r\n                              <img src={require(\"../assets/images/compass.png\").default} style={{height:'40vh',transform: `rotate(${spinValue}deg)`,transitionDuration:'1000ms'}}   />\r\n                          </div>\r\n                          <div className=\"flex-2 row  center\" style={{width:'80%',alignItems:'center',justifyContent:'space-around'}}>\r\n                              <div>\r\n                                  <ColumnHeightOutlined style={{fontSize:'4vw',color:Colors.text}}/>\r\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{elevation+\"\"+angle_unit}</span>\r\n                              </div>\r\n                              <div>\r\n                                  <ColumnWidthOutlined style={{fontSize:'4vw',color:Colors.text}}/>\r\n                                  <span style={{textAlign:'center',fontWeight:'bold',fontSize:'4vw',color:Colors.text}}>{roll+\"\"+angle_unit}</span>\r\n                              </div>\r\n\r\n                          </div>\r\n\r\n                          <div className=\"flex row  center\" style={{ width:'50%',alignItems:'center',justifyContent:'space-around'}}>\r\n                              <div\r\n                                  onClick={()=>{\r\n                                      if(!auto)\r\n                                          controlDevice()\r\n                                      _auto=!_auto\r\n                                      setAuto(!auto)\r\n                                  }}\r\n                                  className=\"flex-1 center column\"\r\n                              >\r\n                                  <ReloadOutlined style={{backgroundColor:Colors[auto?\"green\":\"red\"],fontSize:\"3.5vh\",color:Colors.white,padding:13,borderRadius:100}}/>\r\n                                  <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\r\n                                      {string.otomatikatis}\r\n                                  </div>\r\n                              </div>\r\n                              {\r\n                                  !auto?\r\n                                      <div className=\"flex-1 center column\" onClick={controlDevice} >\r\n                                          <div className=\"flex center\" style={{backgroundColor:Colors.primary,width:\"6.5vh\",height:\"6.5vh\",color:Colors.white,borderRadius:100}}>\r\n                                              <img src={require(\"../assets/images/measure.png\").default} style={{width:\"3vh\",height:\"3vh\"}}/>\r\n                                          </div>\r\n                                          <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\r\n                                              {string.atisyap}\r\n                                          </div>\r\n                                      </div>:<div className=\"flex-1\"/>\r\n                              }\r\n\r\n                          </div>\r\n                      </div>\r\n                  </SwiperSlide>\r\n                  <SwiperSlide >\r\n                      <div className={\" flex-1 column\"} style={{height:'100%', alignItems:'center'}} >\r\n\r\n                          <div className=\"flex-2  center\" style={{width:'100%'}}>\r\n                              <DistanceView distance={distance} distance_unit={distance_unit} row={false}/>\r\n                          </div>\r\n\r\n                          <div className=\"flex row  center\" style={{ width:'50%',alignItems:'center',justifyContent:'space-around'}}>\r\n                              <div\r\n                                  onClick={()=>{\r\n                                      if(!auto)\r\n                                          controlDevice()\r\n                                      _auto=!_auto\r\n                                      setAuto(!auto)\r\n                                  }}\r\n                                  className=\"flex-1 center column\"\r\n                              >\r\n                                  <ReloadOutlined style={{backgroundColor:Colors[auto?\"green\":\"red\"],fontSize:\"3.5vh\",color:Colors.white,padding:13,borderRadius:100}}/>\r\n                                  <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\r\n                                      {string.otomatikatis}\r\n                                  </div>\r\n                              </div>\r\n                              {\r\n                                  !auto?\r\n                                      <div className=\"flex-1 center column\" onClick={controlDevice} >\r\n                                          <div className=\"flex center\" style={{backgroundColor:Colors.primary,width:\"6.5vh\",height:\"6.5vh\",color:Colors.white,borderRadius:100}}>\r\n                                              <img src={require(\"../assets/images/measure.png\").default} style={{width:\"3vh\",height:\"3vh\"}}/>\r\n                                          </div>\r\n                                          <div style={{padding:2, fontSize:\"1.3vh\",color:Colors.white}}>\r\n                                              {string.atisyap}\r\n                                          </div>\r\n                                      </div>:<div className=\"flex-1\"/>\r\n                              }\r\n\r\n                          </div>\r\n                      </div>\r\n                  </SwiperSlide>\r\n              </Swiper>\r\n          </div>\r\n\r\n      </div>\r\n  );\r\n}\r\nexport default observer(Compass)","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Loading.js",["177"],"import React, {useEffect} from 'react';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport Colors from \"../constants/Colors\";\r\nimport {Spin} from \"antd\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\n\r\nconst Loading=()=>{\r\n\r\n    if(!IStore.loading)\r\n        return(null)\r\n\r\n    return(\r\n        <div style={{display:'flex', width:'100%',height:'100vh', zIndex:9999, flex:1,position:'absolute',top:0,left:0,justifyContent:'center',alignItems:'center'}}>\r\n            <div className=\"center\" style={{ border:`4px solid ${Colors.primary}`, width:80,height:80, backgroundColor:Colors.darkGray,borderRadius:1000}}>\r\n                <Spin size=\"large\" style={{ display:'flex'}}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default observer(Loading);\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\SetModal.tsx",["178","179","180","181","182","183","184","185","186","187","188"],"import * as React from \"react\";\r\n\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {InputNumber, Modal, Spin} from \"antd\";\r\nimport {string} from \"../locales\";\r\nimport Colors from \"../constants/Colors\";\r\nimport {CheckCircleOutlined, MinusCircleOutlined} from \"@ant-design/icons\";\r\nimport {error} from \"../functions/toast\";\r\n\r\nexport const setModalTypes = {\r\n    Select:\"select\",\r\n    Number:\"number\"\r\n}\r\n\r\nfunction SetModal() {\r\n    const {\r\n        visible,\r\n        title=\"\",\r\n        description=\"\",\r\n        icon=require(\"../assets/images/cihaz2.png\"),\r\n        value,\r\n        options,\r\n        type,\r\n        numberParams={},\r\n        onChange=async (data:any)=>{}\r\n    } = IStore.set_modal;\r\n\r\n    const [defaultValue,setDefaultValue]:any = useState(null)\r\n    const [loading,setLoading] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        setDefaultValue(value)\r\n    },[value])\r\n\r\n    return (\r\n        <Modal\r\n            bodyStyle={{padding:0, backgroundColor:Colors.darkGray}}\r\n            centered\r\n            closable={false}\r\n            visible={visible}\r\n            okText={string.kaydet}\r\n            cancelText={string.kapat}\r\n            onOk={()=>{IStore.setSetModal({visible:false})}}\r\n            onCancel={()=>{IStore.setSetModal({visible:false})}}\r\n            footer={null}\r\n        >\r\n            <div style={{width:'100%'}}>\r\n                {\r\n                    icon?\r\n                        <div\r\n                            style={{width:'100%', display:'flex',justifyContent:'flex-end'}}\r\n                        >\r\n                            <div className=\"background-img\" style={{display:'flex', width:60,height:55,backgroundImage:`url(${require(\"../assets/images/modal/corner.png\").default})`}}  >\r\n                                <div style={{marginLeft:20,marginBottom:10}} className=\"flex-1 center\">\r\n                                    <img src={icon.default} height={25} width={25} />\r\n                                </div>\r\n                            </div>\r\n                        </div>:<div style={{height:25}}/>\r\n                }\r\n                <div style={{padding:15}}>\r\n                    {\r\n                        title? <div style={{fontSize:18,fontWeight:'bold',color:Colors.text,textAlign:'center'}} >{string[title]}</div>:null\r\n                    }\r\n                    {\r\n                        description? <div style={{fontSize:15,fontWeight:'bold',color:Colors.text,textAlign:'center'}} >{string[description]}</div>:null\r\n                    }\r\n                </div>\r\n                <div className=\"flex center\" style={{width:'100%',padding:10}}>\r\n                    {\r\n                        type==setModalTypes.Select?\r\n                            <Select\r\n                                defaultValue={defaultValue}\r\n                                options={options}\r\n                                onChange={(data:any)=>{\r\n\r\n                                    setDefaultValue(data)\r\n                                }}\r\n                            />:\r\n                            type==setModalTypes.Number?\r\n                                <Number\r\n                                    numberParams={numberParams}\r\n                                    defaultValue={defaultValue}\r\n                                    onChange={(data:any)=>{\r\n                                        setDefaultValue(data)\r\n                                    }}\r\n                                />:null\r\n                    }\r\n                </div>\r\n\r\n                <div className={\"flex row\"} style={{padding:15, width:'100%',margin:\"40px 0\",alignItems:'center',justifyContent:'space-around'}}>\r\n                    <div className=\"flex-1 center\">\r\n                        <div\r\n                            style={{fontSize:18,color:Colors.primary,fontWeight:'bold', padding:10}}\r\n                            onClick={()=>{IStore.setSetModal({visible:false})}}\r\n                        >\r\n                            {string.kapat}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-1 center\">\r\n                        <div\r\n                            style={{fontSize:18,color:Colors.primary,fontWeight:'bold', padding:10}}\r\n                            onClick={()=>{\r\n                                if(loading){\r\n                                    return;\r\n                                }\r\n                                let value:any = defaultValue;\r\n\r\n\r\n                                if(type==setModalTypes.Number){\r\n                                    let {fixed,min,max,unit=\"\"} = numberParams;\r\n\r\n\r\n                                    value = parseInt((value).toString())\r\n                                    console.warn(value,max)\r\n\r\n                                    if(isNaN(value) || !/^-?\\d+$/.test(value.toString())){\r\n                                        error(\"Geçersiz Veri\")\r\n                                        return;\r\n                                    }\r\n                                    if(min!=undefined && value<min){\r\n                                        if(fixed){\r\n                                            min = min/Math.pow(10,fixed)\r\n                                        }\r\n                                        error(\"Minimum \"+min+\" \"+unit)\r\n                                        return;\r\n                                    }\r\n                                    if(max!=undefined && value>max){\r\n                                        if(fixed){\r\n                                            max = max/Math.pow(10,fixed)\r\n                                        }\r\n                                        error(\"Maximum \"+max+\" \"+unit)\r\n                                        return;\r\n                                    }\r\n                                }\r\n\r\n                                setLoading(true)\r\n                                onChange(value).then(()=>{\r\n                                    setLoading(false)\r\n                                    IStore.setSetModal({visible:false})\r\n                                })\r\n                            }}\r\n                        >\r\n                            {\r\n                                loading?\r\n                                    <Spin/>:\r\n                                    string.kaydet\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nfunction Select({defaultValue, options,onChange}:any) {\r\n    return(\r\n        <div  style={{width:\"50%\"}}>\r\n            {\r\n                Array.isArray(options)? options.map(({id,value}:any)=>(\r\n                    <div\r\n                        key={id}\r\n                        style={{width:\"100%\"}}\r\n                        onClick={()=>{\r\n                            onChange(id)\r\n                        }}\r\n\r\n                    >\r\n                        <div style={{ borderBottomStyle:'dashed', borderBottomWidth:1,borderRadius:1,borderColor:'#667587',padding:10,width:'100%',alignItems:'center',justifyContent:'space-between'}} className=\"flex row\" >\r\n                            <div style={{display:'flex',flex:1,fontSize:15,fontWeight:'bold',color:Colors.text+(defaultValue==id?\"\":\"88\"),padding:7}}>{string[value]??value}</div>\r\n                            {\r\n                                defaultValue==id?\r\n                                    <CheckCircleOutlined style={{fontSize:18,color:Colors.text+(defaultValue==id?\"\":\"88\")}} />:\r\n                                    <MinusCircleOutlined style={{fontSize:18,color:Colors.text+(defaultValue==id?\"\":\"88\")}} />\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n                )):null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction Number({defaultValue=\"loading\",onChange,numberParams={}}:any) {\r\n    let {fixed=0,min=0,max=0,unit=\"\"} = numberParams;\r\n\r\n    if(fixed){\r\n        min = min/Math.pow(10,fixed)\r\n        max = max/Math.pow(10,fixed)\r\n    }\r\n\r\n    if(defaultValue==\"loading\")\r\n        return null\r\n\r\n\r\n    return(\r\n        <div className=\"flex center\" style={{width:\"100%\"}}>\r\n            <div className=\"flex row\" style={{ width:\"50%\",justifyContent:'space-between',alignItems:'center', alignSelf:'center',display:'flex',padding:10, borderStyle:'dashed', borderWidth:1,borderRadius:1,borderColor:'#667587'}}>\r\n                <InputNumber\r\n                    bordered={false} precision={fixed}  style={{flex:1,color:Colors.text,backgroundColor:Colors.darkGray,borderColor:Colors.text}}  size=\"large\" min={min} max={max} defaultValue={defaultValue/Math.pow(10,fixed)} stringMode\r\n                    onChange={(num)=>{\r\n                        onChange(num*Math.pow(10,fixed))\r\n                    }}\r\n                />\r\n                <div style={{fontSize:14,color:Colors.text}}>{unit}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(SetModal);\r\n",["189","190"],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Header.js",["191","192","193"],"import React, {useEffect} from 'react';\r\nimport Colors from \"../constants/Colors\";\r\nimport {string} from \"../locales\";\r\nimport {LeftOutlined} from \"@ant-design/icons\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport function HelpText() {\r\n    return(\r\n        <div\r\n            onClick={()=>{alert(\"yardım\")}}\r\n            style={{cursor:'pointer', padding:20, textDecorationLine:'underline',fontWeigh:'bold',fontSize:14}}>{string.yardimaihtiyacinvarmi}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function MoreInfoButton({close=false}) {\r\n    const history = useHistory()\r\n\r\n    if(close){\r\n        return (\r\n            <div>\r\n                <img style={{marginTop:15,width:70,height:75}} src={require(\"../assets/images/secili-dahafazla.png\").default}/>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div\r\n            onClick={()=>{\r\n                history.push(\"more-info\")\r\n            }}\r\n            style={{cursor:'pointer'}}\r\n        >\r\n            <img style={{width:50,height:50}} src={require(\"../assets/images/dahafazla.png\").default}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Header({onBack, left=()=><div/>, title=\"\",right=()=><div/>,}) {\r\n\r\n  return (\r\n    <div className=\"flex row\" style={{ flexDirection:'space-between', alignItems:'center', color:Colors.text, width:'100%', height:60, backgroundColor:Colors.darkGray}}>\r\n        <div className=\"flex-1 left\" >\r\n            {\r\n                onBack?\r\n                    <div onClick={onBack} style={{padding:20,cursor:'pointer'}}>\r\n                        <LeftOutlined  style={{fontSize:25,color:Colors.text}} />\r\n                    </div>:null\r\n            }\r\n            {left()}\r\n        </div>\r\n        <div className=\"flex-1 center\" style={{fontSize:18,fontWeight:\"bold\"}}>{title}</div>\r\n        <div className=\"flex-1 right\"  >\r\n            {right()}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\device.js",["194","195"],"import React, {useEffect, useState} from \"react\"\r\nimport Colors from \"../constants/Colors\";\r\nimport {string} from \"../locales\";\r\nimport Header, {HelpText, MoreInfoButton} from \"../componenets/Header\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {Params} from \"../constants/Params\";\r\nimport {Spin} from \"antd\";\r\nimport {ReloadOutlined} from \"@ant-design/icons\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nconst Device = () => {\r\n    const history = useHistory()\r\n    const ble = IStore.ble;\r\n    const params = Params()\r\n    const usage_params = {\r\n        serial_no : params.serial_no,\r\n        device_version : params.device_version,\r\n        temperature : params.temperature,\r\n        pressure : params.pressure,\r\n        shot_counter : params.shot_counter,\r\n        statuses : params.statuses,\r\n    }\r\n\r\n\r\n    const [data,setData] = useState(ble.getData())\r\n    const [device,setDevice] = useState(\"loading\")\r\n\r\n    useEffect(()=>{\r\n        BLEService.event.on(\"monitor\",_setData)\r\n        controlDevice()\r\n\r\n\r\n        return()=>{\r\n            BLEService.event.removeListener(\"monitor\",_setData)\r\n        }\r\n    },[])\r\n\r\n    function _setData({all_data}) {\r\n        setData({...all_data})\r\n    }\r\n\r\n\r\n    function reload() {\r\n        setData({\r\n            ...data,\r\n            ...{\r\n                serial_no:\"\",\r\n                device_version:\"\",\r\n                temperature:\"\",\r\n                pressure:\"\",\r\n                shot_counter:\"\",\r\n                statuses:{\r\n                    odometer_activity:{\r\n                        title:\"lazermesafeolceraktifligi\",\r\n                        value:null\r\n                    },\r\n                    compass_activity:{\r\n                        title:\"pusulaaktifligi\",\r\n                        value:null\r\n                    },\r\n                    bluetooth_activity:{\r\n                        title:\"bluetoothaktifligi\",\r\n                        value:null\r\n                    },\r\n                    odometer_error:{\r\n                        title:\"lazermesafeolcerhatabilgisi\",\r\n                        value:null\r\n                    },\r\n                    compass_error:{\r\n                        title:\"pusulahatabilgisi\",\r\n                        value:null\r\n                    },\r\n                    bluetooth_error:{\r\n                        title:\"bluetoothhatabilgisi\",\r\n                        value:null\r\n                    },\r\n                    battery_error:{\r\n                        title:\"bataryahatabilgisi\",\r\n                        value:null\r\n                    }\r\n                },\r\n            }\r\n        })\r\n\r\n        controlDevice()\r\n    }\r\n\r\n    async function controlDevice() {\r\n        const device = ble.getDevice()\r\n        setDevice(device)\r\n\r\n        if(device){\r\n            getValues()\r\n        }\r\n    }\r\n\r\n    function getValues() {\r\n\r\n        for(let [key,param] of Object.entries(usage_params)){\r\n            if(param.getHex)\r\n                ble.sendDataToDevice(key,param.getHex).then(()=>{})\r\n        }\r\n    }\r\n\r\n\r\n    if(!device){\r\n        return (\r\n            <div className=\"column contain center\">\r\n                <div style={{ fontSize:20,color:Colors.text,fontWeight:'bold'}}>{string[\"101\"]}</div>\r\n                <div\r\n                    onClick={()=>{\r\n                        history.push(\"select-device\")\r\n                    }}\r\n\r\n                    style={{margin:10, padding:\"10px 15px\", backgroundColor:Colors.primary,borderRadius:10, fontSize:16,color:Colors.text,fontWeight:'bold'}}>{string.simdibaglan}</div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    if(device==\"loading\"){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"center contain column\">\r\n\r\n            <div className=\"center\" style={{width:'100%'}}>\r\n                <Header\r\n                    left={()=><HelpText/>}\r\n                    right={()=><MoreInfoButton/>}\r\n                />\r\n            </div>\r\n            <div className=\"flex row\"  style={{width:'50%', flexDirection:'space-between', alignItems:'center',fontSize:25,fontWeight:'bold',color:Colors.primary}}>\r\n                <div className=\"flex-1\"></div>\r\n                <div className=\"flex-3 center\" style={{textAlign:'center'}}>\r\n                    {string.cihazdurumbilgisi}\r\n                </div>\r\n                <div  className=\"flex-1\" style={{justifyContent:'flex-end'}}>\r\n                    <div style={{padding:20}} onClick={reload}>\r\n                        <ReloadOutlined style={{fontSize:20,color:Colors.text}}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div  className=\"flex column scroll\" style={{width:\"100%\" ,height:\"100vh\"}} >\r\n\r\n                <div  style={{alignSelf:'center', padding:20,margin:20,borderRadius:10, backgroundColor:Colors.secondary, width:'50%'}}>\r\n                    {\r\n                        Object.entries(usage_params).map(([key,{title}])=>{\r\n                            const value = data[key]\r\n\r\n                            return (\r\n                                <div key={key}  style={{margin:5,marginBottom:20,padding:5, borderStyle:'dashed', borderWidth:1,borderRadius:1,borderColor:'#667587'}}>\r\n                                    <div style={{color:Colors.text,padding:10,fontSize:16,fontWeight:'bold'}}>{string[title]}</div>\r\n                                    <hr style={{borderColor:\"#4c5f72\"}}/>\r\n                                    <div>\r\n                                        {\r\n                                            value?\r\n                                                typeof value == \"string\"?\r\n                                                    <div style={{height:50,color:Colors.text,padding:10,fontSize:16,fontWeight:'bold'}}>{value}</div> :\r\n                                                    Object.values(value).map(({title,value},index)=>(\r\n                                                        <div key={index} className=\"flex row\"  style={{justifyContent:'space-between',alignItems:'center'}}>\r\n                                                            <div style={{display:'flex',flex:2,textAlign:'left',color:Colors.text,padding:10,fontSize:16,fontWeight:'bold'}} >{string[title]}</div>\r\n                                                            <div style={{height:40, display:'flex',flex:1,textAlign:'left',color:Colors.text,padding:10,fontSize:14,fontWeight:'bold'}} >{value?string[value]??value:<Spin/>}</div>\r\n                                                        </div>\r\n                                                    ))\r\n                                                :\r\n                                                <div style={{padding:10, height:50,display:'flex', alignItems:'center'}}>\r\n                                                    <Spin />\r\n                                                </div>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    <div style={{height:100}}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(Device)","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\measure.js",["196"],"import React, {useEffect} from \"react\"\r\nimport Colors from \"../constants/Colors\";\r\nimport {string} from \"../locales\";\r\nimport Header, {HelpText, MoreInfoButton} from \"../componenets/Header\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nconst Measure = () => {\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n    },[])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"center contain column\"  style={{paddingBottom:100}}>\r\n\r\n           <div className=\"center\" style={{width:'100%'}}>\r\n               <Header\r\n                   left={()=><HelpText/>}\r\n                   right={()=><MoreInfoButton/>}\r\n               />\r\n           </div>\r\n            <div className=\"center\" style={{flex:1,fontSize:25,fontWeight:'bold',color:Colors.text}}>\r\n               LOGO\r\n           </div>\r\n            <div  className=\"center background-img\" style={{flex:6, width:'100%', backgroundImage:`url(${require(\"../assets/images/measure/bg.png\").default})`}}>\r\n                <img onClick={()=>{history.push(\"compass\")}} src={require(\"../assets/images/measure/button.png\").default} width={250} height={250}/>\r\n            </div>\r\n            <div className=\"flex column center\" style={{flex:1,fontSize:17,fontWeight:'bold',color:Colors.text}}>\r\n                {string.olcumyap}\r\n                <div style={{fontSize:14,fontWeight:\"normal\"}}>\r\n                    {string.olcumyapdesc}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Measure","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\setting.js",["197","198","199"],"import React, {useEffect, useState} from \"react\"\r\nimport Colors from \"../constants/Colors\";\r\nimport {string} from \"../locales\";\r\nimport Header, {HelpText, MoreInfoButton} from \"../componenets/Header\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {Params} from \"../constants/Params\";\r\nimport {InputNumber, Spin} from \"antd\";\r\nimport {ReloadOutlined,RightOutlined} from \"@ant-design/icons\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nconst Setting = () => {\r\n    const history = useHistory()\r\n    const ble = IStore.ble;\r\n    const params = Params()\r\n    const usage_params = {\r\n        distance_unit : params.distance_unit,\r\n        article_mode : params.article_mode,\r\n        language : params.language,\r\n        angle_unit_type : params.angle_unit_type,\r\n        night_vision_mode : params.night_vision_mode,\r\n        device_sleep_time : params.device_sleep_time,\r\n        bluetooth_sleep_time : params.bluetooth_sleep_time,\r\n        bottom_door_lock : params.bottom_door_lock,\r\n        top_door_lock : params.top_door_lock,\r\n        magnetic_declination_angle : params.magnetic_declination_angle\r\n    }\r\n\r\n\r\n    const [data,setData] = useState(ble.getData())\r\n    const [device,setDevice] = useState(\"loading\")\r\n\r\n    useEffect(()=>{\r\n        BLEService.event.on(\"monitor\",_setData)\r\n        controlDevice()\r\n\r\n\r\n        return()=>{\r\n            BLEService.event.removeListener(\"monitor\",_setData)\r\n        }\r\n    },[])\r\n\r\n    function _setData({all_data}) {\r\n        setData({...all_data})\r\n    }\r\n\r\n\r\n    function reload() {\r\n        setData({\r\n            ...data,\r\n            ...{\r\n                distance_unit: \"\",\r\n                article_mode:\"\",\r\n                language:\"\",\r\n                angle_unit_type:\"\",\r\n                night_vision_mode:\"\",\r\n                device_sleep_time:null,\r\n                bluetooth_sleep_time:null,\r\n                bottom_door_lock:0,\r\n                top_door_lock:0,\r\n                magnetic_declination_angle:0\r\n            }\r\n        })\r\n\r\n        controlDevice()\r\n    }\r\n\r\n    async function controlDevice() {\r\n        const device = ble.getDevice()\r\n        setDevice(device)\r\n\r\n        if(device){\r\n            getValues()\r\n        }\r\n    }\r\n\r\n    function getValues() {\r\n\r\n        for(let [key,param] of Object.entries(usage_params)){\r\n            if(param.getHex)\r\n                ble.sendDataToDevice(key,param.getHex).then(()=>{})\r\n        }\r\n    }\r\n\r\n\r\n    if(!device){\r\n        return (\r\n            <div className=\"column contain center\">\r\n                <div style={{ fontSize:20,color:Colors.text,fontWeight:'bold'}}>{string[\"101\"]}</div>\r\n                <div\r\n                    onClick={()=>{\r\n                        history.push(\"select-device\")\r\n                    }}\r\n\r\n                    style={{margin:10, padding:\"10px 15px\", backgroundColor:Colors.primary,borderRadius:10, fontSize:16,color:Colors.text,fontWeight:'bold'}}>{string.simdibaglan}</div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    if(device==\"loading\"){\r\n        return null\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"center contain column\">\r\n\r\n            <div className=\"center\" style={{width:'100%'}}>\r\n                <Header\r\n                    left={()=><HelpText/>}\r\n                    right={()=><MoreInfoButton/>}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"flex row\"  style={{width:'50%', flexDirection:'space-between', alignItems:'center',fontSize:25,fontWeight:'bold',color:Colors.primary}}>\r\n                <div className=\"flex-1\"></div>\r\n                <div className=\"flex-3 center\" style={{textAlign:'center'}}>\r\n                    {string.ayarlar}\r\n                </div>\r\n                <div  className=\"flex-1\" style={{justifyContent:'flex-end'}}>\r\n                    <div style={{padding:20}} onClick={reload}>\r\n                        <ReloadOutlined style={{fontSize:20,color:Colors.text}}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div  className=\"flex column scroll\" style={{width:\"100%\" ,height:\"100vh\"}} >\r\n\r\n                <div  style={{alignSelf:'center', padding:20,margin:20,borderRadius:10, width:'50%'}}>\r\n                    {\r\n                        Object.entries(usage_params).map(([key,{title,setHex=()=>{},options,type,numberParams={}}],index)=>{\r\n                            const value = data[key]\r\n\r\n                            return (\r\n                                <div\r\n                                    key={index} className=\"flex row\" style={{zIndex:999, alignItems:'center',justifyContent:'space-between',padding:12,margin:\"15px 0px\",borderRadius:15,backgroundColor:Colors.secondary}}\r\n                                    onClick={()=>{\r\n\r\n                                        if(value){\r\n\r\n                                            IStore.setSetModal({\r\n                                                visible:true,\r\n                                                title,\r\n                                                value:value?.id??value,\r\n                                                type,\r\n                                                numberParams,\r\n                                                options:options?Object.values(options):null,\r\n                                                onChange:async (id)=>{\r\n                                                    await ble.sendDataToDevice(key,setHex(id))\r\n                                                    return true;\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <div style={{fontSize:18,fontWeight:'bold',color:Colors.text}}>\r\n                                        {string[title]}\r\n                                    </div>\r\n                                    <div className=\"flex row center\" >\r\n                                        {\r\n                                            value?\r\n                                                <div style={{display:'flex',flex:2,textAlign:'left',color:Colors.text,padding:10,fontSize:16,fontWeight:'bold'}} >{value?.value?(string[value?.value]??value?.value):(numberParams?.fixed?(value/(Math.pow(10,numberParams?.fixed))):value) +\"\"+ (numberParams?.unit?(\" \"+numberParams?.unit):\"\")}</div> :\r\n                                                <div style={{display:'flex',flex:2,textAlign:'left',padding:10}} ><Spin/></div>\r\n                                        }\r\n                                        <RightOutlined style={{fontSize:20,color:Colors.text}} />\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    <div style={{height:100}}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(Setting)","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\laserMeter.js",["200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215"],"import React, {useEffect, useRef, useState} from \"react\"\r\nimport GoogleMapReact,{fitBounds} from 'google-map-react';\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {Spin} from \"antd\";\r\nimport Colors from \"../constants/Colors\";\r\nimport {findLocation} from \"../functions/findLocation\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport {info} from \"../functions/toast\";\r\nimport {Params} from \"../constants/Params\";\r\nimport {distanceConversion} from \"../functions/Conversions\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {string} from \"../locales\";\r\nimport {DistanceUnitTypes} from \"../constants/Config\";\r\nimport {ipcRenderer} from \"electron\";\r\n\r\n\r\nlet _compass = false\r\nlet old_heading = 0;\r\nlet _location = {}\r\nlet target_locations = []\r\nlet bound_target = {}\r\nlet maps = null\r\n\r\nconst coords = {\r\n    accuracy: 15.98,\r\n    altitude: 124.65,\r\n    altitudeAccuracy: 3.5,\r\n    heading: null,\r\n    latitude: 0,\r\n    longitude: 0,\r\n    speed: null,\r\n}\r\n\r\nconst LaserMeter = () => {\r\n    const ble = IStore.ble\r\n    const history = useHistory()\r\n    const param = Params()\r\n    const map = useRef()\r\n    const div = useRef()\r\n\r\n\r\n\r\n\r\n    const [location, setLocation] = useState(null);\r\n    const [targets, setTargets] = useState(null);\r\n    const [heading,setHeading] = useState(old_heading)\r\n    const [compass,setCompass] = useState(_compass)\r\n    const [distance_unit, setDistanceUnit] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const target_len = Array.isArray(targets)?targets.length:0\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        try {\r\n            ipcRenderer.send(\"get-location\",null)\r\n            ipcRenderer.on(\"find-location\",getLocation);\r\n\r\n        }catch (e) {\r\n        }\r\n\r\n\r\n        BLEService.event.on(\"distance_and_compass\",_setData)\r\n\r\n        return()=>{\r\n            BLEService.event.removeListener(\"distance_and_compass\",_setData)\r\n            ipcRenderer.removeListener(\"find-location\",getLocation)\r\n        }\r\n    },[])\r\n\r\n    async function getLocation(e,res){\r\n        console.warn(res)\r\n        _location={\r\n            ...coords,\r\n            latitude: parseFloat(res[0].replace(\",\",\".\")),\r\n            longitude: parseFloat(res[1].replace(\",\",\".\")),\r\n            altitude: parseFloat(res[2].replace(\",\",\".\")),\r\n            accuracy: parseFloat(res[3].replace(\",\",\".\")),\r\n            altitudeAccuracy: parseFloat(res[4].replace(\",\",\".\")),\r\n            latitudeDelta: 0.0922,\r\n            longitudeDelta: 0.0421,\r\n        }\r\n        setLocation(_location);\r\n        await ble.sendDataToDevice(\"distance_and_compass\",param.distance_and_compass.getHex)\r\n    }\r\n\r\n\r\n    function _setData({distance,distance_unit,angle_unit,azimuth,elevation,roll}){\r\n\r\n\r\n        if(azimuth==0 || azimuth==180 || azimuth==360)\r\n            azimuth+=0.000001\r\n        azimuth = azimuth%360\r\n\r\n        setLoading(false)\r\n        if(!_location?.latitude)\r\n            return;\r\n\r\n        target_locations=[]\r\n\r\n\r\n\r\n        for(const val of distance){\r\n            let target = findLocation(_location.latitude,_location.longitude,val,azimuth,elevation,angle_unit,distance_unit);\r\n            target_locations.push({\r\n                ...target,\r\n                height:target.y_distance,\r\n                distance:target.x_distance,\r\n                azimuth,\r\n                polyline:maps?new maps.Polyline({\r\n                    path:[{lat: target.latitude, lng: target.longitude},{lat: _location.latitude, lng: _location.longitude}],\r\n                    geodesic: true,\r\n                    strokeColor: Colors.text,\r\n                    strokeOpacity: 0.7,\r\n                    strokeWeight: 4\r\n                }):null\r\n            })\r\n        }\r\n        bound_target = target_locations[distance.indexOf(Math.max(...distance))]\r\n        setTargets([...target_locations])\r\n        setDistanceUnit({unit:distanceConversion(distance,distance_unit,distance_unit).unit,id:distance_unit})\r\n\r\n        try {\r\n            for(const {polyline} of target_locations){\r\n\r\n                polyline.setMap(map.current)\r\n\r\n            }\r\n        }catch (e) {\r\n\r\n        }\r\n\r\n        setTimeout(()=>{\r\n            try {\r\n                if(!_compass && maps){\r\n                    map.current.panTo([...target_locations.map(({latitude,longitude})=>({lat:latitude,lng:longitude})),{lat: _location.latitude, lng: _location.longitude}])\r\n                }\r\n            }catch (e) {}\r\n        },1000)\r\n    }\r\n\r\n    function controlDevice() {\r\n        try {\r\n            for(const {polyline} of target_locations){\r\n                polyline.setMap(null)\r\n            }\r\n        }catch (e) {\r\n\r\n        }\r\n        setTargets([])\r\n        const device = ble.getDevice()\r\n\r\n        if(device){\r\n            findTarget()\r\n\r\n        }else{\r\n            history.push(\"select-device\")\r\n        }\r\n    }\r\n    async function findTarget() {\r\n\r\n        info(\"Atış Yapılıyor...\")\r\n        setLoading(true)\r\n        ipcRenderer.send(\"get-location\",null)\r\n\r\n\r\n    }\r\n\r\n    const Marker = ({my,title }) => {\r\n        if(my){\r\n            return(\r\n                <div className=\"center\" style={{marginTop:-15,marginLeft:-15, width:30,height:30,backgroundColor:Colors.primary,borderRadius:100}}>\r\n                    <div style={{width:15,height:15,backgroundColor:Colors.white,borderRadius:100}}></div>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className=\"flex center column\" style={{marginTop:-40}}>\r\n                <img src={target_len>1?require(\"../assets/images/placeholder-full.png\").default:require(\"../assets/images/placeholder.png\").default} style={{width:40,height:40}} />\r\n                {target_len>1?<div style={{marginBottom:10, position:'absolute', textAlign:'center', fontSize:17,color:Colors.white,fontWeight:'bold'}}>{title}</div>:null}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    if (!location )\r\n        return (\r\n            <div className=\"contain center\">\r\n                <Spin/>\r\n            </div>\r\n        );\r\n\r\n    let center={lat: location.latitude, lng: location.longitude},zoom=15;\r\n\r\n    if(Array.isArray(targets) && targets.length){\r\n\r\n\r\n        const res = fitBounds( bound_target.azimuth>180?{\r\n            ne: {\r\n                lat: location.latitude,\r\n                lng: location.longitude\r\n            },\r\n            sw: {\r\n                lat: bound_target.latitude,\r\n                lng: bound_target.longitude\r\n            }\r\n        }:{\r\n            nw: {\r\n                lat: location.latitude,\r\n                lng: location.longitude\r\n            },\r\n            se: {\r\n                lat: bound_target.latitude,\r\n                lng: bound_target.longitude\r\n            }\r\n        }, {\r\n            width: div?.current?.offsetWidth??0, // Map width in pixels\r\n            height: div?.current?.offsetHeight??0, // Map height in pixels\r\n        })\r\n        center = res.center\r\n        zoom = (res.zoom??10)-0.5\r\n\r\n\r\n    }\r\n\r\n    function ConvertDDToDMS(D){\r\n        return [0|D, 'D ', 0|(D=(D<0?-D:D)+1e-4)%1*60, \"' \", 0|D*60%1*60, '\"'].join('');\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '90vh', width: '100%' }}>\r\n            <div ref={div}  style={{display:'flex', height: '55%', width: '100%' }} >\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyAJ_6n7wqqK8sIk0LV6IqO3OuukpMIbQMM\" }}\r\n                    center={center}\r\n                    zoom={zoom}\r\n                    yesIWantToUseGoogleMapApiInternals\r\n                    onGoogleApiLoaded={({ map:_map,maps:_maps }) => {\r\n                        map.current = _map;\r\n                        maps = _maps\r\n\r\n                    }}\r\n\r\n                    options={{\r\n                        styles: [\r\n                            { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\r\n                            { elementType: \"labels.text.stroke\", stylers: [{ color: \"#242f3e\" }] },\r\n                            { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\r\n                            ...require(\"../assets/styles/googleMap.json\")\r\n                        ]\r\n\r\n                    }}\r\n                >\r\n                    <Marker\r\n                        lat={location.latitude}\r\n                        lng={location.longitude}\r\n                        my\r\n                    />\r\n                    {\r\n                        Array.isArray(targets) && targets.length?\r\n                            targets.map((target,index)=>\r\n                                <Marker\r\n                                    key={index}\r\n                                    lat={target.latitude}\r\n                                    lng={target.longitude}\r\n                                    title={(index+1)}\r\n                                />\r\n                            )\r\n                            :null\r\n                    }\r\n                </GoogleMapReact>\r\n            </div>\r\n            <div className=\"flex-1 center column\" style={{height: '45%', width: '100%'}} >\r\n                {\r\n                    target_len?\r\n                        <div className=\"flex-1 row center\" style={{...target_len==1?{}:{display:'-webkit-box'}, overflowX:'scroll', width:'100%', alignItems:'center',justifyContent:'space-around'}}>\r\n                            {\r\n                                Array.isArray(targets)?targets.map(({latitude,longitude,height,distance},index)=>\r\n                                    <div key={index} style={{padding:10,margin:10}}>\r\n                                        {\r\n                                            target_len>1?\r\n                                                <div style={{textAlign:'center',width:'100%', fontSize:\"1.1rem\",marginBottom:15,color:Colors.white,textDecorationLine:'underline',fontWeight:'500'}}>{\"Hedef \"+(index+1)}</div>:null\r\n                                        }\r\n\r\n                                        <div className=\"flex row\" style={{backgroundColor:Colors.primary+\"20\",borderRadius:10,padding:5,margin:5}}>\r\n                                            <div className=\"flex column\" style={{padding:10,alignItems:'center',justifyContent:'space-around'}}>\r\n                                                <img src={require(\"../assets/images/distance.png\").default} style={{width:\"2.2rem\",height:\"2.2rem\"}}/>\r\n                                                <div style={{fontSize:\"0.9rem\",color:Colors.white,fontWeight:'bold'}}>{parseFloat(distance).toFixed(2)+distance_unit.unit}</div>\r\n                                                <div style={{fontSize:\"0.7rem\",color:Colors.primary}}>{string.mesafe2}</div>\r\n                                            </div>\r\n                                            <div className=\"flex column\" style={{padding:10,alignItems:'center',justifyContent:'space-around'}}>\r\n                                                <img src={require(\"../assets/images/target.png\").default} style={{width:\"2.2rem\",height:\"2.2rem\"}}/>\r\n                                                <div style={{fontSize:\"0.9rem\",color:Colors.white,fontWeight:'bold'}}>{\"±\"+parseFloat(distanceConversion(location.accuracy,DistanceUnitTypes.Metre.id, distance_unit.id).distance).toFixed(2)+distance_unit.unit}</div>\r\n                                                <div style={{fontSize:\"0.7rem\",color:Colors.primary}}>{string.konumdogrulugu}</div>\r\n                                            </div>\r\n                                            <div className=\"flex column\" style={{padding:10,alignItems:'center',justifyContent:'space-around'}}>\r\n                                                <img src={require(\"../assets/images/height.png\").default} style={{width:\"2.2rem\",height:\"2.2rem\"}}/>\r\n                                                <div className=\"flex row center\">\r\n                                                    <div style={{fontSize:\"0.9rem\",color:Colors.white,fontWeight:'bold'}}>{parseFloat(height+(location.altitude??0)).toFixed(2)+distance_unit.unit}</div>\r\n                                                    {location.altitudeAccuracy?<div style={{fontSize:\"0.7rem\",color:Colors.white,fontWeight:'bold',marginLeft:5}}>{\"±\"+parseInt(distanceConversion(location.altitudeAccuracy,DistanceUnitTypes.Metre.id, distance_unit.id).distance)}</div>:null}\r\n                                                </div>\r\n                                                <div style={{fontSize:\"0.7rem\",color:Colors.primary}}>{string.yukseklik}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"flex row\" style={{alignItems:'center',justifyContent:'space-between', width:'100%'}}>\r\n                                            <div className=\"flex-1 column\" style={{padding:10,alignItems:'center',justifyContent:'space-around'}}>\r\n                                                <div className=\"center\" style={{width:\"1.8rem\",height:\"1.8rem\",backgroundColor:Colors.primary,borderRadius:100}}>\r\n                                                    <div style={{width:\"0.9rem\",height:\"0.9rem\",backgroundColor:Colors.white,borderRadius:100}}></div>\r\n                                                </div>\r\n                                                <div style={{fontSize:\"0.8rem\",color:Colors.white,fontWeight:'bold'}}>{ConvertDDToDMS(location.latitude)+\" N\"}</div>\r\n                                                <div style={{fontSize:\"0.8rem\",color:Colors.white,fontWeight:'500'}}>{ConvertDDToDMS(location.longitude)+\" E\"}</div>\r\n                                            </div>\r\n                                            <div className=\"flex-1\" style={{ borderStyle:'dashed', borderWidth:1,borderRadius:1,borderColor:'#667587'}}/>\r\n                                            <div className=\"flex-1 column\" style={{padding:10,alignItems:'center',justifyContent:'space-around'}}>\r\n                                                <img src={require(\"../assets/images/placeholder.png\").default} style={{width:\"1.8rem\",height:\"1.8rem\"}}/>\r\n                                                <div style={{fontSize:\"0.8rem\",color:Colors.white,fontWeight:'500'}}>{ConvertDDToDMS(latitude)+\" N\"}</div>\r\n                                                <div style={{fontSize:\"0.8rem\",color:Colors.white,fontWeight:'500'}}>{ConvertDDToDMS(longitude)+\" E\"}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ):null\r\n                            }\r\n\r\n                        </div>:null\r\n                }\r\n                <div onClick={controlDevice} className=\"flex row center\" style={{padding:\"10px 15px\",margin:10,borderRadius:10,backgroundColor:Colors.primary}}>\r\n                    <div style={{color:Colors.white,fontWeight:'bold',fontSize:14}} >{string.atisyap}</div>\r\n                    <img src={require(\"../assets/images/measure.png\").default} style={{width:25,height:25}} />\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default LaserMeter","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Params.ts",["216"],"import {\r\n  AngleUnitTypes,\r\n  ArticleMode,\r\n  BluetoothSleepTime,\r\n  DeviceSleepTime, DistanceUnitTypes,\r\n  Language,\r\n  NightVisionMode\r\n} from \"./Config\";\r\nimport {string} from \"../locales\";\r\nimport {setModalTypes} from \"../componenets/SetModal\";\r\n\r\ndeclare global {\r\n  interface Array<T> {\r\n    checksum(data:any): Array<T>;\r\n  }\r\n}\r\n\r\n\r\nexport const PROCESS_KEYS={\r\n  DurumBilgisi:0x10,\r\n  Versiyon:0x11,\r\n  Mesafe:0x12,\r\n  CIT:0x13,\r\n  AltKapiLimitiYaz:0x14,\r\n  AltKapiLimiti:0x15,\r\n  UstKapiLimitiYaz:0x16,\r\n  UstKapiLimiti:0x17,\r\n  ArtikilYaz:0x18,\r\n  Artikil:0x19,\r\n  DilYaz:0x1A,\r\n  Dil:0x1B,\r\n  Pusula:0x1C,\r\n  MesafeVePusula:0x1D,\r\n  Sicaklik:0x1E,\r\n  AciOlcuBirimiYaz:0x1F,\r\n  AciOlcuBirimi:0x20,\r\n  MesafeOlcuBirimiYaz:0x21,\r\n  MesafeOlcuBirimi:0x22,\r\n  GeceGorusYaz:0x23,\r\n  GeceGorus:0x24,\r\n  CihazKapanmaSuresiYaz:0x25,\r\n  CihazKapanmaSuresi:0x26,\r\n  BluetoothKapanmaSuresiYaz:0x29,\r\n  BluetoothKapanmaSuresi:0x2A,\r\n  ManyetikSapmaAcisiYaz:0x2B,\r\n  ManyetikSapmaAcisi:0x2C,\r\n  SeriNo:0x51,\r\n  Sayac:0x53,\r\n  Basinc:0x68,\r\n}\r\n\r\nArray.prototype.checksum = function(data:number){\r\n  return checkSum([...this,...intToBytes(data)])\r\n}\r\n\r\n\r\nfunction intToBytes(x:number) {\r\n  return [(x<<16),(x<<24)].map(z=> z>>>24)\r\n}\r\n\r\nfunction checkSum(bytes:any) {\r\n  let checksum = 0x00\r\n  for(let i = 0; i < bytes.length - 1; i++)\r\n    checksum += bytes[i]\r\n\r\n  checksum = ((checksum ^ 0xFF) + 1);\r\n  return [...bytes,checksum]\r\n}\r\n\r\nexport const Params = ()=>{\r\n  return {\r\n    statuses:{\r\n      title:\"cihazdurumbilgisi\",\r\n      getHex:[0xA5,PROCESS_KEYS.DurumBilgisi].checksum(0)\r\n    },\r\n    device_version:{\r\n      title:\"cihazversiyonu\",\r\n      getHex:[0xA5,PROCESS_KEYS.Versiyon].checksum(0)\r\n    },\r\n    bottom_door_lock:{\r\n      title:\"altkapikilidi\",\r\n      type:setModalTypes.Number,\r\n      numberParams:{fixed:0,min:0,max:15000,unit:string.metre2},\r\n      setHex:((number:number)=>[0xA5,PROCESS_KEYS.AltKapiLimitiYaz].checksum(number)),\r\n      getHex:[0xA5,PROCESS_KEYS.AltKapiLimiti].checksum(0)\r\n    },\r\n    top_door_lock:{\r\n      title:\"ustkapikilidi\",\r\n      type:setModalTypes.Number,\r\n      numberParams:{fixed:0,min:0,max:5000,unit:string.metre2},\r\n      setHex:((number:number)=>[0xA5,PROCESS_KEYS.UstKapiLimitiYaz].checksum(number)),\r\n      getHex:[0xA5,PROCESS_KEYS.UstKapiLimiti].checksum(0)\r\n    },\r\n    article_mode:{\r\n      title:\"artikilmodu\",\r\n      options:ArticleMode,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.ArtikilYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.Artikil].checksum(0)\r\n    },\r\n    language:{\r\n      title:\"dilsecimi\",\r\n      options:Language,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.DilYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.Dil].checksum(0)\r\n    },\r\n    distance_and_compass:{\r\n      title:\"mesafevepusula\",\r\n      getHex:[0xA5,PROCESS_KEYS.MesafeVePusula].checksum(0)\r\n    },\r\n    temperature:{\r\n      title:\"sicaklik\",\r\n      getHex:[0xA5,PROCESS_KEYS.Sicaklik].checksum(0)\r\n    },\r\n    angle_unit_type:{\r\n      title:\"aciolcubirimi\",\r\n      options:AngleUnitTypes,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.AciOlcuBirimiYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.AciOlcuBirimi].checksum(0)\r\n    },\r\n    distance_unit:{\r\n      title:\"mesafeolcubirimi\",\r\n      options:DistanceUnitTypes,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.MesafeOlcuBirimiYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.MesafeOlcuBirimi].checksum(0)\r\n    },\r\n    night_vision_mode:{\r\n      title:\"gecegorusmodu\",\r\n      options:NightVisionMode,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.GeceGorusYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.GeceGorus].checksum(0)\r\n    },\r\n    device_sleep_time:{\r\n      title:\"cihazkapanmasuresi\",\r\n      options:DeviceSleepTime,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.CihazKapanmaSuresiYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.CihazKapanmaSuresi].checksum(0)\r\n    },\r\n    bluetooth_sleep_time:{\r\n      title:\"bluetoothzamanasimisuresi\",\r\n      options:BluetoothSleepTime,\r\n      type:setModalTypes.Select,\r\n      setHex:((id:number)=>[0xA5,PROCESS_KEYS.BluetoothKapanmaSuresiYaz].checksum(id)),\r\n      getHex:[0xA5,PROCESS_KEYS.BluetoothKapanmaSuresi].checksum(0)\r\n    },\r\n    magnetic_declination_angle:{\r\n      title:\"manyetiksapmaacisi\",\r\n      type:setModalTypes.Number,\r\n      numberParams:{fixed:1, min:-3599,max:3599,unit:string.derece},\r\n      setHex:((number:number)=>[0xA5,PROCESS_KEYS.ManyetikSapmaAcisiYaz].checksum(number)),\r\n      getHex:[0xA5,PROCESS_KEYS.ManyetikSapmaAcisi].checksum(0)\r\n    },\r\n    serial_no:{\r\n      title:\"serino\",\r\n      getHex:[0xA6,PROCESS_KEYS.SeriNo].checksum(0)\r\n    },\r\n    shot_counter:{\r\n      title:\"atissayaci\",\r\n      getHex:[0xA6,PROCESS_KEYS.Sayac].checksum(0)\r\n    },\r\n    pressure:{\r\n      title:\"basinc\",\r\n      getHex:[0xA6,PROCESS_KEYS.Basinc].checksum(0)\r\n    },\r\n\r\n  }\r\n}","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Config.ts",["217","218"],"import {string} from \"../locales\";\r\nconst shell = require('electron').shell;\r\n\r\nexport const contacts={\r\n  Phone:{\r\n    title:\"telefon\",\r\n    value:\"+0850 360 10 30\",\r\n    onPress:(phone:any)=>{\r\n      shell.openExternal(`tel:${phone}`)\r\n    }\r\n  },\r\n  Email:{\r\n    title:\"email\",\r\n    value:\"aselsan@hs02.kep.tr\",\r\n    onPress:(email:any)=>{\r\n      shell.openExternal(`mailto:${email}`)\r\n    }\r\n  },\r\n  WebSite:{\r\n    title:\"website\",\r\n    value:\"www.aselsan.com.tr\",\r\n    onPress:(web:any)=>{\r\n      shell.openExternal(`https://${web}`)\r\n    }\r\n  },\r\n  Address:{\r\n    title:\"adres\",\r\n    value:\"P.K.1, 06200, Yenimahalle | Ankara, Türkiye\",\r\n    onPress:(address:any)=>{\r\n      shell.openExternal(`http://maps.google.com/?q=1200 ${address}`)\r\n    }\r\n  }\r\n}\r\n\r\nexport const sss = string.dil==\"tr\"?{\r\n  Application:[\r\n    {\r\n      title:\"Uygulama Soru 1\",\r\n      content:\"Cevap 1\"\r\n    },\r\n    {\r\n      title:\"Uygulama Soru 2\",\r\n      content:\"Cevap 2\"\r\n    },\r\n    {\r\n      title:\"Uygulama Soru 3\",\r\n      content:\"Cevap 3\"\r\n    }\r\n  ],\r\n  DEVICE:[\r\n    {\r\n      title:\"Cihaz Soru 1\",\r\n      content:\"Cevap 1\"\r\n    },\r\n    {\r\n      title:\"Cihaz Soru 2\",\r\n      content:\"Cevap 2\"\r\n    },\r\n    {\r\n      title:\"Cihaz Soru 3\",\r\n      content:\"Cevap 3\"\r\n    }\r\n  ]\r\n}:{\r\n  Application:[\r\n    {\r\n      title:\"Application Ask 1\",\r\n      content:\"Answer 1\"\r\n    },\r\n    {\r\n      title:\"Application Ask 2\",\r\n      content:\"Answer 2\"\r\n    },\r\n    {\r\n      title:\"Application Ask 3\",\r\n      content:\"Answer 3\"\r\n    }\r\n  ],\r\n  DEVICE:[\r\n    {\r\n      title:\"Device Ask 1\",\r\n      content:\"Answer 1\"\r\n    },\r\n    {\r\n      title:\"Device Ask 2\",\r\n      content:\"Answer 2\"\r\n    },\r\n    {\r\n      title:\"Device Ask 3\",\r\n      content:\"Answer 3\"\r\n    }\r\n  ]\r\n}\r\n\r\nexport const HomeScreenTypes = {\r\n  MesafeVePusula: {\r\n    id: 0,\r\n    value: \"mesafevepusula\",\r\n  },\r\n  Pusula: {\r\n    id: 1,\r\n    value: \"pusula\",\r\n  },\r\n  Mesafe: {\r\n    id: 2,\r\n    value: \"mesafe\",\r\n  }\r\n};\r\n\r\nexport const DistanceUnitTypes = {\r\n  Metre: {\r\n    id: 0,\r\n    value: \"metre\",\r\n    symbol:\"m\",\r\n    toFeet:((f:number)=>parseFloat((f * 3.281).toString())),\r\n  },\r\n  Feet: {\r\n    id: 1,\r\n    value: \"feet\",\r\n    symbol:\"ft\",\r\n    toMeter:((f:number)=>parseFloat((f / 3.281).toString()))\r\n  }\r\n};\r\n\r\nexport const AngleUnitTypes = {\r\n  Derece: {\r\n    id: 0,\r\n    value: \"derece\",\r\n    symbol:\"°\",\r\n  },\r\n  Milyem6000: {\r\n    id: 1,\r\n    value: \"6000 Milyem\",\r\n    symbol:\"m/\",\r\n    toDegree:((m:number)=>m*(360/6000))\r\n  },\r\n  Milyem6300: {\r\n    id: 2,\r\n    value: \"6300 Milyem\",\r\n    symbol:\"m/\",\r\n    toDegree:((m:number)=>m*(360/6300))\r\n\r\n  },\r\n  Milyem6400: {\r\n    id: 3,\r\n    value: \"6400 Milyem\",\r\n    symbol:\"m/\",\r\n    toDegree:((m:number)=>m*(360/6400))\r\n  }\r\n\r\n};\r\n\r\nexport const OdometerActivityTypes = {\r\n  Kapali: {\r\n    id: \"0\",\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: \"1\",\r\n    value: \"acik\",\r\n  }\r\n};\r\n\r\nexport const CompassActivityTypes = {\r\n  Kapali: {\r\n    id: \"0\",\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: \"1\",\r\n    value: \"acik\",\r\n  }\r\n};\r\n\r\nexport const BluetoothActivityTypes = {\r\n  Kapali: {\r\n    id: \"0\",\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: \"1\",\r\n    value: \"acik\",\r\n  }\r\n};\r\n\r\nexport const OdometerErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  HataYok: {\r\n    id: \"10\",\r\n    value: \"hatayok\",\r\n  },\r\n  HataVar: {\r\n    id: \"11\",\r\n    value: \"hatavar\",\r\n  }\r\n};\r\n\r\nexport const CompassErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  HataYok: {\r\n    id: \"10\",\r\n    value: \"hatayok\",\r\n  },\r\n  HataVar: {\r\n    id: \"11\",\r\n    value: \"hatavar\",\r\n  },\r\n};\r\n\r\nexport const BluetoothErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  HataVar: {\r\n    id: \"10\",\r\n    value: \"hatavar\",\r\n  },\r\n  HataYok: {\r\n    id: \"11\",\r\n    value: \"hatayok\",\r\n  }\r\n};\r\n\r\nexport const BatteryErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  PilGucuIyi: {\r\n    id: \"10\",\r\n    value: \"pilgucuiyi\",\r\n  },\r\n  PilGucuZayif: {\r\n    id: \"11\",\r\n    value: \"pilgucuzayif\",\r\n  }\r\n};\r\n\r\nexport const ArticleMode = {\r\n  Kapali: {\r\n    id: 0,\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: 1,\r\n    value: \"acik\",\r\n  },\r\n  Otomatik: {\r\n    id: 2,\r\n    value: \"otomatik\",\r\n  }\r\n};\r\n\r\n\r\nexport const Language = {\r\n  Turkce: {\r\n    id: 0,\r\n    value: \"turkce\",\r\n  },\r\n  Ingilizce: {\r\n    id: 1,\r\n    value: \"ingilizce\",\r\n  }\r\n};\r\n\r\n\r\nexport const NightVisionMode = {\r\n  Kapali: {\r\n    id: 0,\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: 1,\r\n    value: \"acik\",\r\n  }\r\n};\r\n\r\n\r\nexport const DeviceSleepTime = {\r\n  t0: {\r\n    id: 0,\r\n    value: \"sonsuz\",\r\n  },\r\n  t20: {\r\n    id: 1,\r\n    value: \"20 \"+string.saniye,\r\n  },\r\n  t30: {\r\n    id: 2,\r\n    value: \"30 \"+string.saniye,\r\n  },\r\n  t60: {\r\n    id: 3,\r\n    value: \"1 \"+string.dakika,\r\n  },\r\n  t120: {\r\n    id: 4,\r\n    value: \"2 \"+string.dakika,\r\n  },\r\n  t300: {\r\n    id: 5,\r\n    value: \"5 \"+string.dakika,\r\n  },\r\n  t600: {\r\n    id: 6,\r\n    value: \"10 \"+string.dakika,\r\n  }\r\n};\r\n\r\n\r\nexport const BluetoothSleepTime = {\r\n  t0: {\r\n    id: 0,\r\n    value: \"sonsuz\",\r\n  },\r\n  t20: {\r\n    id: 1,\r\n    value: \"20 \"+string.saniye,\r\n  },\r\n  t30: {\r\n    id: 2,\r\n    value: \"30 \"+string.saniye,\r\n  },\r\n  t60: {\r\n    id: 3,\r\n    value: \"1 \"+string.dakika,\r\n  },\r\n  t120: {\r\n    id: 4,\r\n    value: \"2 \"+string.dakika,\r\n  },\r\n  t300: {\r\n    id: 5,\r\n    value: \"5 \"+string.dakika,\r\n  },\r\n  t600: {\r\n    id: 6,\r\n    value: \"10 \"+string.dakika,\r\n  }\r\n};\r\n\r\nexport function findType(data: any, id: any, key = \"value\") {\r\n  let res: any = \" \";\r\n  try {\r\n    res = Object.values(data).find((e: any) => e.id == id);\r\n    if (key) res = res[key];\r\n  } catch (e) {}\r\n  return res;\r\n}\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Colors.ts",["219"],"export default {\r\n  darkPrimary: \"#002067\",\r\n  primary: \"#024089\",\r\n  secondary: \"#182b3f\",\r\n  white: \"white\",\r\n  black: \"black\",\r\n  gray: \"#8d8b8b\",\r\n  lightGray: \"#f5f5f5\",\r\n  darkGray: \"#1e2227\",\r\n  lightBlack: \"#0f1013\",\r\n  text:\"#a4a5a2\",\r\n  red:\"#B71C1C\",\r\n  green:\"#2E7D32\",\r\n  transparent: \"transparent\",\r\n};\r\n\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\InstantStore.ts",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\MainStore.ts",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\services\\BLEService.ts",["220","221","222","223"],"import {\r\n  AngleUnitTypes,\r\n  DistanceUnitTypes\r\n} from \"../constants/Config\";\r\nimport {error} from \"../functions/toast\";\r\nimport {findData} from \"../functions/findData\";\r\nimport DeviceEventEmitter from \"events\";\r\nimport {HexToBase64} from \"../functions/Buffer\";\r\nimport {IStore} from \"../stores/InstantStore\";\r\nimport {l_moment} from \"../functions/cMoment\";\r\n\r\n\r\n\r\nlet exampleRes:any = {\r\n  serial_no:\"tlEJEQU=\",\r\n  device_version:\"tREEESU=\",\r\n  temperature:\"tR4EBT0=\",\r\n  pressure:\"tmgEBAUFPQ==\",\r\n  shot_counter:\"tlMAAAIBPQ==\",\r\n  statuses:\"tRCjtAQ=\",\r\n  distance_unit:\"tSIAALM=\",\r\n  article_mode:\"tRgAAbM=\",\r\n  distance_and_compass:\"tR0AAIf/AKwQAEQzAAEEABUAGQ==\",\r\n  language:\"tRsAALM=\",\r\n  angle_unit_type:\"tSAAA7M=\",\r\n  night_vision_mode:\"tSQAAbM=\",\r\n  device_sleep_time:\"tSYABbM=\",\r\n  bluetooth_sleep_time:\"tSoABrM=\",\r\n  bottom_door_lock:\"tRUD6LM=\",\r\n  top_door_lock:\"tRcA6LM=\",\r\n  magnetic_declination_angle:\"tSwK87M=\"\r\n}\r\n\r\nclass BLEService {\r\n  private device: any=null;\r\n  public characteristic: any=null;\r\n  private static _this: BLEService;\r\n  private static event: DeviceEventEmitter = new DeviceEventEmitter()\r\n\r\n  private data = {\r\n    serial_no:\"\",\r\n    device_version:\"\",\r\n    temperature:\"\",\r\n    pressure:\"\",\r\n    shot_counter:\"\",\r\n    statuses:{\r\n      odometer_activity:{\r\n        title:\"lazermesafeolceraktifligi\",\r\n        value:null\r\n      },\r\n      compass_activity:{\r\n        title:\"pusulaaktifligi\",\r\n        value:null\r\n      },\r\n      bluetooth_activity:{\r\n        title:\"bluetoothaktifligi\",\r\n        value:null\r\n      },\r\n      odometer_error:{\r\n        title:\"lazermesafeolcerhatabilgisi\",\r\n        value:null\r\n      },\r\n      compass_error:{\r\n        title:\"pusulahatabilgisi\",\r\n        value:null\r\n      },\r\n      bluetooth_error:{\r\n        title:\"bluetoothhatabilgisi\",\r\n        value:null\r\n      },\r\n      battery_error:{\r\n        title:\"bataryahatabilgisi\",\r\n        value:null\r\n      }\r\n    },\r\n    distance_unit:\"\",\r\n    article_mode:\"\",\r\n    distance_and_compass:{\r\n      distance:0,\r\n      distance_unit:DistanceUnitTypes.Metre.id,\r\n      angle_unit:AngleUnitTypes.Derece.id,\r\n      azimuth:0,\r\n      elevation:0,\r\n      roll:0\r\n    },\r\n    language:\"\",\r\n    angle_unit_type:\"\",\r\n    night_vision_mode:\"\",\r\n    device_sleep_time:null,\r\n    bluetooth_sleep_time:null,\r\n    bottom_door_lock:0,\r\n    top_door_lock:0,\r\n    magnetic_declination_angle:0\r\n  }\r\n\r\n\r\n  constructor() {\r\n    BLEService._this = this\r\n  }\r\n\r\n  public setData(new_data:any){\r\n    BLEService._this.data = {...BLEService._this.data,...new_data}\r\n  }\r\n  public getData(){\r\n    return BLEService._this.data\r\n  }\r\n\r\n  public setDevice(device:any){\r\n    BLEService._this.device = device\r\n  }\r\n\r\n  public getDevice(){\r\n    return BLEService._this.device\r\n  }\r\n\r\n  public async sendDataToDevice(_key:string,data:any){\r\n\r\n\r\n    IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"sending...\",})\r\n\r\n    let device = BLEService._this.getDevice();\r\n    if(!device){\r\n      throw \"no_connect1\"\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"success\",})\r\n\r\n      setTimeout(()=>{\r\n        IStore.setLogger({type:\"receive\", key:\"\", data:exampleRes[_key], date:l_moment(), res:\"data received\",})\r\n        const {key,value:res}:any = findData(exampleRes[_key])\r\n        IStore.setLogger({type:\"receive\", key, data:res, date:l_moment(), res:\"success\",})\r\n        BLEService._this.setData({[key]:res})\r\n\r\n        // @ts-ignore\r\n        BLEService.event.emit(\"monitor\",{\r\n          key,\r\n          value:res,\r\n          all_data:BLEService._this.getData()\r\n        })\r\n\r\n        // @ts-ignore\r\n        BLEService.event.emit(key,res)\r\n\r\n        resolve(true)\r\n\r\n      },Math.floor((Math.random()*1000)+2000))\r\n    })\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      device.getPrimaryService('2456e1b9-26e2-8f83-e744-f34f01e9d701')\r\n          .then((service:any) => {\r\n            return service.getCharacteristic('battery_level');\r\n          })\r\n          .then((characteristic:any) => {\r\n            return characteristic.writeValue(HexToBase64(data));\r\n          })\r\n          .then(() => {\r\n            IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"success\",})\r\n            resolve(true)\r\n          })\r\n          .catch((e:any)=>{\r\n            IStore.setLogger({type:\"send\", key:_key, data, date:l_moment(), res:\"error \"+JSON.stringify(e),})\r\n\r\n            reject(e)\r\n            error()\r\n          })\r\n    })\r\n  }\r\n\r\n\r\n  public startListener(){\r\n\r\n    const device = BLEService._this.getDevice()\r\n\r\n    if(!device || device==\"test\")\r\n      throw \"no_connect1\"\r\n\r\n\r\n    device.addEventListener('gattserverdisconnected', ()=>{\r\n      BLEService._this.setDevice(null)\r\n    });\r\n\r\n\r\n    IStore.setLogger({type:\"receive\", key:\"\", data:\"\", date:l_moment(), res:\"listener started\",})\r\n\r\n\r\n    device.getPrimaryService('2456e1b9-26e2-8f83-e744-f34f01e9d701')\r\n        .then((service:any) => {\r\n          return service.getCharacteristic('battery_level');\r\n        })\r\n        .then((_characteristic:any) => {\r\n          BLEService._this.characteristic = _characteristic\r\n          BLEService._this.characteristic.addEventListener('characteristicvaluechanged',BLEService._this.onChangeListener);\r\n        })\r\n        .catch((e:any)=>{\r\n          console.warn(e)\r\n          error(\"Bağlantı Hatası\")\r\n        })\r\n\r\n  }\r\n\r\n  public onChangeListener(event:any){\r\n    let value = event.target.value;\r\n\r\n    IStore.setLogger({type:\"receive\", key:\"\", data:value, date:l_moment(), res:\"data received\",})\r\n\r\n    if(value){\r\n\r\n      const {key,value:res}:any = findData(value)\r\n\r\n      IStore.setLogger({type:\"receive\", key, data:JSON.stringify(res), date:l_moment(), res:\"success\",})\r\n\r\n      BLEService._this.setData({[key]:res})\r\n\r\n      // @ts-ignore\r\n      BLEService.event.emit(\"monitor\",{\r\n        key,\r\n        value:res,\r\n        all_data:BLEService._this.getData()\r\n      })\r\n\r\n      // @ts-ignore\r\n      BLEService.event.emit(key,res)\r\n    }\r\n  }\r\n\r\n  public stopListener(){\r\n    try {\r\n      BLEService._this.characteristic.removeEventListener('characteristicvaluechanged',BLEService._this.onChangeListener);\r\n      BLEService._this.characteristic = null\r\n\r\n    }catch{}\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default BLEService;\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Conversions.tsx",["224","225","226","227","228","229"],"import {AngleUnitTypes, DistanceUnitTypes, findType} from \"../constants/Config\";\r\n\r\n\r\nexport function distanceConversion(distance:number,unit1:any,unit2:any){\r\n    let unit\r\n    try {\r\n        unit1 = findType(DistanceUnitTypes,unit1,\"\")\r\n        unit2 = findType(DistanceUnitTypes,unit2,\"\")\r\n        unit = unit2.symbol\r\n\r\n        if(unit1.id == DistanceUnitTypes.Metre.id && unit2.id == DistanceUnitTypes.Feet.id){\r\n            distance = unit1.toFeet(distance)\r\n        }else if(unit1.id == DistanceUnitTypes.Feet.id && unit2.id == DistanceUnitTypes.Metre.id){\r\n            distance = unit1.toMeter(distance)\r\n        }\r\n    }catch (e) {\r\n        return {distance: 0,unit:\"\"}\r\n    }\r\n\r\n\r\n    return {distance,unit}\r\n}\r\n\r\n\r\nexport function angleConversion(angle:number,unit1:any,unit2:any){\r\n\r\n    let unit\r\n    try {\r\n        unit1 = findType(AngleUnitTypes,unit1,\"\")\r\n        unit2 = findType(AngleUnitTypes,unit2,\"\")\r\n        unit = unit2.symbol\r\n\r\n        if(unit1.id != AngleUnitTypes.Derece.id && unit2.id == AngleUnitTypes.Derece.id){\r\n            angle = unit1.toDegree(angle)\r\n        }\r\n\r\n    }catch (e) {\r\n\r\n        return {angle: 0,unit:\"\"}\r\n    }\r\n\r\n\r\n    return {angle,unit}\r\n}","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\toast.tsx",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findLocation.tsx",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\index.tsx",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\cMoment.tsx",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findData.tsx",["230","231","232"],"import {PROCESS_KEYS} from \"../constants/Params\";\r\nimport {Base64ToHex} from \"./Buffer\";\r\nimport {\r\n  AngleUnitTypes,\r\n  ArticleMode,\r\n  BatteryErrorTypes,\r\n  BluetoothActivityTypes, BluetoothErrorTypes, BluetoothSleepTime,\r\n  CompassActivityTypes, CompassErrorTypes, DeviceSleepTime, DistanceUnitTypes,\r\n  findType, Language, NightVisionMode,\r\n  OdometerActivityTypes,\r\n  OdometerErrorTypes\r\n} from \"../constants/Config\";\r\n\r\n\r\nexport function findData(value:any) {\r\n  try {\r\n    value = Base64ToHex(value)\r\n    const command = value[1]\r\n\r\n\r\n    switch (command) {\r\n      case PROCESS_KEYS.SeriNo:\r\n        return {key:\"serial_no\",value:findSerial(value)}\r\n      case PROCESS_KEYS.Versiyon:\r\n        return {key:\"device_version\",value:findVersion(value)}\r\n      case PROCESS_KEYS.Sicaklik:\r\n        return {key:\"temperature\",value:findTemperature(value)}\r\n      case PROCESS_KEYS.Basinc:\r\n        return {key:\"pressure\",value:findPressure(value)}\r\n      case PROCESS_KEYS.Sayac:\r\n        return {key:\"shot_counter\",value:findShotCounter(value)}\r\n      case PROCESS_KEYS.DurumBilgisi:\r\n        return {key:\"statuses\",value:findStatuses(value)}\r\n      case PROCESS_KEYS.MesafeOlcuBirimi:\r\n      case PROCESS_KEYS.MesafeOlcuBirimiYaz:\r\n        return {key:\"distance_unit\",value:findDistanceUnit(value)}\r\n      case PROCESS_KEYS.Artikil:\r\n      case PROCESS_KEYS.ArtikilYaz:\r\n        return {key:\"article_mode\",value:findArticleMode(value)}\r\n      case PROCESS_KEYS.Dil:\r\n      case PROCESS_KEYS.DilYaz:\r\n        return {key:\"language\",value:findLanguage(value)}\r\n      case PROCESS_KEYS.AciOlcuBirimi:\r\n      case PROCESS_KEYS.AciOlcuBirimiYaz:\r\n        return {key:\"angle_unit_type\",value:findAngleUnit(value)}\r\n      case PROCESS_KEYS.GeceGorus:\r\n      case PROCESS_KEYS.GeceGorusYaz:\r\n        return {key:\"night_vision_mode\",value:findNightVisionMode(value)}\r\n      case PROCESS_KEYS.CihazKapanmaSuresi:\r\n      case PROCESS_KEYS.CihazKapanmaSuresiYaz:\r\n        return {key:\"device_sleep_time\",value:findDeviceSleep(value)}\r\n      case PROCESS_KEYS.BluetoothKapanmaSuresi:\r\n      case PROCESS_KEYS.BluetoothKapanmaSuresiYaz:\r\n        return {key:\"bluetooth_sleep_time\",value:findBluetoothSleep(value)}\r\n      case PROCESS_KEYS.AltKapiLimiti:\r\n      case PROCESS_KEYS.AltKapiLimitiYaz:\r\n        return {key:\"bottom_door_lock\",value:findBottomDoorLock(value)}\r\n      case PROCESS_KEYS.UstKapiLimiti:\r\n      case PROCESS_KEYS.UstKapiLimitiYaz:\r\n        return {key:\"top_door_lock\",value:findTopDoorLock(value)}\r\n      case PROCESS_KEYS.ManyetikSapmaAcisi:\r\n      case PROCESS_KEYS.ManyetikSapmaAcisiYaz:\r\n        return {key:\"magnetic_declination_angle\",value:findMagneticDeclinationAngle(value)}\r\n      case PROCESS_KEYS.MesafeVePusula:\r\n        return {key:\"distance_and_compass\",value:findDistanceAndCompass(value)}\r\n      default:\r\n        return \"Not Found\"\r\n\r\n    }\r\n  }catch (e) {\r\n    console.error(e,value)\r\n    return \"Error Data\"\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction findSerial(value:any) {\r\n  return ((value[2] << 8) | (value[3])).toString()\r\n}\r\n\r\nfunction findVersion(value:any) {\r\n  return value[2]+\".\"+value[3]+\"v\"\r\n}\r\n\r\nfunction findTemperature(value:any) {\r\n  let data =(value[2] << 8) | (value[3])\r\n  if ((data & 0x8000) > 0) {\r\n    data = data - 0x10000;\r\n  }\r\n  return data/100+\"°\"\r\n}\r\n\r\nfunction findPressure(value:any) {\r\n  return ((value[2] << 8) | (value[3])).toString()\r\n}\r\n\r\nfunction findShotCounter(value:any) {\r\n  return ((value[2] << 24) | (value[3] << 16) | (value[4] << 8) | (value[5])).toString()\r\n}\r\n\r\nfunction findStatuses(value:any) {\r\n\r\n  let status1_binary = value[2].toString(2)\r\n  let status2_binary = value[3].toString(2)\r\n\r\n  return {\r\n    odometer_activity:{\r\n      title:\"lazermesafeolceraktifligi\",\r\n      value:findType(OdometerActivityTypes,status1_binary[2])\r\n    },\r\n    compass_activity:{\r\n      title:\"pusulaaktifligi\",\r\n      value:findType(CompassActivityTypes,status1_binary[1])\r\n    },\r\n    bluetooth_activity:{\r\n      title:\"bluetoothaktifligi\",\r\n      value:findType(BluetoothActivityTypes,status1_binary[0])\r\n    },\r\n    odometer_error:{\r\n      title:\"lazermesafeolcerhatabilgisi\",\r\n      value:findType(OdometerErrorTypes,status2_binary[6]+\"\"+status2_binary[7])\r\n    },\r\n    compass_error:{\r\n      title:\"pusulahatabilgisi\",\r\n      value:findType(CompassErrorTypes,status2_binary[4]+\"\"+status2_binary[5])\r\n    },\r\n    bluetooth_error:{\r\n      title:\"bluetoothhatabilgisi\",\r\n      value:findType(BluetoothErrorTypes,status2_binary[2]+\"\"+status2_binary[3])\r\n    },\r\n    battery_error:{\r\n      title:\"bataryahatabilgisi\",\r\n      value:findType(BatteryErrorTypes,status2_binary[0]+\"\"+status2_binary[1])\r\n    },\r\n  }\r\n}\r\n\r\nfunction findDistanceUnit(value:any) {\r\n  return findType(DistanceUnitTypes,value[3],\"\")\r\n}\r\n\r\nfunction findArticleMode(value:any) {\r\n  return findType(ArticleMode,value[3],\"\")\r\n}\r\n\r\nfunction findLanguage(value:any) {\r\n  return findType(Language,value[3],\"\")\r\n}\r\n\r\nfunction findAngleUnit(value:any) {\r\n  return findType(AngleUnitTypes,value[3],\"\")\r\n}\r\n\r\nfunction findNightVisionMode(value:any) {\r\n  return findType(NightVisionMode,value[3],\"\")\r\n}\r\n\r\nfunction findDeviceSleep(value:any) {\r\n  return findType(DeviceSleepTime,value[3],\"\")\r\n}\r\n\r\nfunction findBluetoothSleep(value:any) {\r\n  return findType(BluetoothSleepTime,value[3],\"\")\r\n}\r\n\r\nfunction findBottomDoorLock(value:any) {\r\n  return ((value[2] << 8) | (value[3])).toString()\r\n}\r\n\r\nfunction findTopDoorLock(value:any) {\r\n  return ((value[2] << 8) | (value[3])).toString()\r\n}\r\n\r\n\r\nfunction findMagneticDeclinationAngle(value:any) {\r\n  let data = (value[2] << 8) | (value[3]);\r\n\r\n  if ((data & 0x8000) > 0) {\r\n    data = data - 0x10000;\r\n  }\r\n\r\n  return data.toString()\r\n}\r\n\r\nfunction findDistanceAndCompass(value:any) {\r\n\r\n  const distance_unit = findType(DistanceUnitTypes,value[2],\"id\")\r\n  const distance1 = ((value[3] << 16) | (value[4] << 8)  | value[5])/100;\r\n  const distance2 = ((value[6] << 16) | (value[7] << 8)  | value[8])/100;\r\n  const distance3 = ((value[9] << 16) | (value[10] << 8)  | value[11])/100;\r\n  const distance = [...distance1?[distance1]:[],...distance2?[distance2]:[],...distance3?[distance3]:[]]\r\n\r\n  const angle_unit = findType(AngleUnitTypes,value[12],\"id\")\r\n  let azimuth = (value[13] << 8)  | (value[14]);\r\n  let elevation = (value[15] << 8)  | (value[16]);\r\n  let roll = (value[17] << 8)  | (value[18]);\r\n\r\n  if ((azimuth & 0x8000) > 0) {\r\n    azimuth = azimuth - 0x10000;\r\n  }\r\n  azimuth = azimuth/(angle_unit==AngleUnitTypes.Derece.id?10:1)\r\n\r\n  if ((elevation & 0x8000) > 0) {\r\n    elevation = elevation - 0x10000;\r\n  }\r\n  elevation = elevation/(angle_unit==AngleUnitTypes.Derece.id?10:1)\r\n\r\n  if ((roll & 0x8000) > 0) {\r\n    roll = roll - 0x10000;\r\n  }\r\n  roll = roll/(angle_unit==AngleUnitTypes.Derece.id?10:1)\r\n\r\n\r\n\r\n\r\n  return {\r\n    distance,\r\n    distance_unit,\r\n    angle_unit,\r\n    azimuth,\r\n    elevation,\r\n    roll\r\n  }\r\n}\r\n\r\n\r\n","C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Buffer.tsx",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\tr.tsx",[],"C:\\Users\\cyberistanbul\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\en.tsx",[],["233","234"],{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":22,"column":7,"nodeType":"241","endLine":22,"endColumn":9,"suggestions":"242"},{"ruleId":"243","severity":1,"message":"244","line":3,"column":9,"nodeType":"245","messageId":"246","endLine":3,"endColumn":15},{"ruleId":"243","severity":1,"message":"247","line":4,"column":17,"nodeType":"245","messageId":"246","endLine":4,"endColumn":25},{"ruleId":"243","severity":1,"message":"248","line":4,"column":27,"nodeType":"245","messageId":"246","endLine":4,"endColumn":35},{"ruleId":"243","severity":1,"message":"249","line":1,"column":16,"nodeType":"245","messageId":"246","endLine":1,"endColumn":25},{"ruleId":"243","severity":1,"message":"250","line":1,"column":27,"nodeType":"245","messageId":"246","endLine":1,"endColumn":35},{"ruleId":"243","severity":1,"message":"251","line":5,"column":10,"nodeType":"245","messageId":"246","endLine":5,"endColumn":16},{"ruleId":"243","severity":1,"message":"252","line":14,"column":10,"nodeType":"245","messageId":"246","endLine":14,"endColumn":21},{"ruleId":"253","severity":1,"message":"254","line":27,"column":25,"nodeType":"255","messageId":"256","endLine":27,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":29,"column":29,"nodeType":"255","messageId":"256","endLine":29,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":31,"column":33,"nodeType":"255","messageId":"256","endLine":31,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":33,"column":37,"nodeType":"255","messageId":"256","endLine":33,"endColumn":39},{"ruleId":"257","severity":1,"message":"258","line":68,"column":90,"nodeType":"259","endLine":68,"endColumn":220},{"ruleId":"253","severity":1,"message":"254","line":68,"column":160,"nodeType":"255","messageId":"256","endLine":68,"endColumn":162},{"ruleId":"257","severity":1,"message":"258","line":69,"column":90,"nodeType":"259","endLine":69,"endColumn":222},{"ruleId":"253","severity":1,"message":"254","line":69,"column":163,"nodeType":"255","messageId":"256","endLine":69,"endColumn":165},{"ruleId":"257","severity":1,"message":"258","line":70,"column":105,"nodeType":"259","endLine":70,"endColumn":252},{"ruleId":"253","severity":1,"message":"254","line":70,"column":185,"nodeType":"255","messageId":"256","endLine":70,"endColumn":187},{"ruleId":"257","severity":1,"message":"258","line":71,"column":100,"nodeType":"259","endLine":71,"endColumn":231},{"ruleId":"253","severity":1,"message":"254","line":71,"column":172,"nodeType":"255","messageId":"256","endLine":71,"endColumn":174},{"ruleId":"243","severity":1,"message":"249","line":1,"column":16,"nodeType":"245","messageId":"246","endLine":1,"endColumn":25},{"ruleId":"243","severity":1,"message":"247","line":4,"column":17,"nodeType":"245","messageId":"246","endLine":4,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":45,"column":33,"nodeType":"259","endLine":45,"endColumn":124},{"ruleId":"243","severity":1,"message":"260","line":3,"column":9,"nodeType":"245","messageId":"246","endLine":3,"endColumn":12},{"ruleId":"243","severity":1,"message":"261","line":7,"column":25,"nodeType":"245","messageId":"246","endLine":7,"endColumn":40},{"ruleId":"243","severity":1,"message":"262","line":17,"column":31,"nodeType":"245","messageId":"246","endLine":17,"endColumn":40},{"ruleId":"239","severity":1,"message":"263","line":57,"column":7,"nodeType":"241","endLine":57,"endColumn":9,"suggestions":"264"},{"ruleId":"253","severity":1,"message":"254","line":106,"column":177,"nodeType":"255","messageId":"256","endLine":106,"endColumn":179},{"ruleId":"253","severity":1,"message":"254","line":106,"column":186,"nodeType":"255","messageId":"256","endLine":106,"endColumn":188},{"ruleId":"253","severity":1,"message":"254","line":106,"column":195,"nodeType":"255","messageId":"256","endLine":106,"endColumn":197},{"ruleId":"257","severity":1,"message":"258","line":129,"column":31,"nodeType":"259","endLine":129,"endColumn":183},{"ruleId":"257","severity":1,"message":"258","line":165,"column":47,"nodeType":"259","endLine":165,"endColumn":142},{"ruleId":"257","severity":1,"message":"258","line":180,"column":31,"nodeType":"259","endLine":180,"endColumn":183},{"ruleId":"257","severity":1,"message":"258","line":213,"column":47,"nodeType":"259","endLine":213,"endColumn":142},{"ruleId":"257","severity":1,"message":"258","line":250,"column":47,"nodeType":"259","endLine":250,"endColumn":142},{"ruleId":"243","severity":1,"message":"249","line":1,"column":16,"nodeType":"245","messageId":"246","endLine":1,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":57,"column":37,"nodeType":"259","endLine":57,"endColumn":86},{"ruleId":"253","severity":1,"message":"254","line":72,"column":29,"nodeType":"255","messageId":"256","endLine":72,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":81,"column":33,"nodeType":"255","messageId":"256","endLine":81,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":111,"column":40,"nodeType":"255","messageId":"256","endLine":111,"endColumn":42},{"ruleId":"253","severity":1,"message":"265","line":122,"column":43,"nodeType":"255","messageId":"256","endLine":122,"endColumn":45},{"ruleId":"253","severity":1,"message":"265","line":129,"column":43,"nodeType":"255","messageId":"256","endLine":129,"endColumn":45},{"ruleId":"253","severity":1,"message":"254","line":172,"column":125,"nodeType":"255","messageId":"256","endLine":172,"endColumn":127},{"ruleId":"253","severity":1,"message":"254","line":174,"column":45,"nodeType":"255","messageId":"256","endLine":174,"endColumn":47},{"ruleId":"253","severity":1,"message":"254","line":175,"column":109,"nodeType":"255","messageId":"256","endLine":175,"endColumn":111},{"ruleId":"253","severity":1,"message":"254","line":176,"column":109,"nodeType":"255","messageId":"256","endLine":176,"endColumn":111},{"ruleId":"253","severity":1,"message":"254","line":196,"column":20,"nodeType":"255","messageId":"256","endLine":196,"endColumn":22},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"243","severity":1,"message":"249","line":1,"column":16,"nodeType":"245","messageId":"246","endLine":1,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":23,"column":17,"nodeType":"259","endLine":23,"endColumn":128},{"ruleId":"257","severity":1,"message":"258","line":34,"column":13,"nodeType":"259","endLine":34,"endColumn":104},{"ruleId":"239","severity":1,"message":"266","line":39,"column":7,"nodeType":"241","endLine":39,"endColumn":9,"suggestions":"267"},{"ruleId":"253","severity":1,"message":"254","line":124,"column":14,"nodeType":"255","messageId":"256","endLine":124,"endColumn":16},{"ruleId":"257","severity":1,"message":"258","line":29,"column":17,"nodeType":"259","endLine":29,"endColumn":149},{"ruleId":"243","severity":1,"message":"268","line":7,"column":9,"nodeType":"245","messageId":"246","endLine":7,"endColumn":20},{"ruleId":"239","severity":1,"message":"266","line":43,"column":7,"nodeType":"241","endLine":43,"endColumn":9,"suggestions":"269"},{"ruleId":"253","severity":1,"message":"254","line":103,"column":14,"nodeType":"255","messageId":"256","endLine":103,"endColumn":16},{"ruleId":"243","severity":1,"message":"270","line":46,"column":12,"nodeType":"245","messageId":"246","endLine":46,"endColumn":19},{"ruleId":"243","severity":1,"message":"271","line":46,"column":20,"nodeType":"245","messageId":"246","endLine":46,"endColumn":30},{"ruleId":"243","severity":1,"message":"272","line":47,"column":12,"nodeType":"245","messageId":"246","endLine":47,"endColumn":19},{"ruleId":"243","severity":1,"message":"273","line":47,"column":20,"nodeType":"245","messageId":"246","endLine":47,"endColumn":30},{"ruleId":"243","severity":1,"message":"274","line":49,"column":12,"nodeType":"245","messageId":"246","endLine":49,"endColumn":19},{"ruleId":"239","severity":1,"message":"275","line":70,"column":7,"nodeType":"241","endLine":70,"endColumn":9,"suggestions":"276"},{"ruleId":"253","severity":1,"message":"254","line":92,"column":19,"nodeType":"255","messageId":"256","endLine":92,"endColumn":21},{"ruleId":"253","severity":1,"message":"254","line":92,"column":33,"nodeType":"255","messageId":"256","endLine":92,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":92,"column":49,"nodeType":"255","messageId":"256","endLine":92,"endColumn":51},{"ruleId":"257","severity":1,"message":"258","line":180,"column":17,"nodeType":"259","endLine":180,"endColumn":181},{"ruleId":"253","severity":1,"message":"254","line":276,"column":81,"nodeType":"255","messageId":"256","endLine":276,"endColumn":83},{"ruleId":"257","severity":1,"message":"258","line":287,"column":49,"nodeType":"259","endLine":287,"endColumn":151},{"ruleId":"257","severity":1,"message":"258","line":292,"column":49,"nodeType":"259","endLine":292,"endColumn":149},{"ruleId":"257","severity":1,"message":"258","line":297,"column":49,"nodeType":"259","endLine":297,"endColumn":149},{"ruleId":"257","severity":1,"message":"258","line":315,"column":49,"nodeType":"259","endLine":315,"endColumn":154},{"ruleId":"257","severity":1,"message":"258","line":328,"column":21,"nodeType":"259","endLine":328,"endColumn":111},{"ruleId":"277","severity":1,"message":"278","line":52,"column":1,"nodeType":"279","messageId":"256","endLine":54,"endColumn":2},{"ruleId":"253","severity":1,"message":"254","line":35,"column":30,"nodeType":"255","messageId":"256","endLine":35,"endColumn":32},{"ruleId":"253","severity":1,"message":"254","line":368,"column":53,"nodeType":"255","messageId":"256","endLine":368,"endColumn":55},{"ruleId":"280","severity":1,"message":"281","line":1,"column":1,"nodeType":"282","endLine":15,"endColumn":3},{"ruleId":"283","severity":1,"message":"284","line":123,"column":7,"nodeType":"285","messageId":"286","endLine":123,"endColumn":26},{"ruleId":"287","severity":1,"message":"288","line":150,"column":5,"nodeType":"289","messageId":"290","endLine":169,"endColumn":7},{"ruleId":"253","severity":1,"message":"254","line":177,"column":25,"nodeType":"255","messageId":"256","endLine":177,"endColumn":27},{"ruleId":"283","severity":1,"message":"284","line":178,"column":7,"nodeType":"285","messageId":"286","endLine":178,"endColumn":26},{"ruleId":"253","severity":1,"message":"254","line":11,"column":21,"nodeType":"255","messageId":"256","endLine":11,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":11,"column":63,"nodeType":"255","messageId":"256","endLine":11,"endColumn":65},{"ruleId":"253","severity":1,"message":"254","line":13,"column":27,"nodeType":"255","messageId":"256","endLine":13,"endColumn":29},{"ruleId":"253","severity":1,"message":"254","line":13,"column":68,"nodeType":"255","messageId":"256","endLine":13,"endColumn":70},{"ruleId":"253","severity":1,"message":"265","line":33,"column":21,"nodeType":"255","messageId":"256","endLine":33,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":33,"column":61,"nodeType":"255","messageId":"256","endLine":33,"endColumn":63},{"ruleId":"253","severity":1,"message":"254","line":202,"column":32,"nodeType":"255","messageId":"256","endLine":202,"endColumn":34},{"ruleId":"253","severity":1,"message":"254","line":207,"column":36,"nodeType":"255","messageId":"256","endLine":207,"endColumn":38},{"ruleId":"253","severity":1,"message":"254","line":212,"column":26,"nodeType":"255","messageId":"256","endLine":212,"endColumn":28},{"ruleId":"235","replacedBy":"291"},{"ruleId":"237","replacedBy":"292"},"no-native-reassign",["293"],"no-negated-in-lhs",["294"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'controlData'. Either include it or remove the dependency array.","ArrayExpression",["295"],"no-unused-vars","'string' is defined but never used.","Identifier","unusedVar","'HelpText' is defined but never used.","'MoreInfo' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'styled' is defined but never used.","'ipcRenderer' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Col' is defined but never used.","'HomeScreenTypes' is defined but never used.","'useSwiper' is defined but never used.","React Hook useEffect has missing dependencies: '_setData', 'auto', and 'controlDevice'. Either include them or remove the dependency array.",["296"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'controlDevice'. Either include it or remove the dependency array.",["297"],"'InputNumber' is defined but never used.",["298"],"'heading' is assigned a value but never used.","'setHeading' is assigned a value but never used.","'compass' is assigned a value but never used.","'setCompass' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getLocation'. Either include it or remove the dependency array.",["299"],"no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode",["293"],["294"],"no-global-assign","no-unsafe-negation",{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"304","fix":"306"},{"desc":"307","fix":"308"},"Update the dependencies array to be: [controlData]",{"range":"309","text":"310"},"Update the dependencies array to be: [_setData, auto, controlDevice]",{"range":"311","text":"312"},"Update the dependencies array to be: [controlDevice]",{"range":"313","text":"314"},{"range":"315","text":"314"},"Update the dependencies array to be: [getLocation]",{"range":"316","text":"317"},[539,541],"[controlData]",[1857,1859],"[_setData, auto, controlDevice]",[1230,1232],"[controlDevice]",[1531,1533],[1986,1988],"[getLocation]"]