[{"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\index.js":"1","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\App.js":"2","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\tabs.js":"3","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\selectDevice.js":"4","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\compass.js":"5","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Loading.js":"6","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\slide.js":"7","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\moreInfo.js":"8","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\SetModal.tsx":"9","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\measure.js":"10","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\device.js":"11","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\laserMeter.js":"12","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\setting.js":"13","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Header.js":"14","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Params.ts":"15","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\MainStore.ts":"16","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Config.ts":"17","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Colors.ts":"18","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\InstantStore.ts":"19","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\services\\BLEService.ts":"20","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Conversions.tsx":"21","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\toast.tsx":"22","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findLocation.tsx":"23","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\services\\QueueService.ts":"24","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\index.ts":"25","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\AES.tsx":"26","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\tr.ts":"27","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\en.ts":"28","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findData.tsx":"29","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Buffer.tsx":"30"},{"size":1604,"mtime":1671101187410,"results":"31","hashOfConfig":"32"},{"size":1179,"mtime":1671101187372,"results":"33","hashOfConfig":"32"},{"size":4156,"mtime":1671101187425,"results":"34","hashOfConfig":"32"},{"size":3948,"mtime":1671101187425,"results":"35","hashOfConfig":"32"},{"size":16509,"mtime":1671101187410,"results":"36","hashOfConfig":"32"},{"size":963,"mtime":1671101187410,"results":"37","hashOfConfig":"32"},{"size":3820,"mtime":1671101187425,"results":"38","hashOfConfig":"32"},{"size":8751,"mtime":1671101187425,"results":"39","hashOfConfig":"32"},{"size":9791,"mtime":1671101187410,"results":"40","hashOfConfig":"32"},{"size":1713,"mtime":1671110620723,"results":"41","hashOfConfig":"32"},{"size":8290,"mtime":1671101187410,"results":"42","hashOfConfig":"32"},{"size":26523,"mtime":1671103181516,"results":"43","hashOfConfig":"32"},{"size":11676,"mtime":1671102479314,"results":"44","hashOfConfig":"32"},{"size":2859,"mtime":1671101187410,"results":"45","hashOfConfig":"32"},{"size":8532,"mtime":1671101187410,"results":"46","hashOfConfig":"32"},{"size":850,"mtime":1671101187425,"results":"47","hashOfConfig":"32"},{"size":6741,"mtime":1671101187410,"results":"48","hashOfConfig":"32"},{"size":348,"mtime":1671101187410,"results":"49","hashOfConfig":"32"},{"size":1738,"mtime":1671103295158,"results":"50","hashOfConfig":"32"},{"size":4768,"mtime":1671101187425,"results":"51","hashOfConfig":"32"},{"size":1193,"mtime":1671101187410,"results":"52","hashOfConfig":"32"},{"size":535,"mtime":1671101187410,"results":"53","hashOfConfig":"32"},{"size":2238,"mtime":1671101187410,"results":"54","hashOfConfig":"32"},{"size":7949,"mtime":1671101187425,"results":"55","hashOfConfig":"32"},{"size":522,"mtime":1671101187410,"results":"56","hashOfConfig":"32"},{"size":671,"mtime":1671101187410,"results":"57","hashOfConfig":"32"},{"size":5559,"mtime":1671101187410,"results":"58","hashOfConfig":"32"},{"size":5356,"mtime":1671101187410,"results":"59","hashOfConfig":"32"},{"size":9244,"mtime":1671101187410,"results":"60","hashOfConfig":"32"},{"size":222,"mtime":1671101187410,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1ni7cjq",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"89"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"89"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"89"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"89"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"89"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"89"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"89"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\index.js",[],["143","144"],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\App.js",["145"],"import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Colors from \"./constants/Colors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Spin } from \"antd\";\r\nimport { IStore } from \"./stores/InstantStore\";\r\nimport { MStore } from \"./stores/MainStore\";\r\nimport useStayAwake from \"use-stay-awake\";\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n  const device = useStayAwake();\r\n\r\n  const ble = IStore.ble;\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      controlData();\r\n    }, 1000);\r\n  }, []);\r\n\r\n  function controlData() {\r\n    if (MStore.settings.lock_screen) {\r\n      device.preventSleeping();\r\n    } else {\r\n      device.allowSleeping();\r\n    }\r\n\r\n    if (MStore.first) {\r\n      history.push(\"slide\");\r\n    } else {\r\n      let device = ble.getDevice();\r\n\r\n      if (device) {\r\n        history.push(\"tabs\");\r\n      } else {\r\n        history.push(\"select-device\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"contain\"\r\n      style={{\r\n        backgroundColor: Colors.darkGray,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Spin />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\tabs.js",["146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import React, { useEffect, useState } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport BottomNavigation from \"@mui/material/BottomNavigation\";\r\nimport BottomNavigationAction from \"@mui/material/BottomNavigationAction\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport { string } from \"../locales\";\r\nimport Measure from \"./measure\";\r\nimport Device from \"./device\";\r\nimport LaserMeter from \"./laserMeter\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Setting from \"./setting\";\r\nimport { ipcRenderer } from \"electron\";\r\n\r\nconst Tabs = () => {\r\n  const page = IStore.tab_index;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: Colors.darkGray,\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <div>\r\n        {page == \"olcum\" ? (\r\n          <Measure />\r\n        ) : page == \"cihaz\" ? (\r\n          <Device />\r\n        ) : page == \"yapilandirici\" ? (\r\n          <Setting />\r\n        ) : page == \"lazer\" ? (\r\n          <LaserMeter />\r\n        ) : null}\r\n      </div>\r\n      <div style={{ position: \"fixed\", bottom: 0, left: 0, right: 0 }}>\r\n        <BottomNavigation\r\n          showLabels\r\n          value={page}\r\n          sx={{\r\n            p: 5,\r\n            bgcolor: Colors.primary,\r\n            \"& .MuiBottomNavigationAction-label\": {\r\n              filter: \"opacity(0.4)\",\r\n              color: Colors.white,\r\n              fontSize: (theme) => theme.typography.caption,\r\n              transition: \"none\",\r\n              fontWeight: \"bold\",\r\n              lineHeight: \"20px\",\r\n            },\r\n            \"& .Mui-selected\": {\r\n              \"& .MuiBottomNavigationAction-label\": {\r\n                filter: \"none\",\r\n                color: Colors.white,\r\n                fontSize: (theme) => theme.typography.caption,\r\n                transition: \"none\",\r\n                fontWeight: \"bold\",\r\n                lineHeight: \"20px\",\r\n              },\r\n            },\r\n          }}\r\n          onChange={(event, newValue) => {\r\n            IStore.setTabIndex(newValue);\r\n          }}\r\n        >\r\n          <BottomNavigationAction\r\n            className=\"btn\"\r\n            value={\"olcum\"}\r\n            label={string.olcum2}\r\n            icon={\r\n              <img\r\n                src={require(\"../assets/images/goz.png\").default}\r\n                style={{\r\n                  ...(page == \"olcum\" ? {} : { filter: \"opacity(0.4)\" }),\r\n                  width: 30,\r\n                  height: 30,\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <BottomNavigationAction\r\n            className=\"btn\"\r\n            value={\"cihaz\"}\r\n            label={string.cihaz2}\r\n            icon={\r\n              <img\r\n                src={require(\"../assets/images/cihaz2.png\").default}\r\n                style={{\r\n                  ...(page == \"cihaz\" ? {} : { filter: \"opacity(0.4)\" }),\r\n                  width: 30,\r\n                  height: 30,\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <BottomNavigationAction\r\n            className=\"btn\"\r\n            value={\"yapilandirici\"}\r\n            label={string.yapilandirici}\r\n            icon={\r\n              <img\r\n                src={require(\"../assets/images/yapilandirici.png\").default}\r\n                style={{\r\n                  ...(page == \"yapilandirici\"\r\n                    ? {}\r\n                    : { filter: \"opacity(0.4)\" }),\r\n                  width: 30,\r\n                  height: 30,\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <BottomNavigationAction\r\n            className=\"btn\"\r\n            value={\"lazer\"}\r\n            label={string.lazermesafeolcer}\r\n            icon={\r\n              <img\r\n                src={require(\"../assets/images/lazer.png\").default}\r\n                style={{\r\n                  ...(page == \"lazer\" ? {} : { filter: \"opacity(0.4)\" }),\r\n                  width: 30,\r\n                  height: 30,\r\n                }}\r\n              />\r\n            }\r\n          />\r\n        </BottomNavigation>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Tabs);\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\selectDevice.js",["162","163"],"import React, { useEffect, useState } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { string } from \"../locales\";\r\nimport Header, { HelpText, MoreInfo } from \"../componenets/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { error } from \"../functions/toast\";\r\nimport { Spin } from \"antd\";\r\nimport { Params } from \"../constants/Params\";\r\nconst { ipcRenderer } = require(\"electron\");\r\n\r\nconst SelectDevice = () => {\r\n  const ble = IStore.ble;\r\n  const history = useHistory();\r\n  const param = Params();\r\n\r\n  const [devices, setDevices] = useState([]);\r\n  const [isSearchStarted, setIsSearchStarted] = useState(false);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  function scan() {\r\n    setIsSearchStarted(true);\r\n    navigator.bluetooth\r\n      .requestDevice({\r\n        filters: [{ namePrefix: \"ALRF\" }],\r\n        optionalServices: [\"2456e1b9-26e2-8f83-e744-f34f01e9d701\"],\r\n      })\r\n      .then((device) => {\r\n        device.gatt\r\n          .connect()\r\n          .then((service) => {\r\n            IStore.setLoading(false);\r\n            ble.setDevice(service);\r\n            ble.startListener();\r\n\r\n            IStore.navigation = history;\r\n\r\n            ble.sendDataToDevice(\r\n              param.kimlikdogrulama.title,\r\n              param.kimlikdogrulama.getHex\r\n            );\r\n          })\r\n          .catch((e) => {\r\n            IStore.setLoading(false);\r\n            setDevices([]);\r\n            // console.warn(e);\r\n            error(\r\n              string[\"baglantihatasi\"],\r\n              string[\"baglantibasarisizaciklama\"]\r\n            );\r\n          });\r\n      });\r\n\r\n    ipcRenderer.on(\"devices\", (event, deviceList) => {\r\n      if (Array.isArray(deviceList) && deviceList.length) {\r\n        setIsSearchStarted(false);\r\n        setDevices([...deviceList]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"center contain column\">\r\n      <div className=\"center\" style={{ width: \"100%\" }}>\r\n        <Header\r\n          title=\"Cihazlar\"\r\n          onBack={() => {\r\n            history.goBack();\r\n          }}\r\n        />\r\n      </div>\r\n      {/*<div\r\n        className=\"button\"\r\n        onClick={() => {\r\n          IStore.setLoading(false);\r\n          ble.setDevice(\"test\");\r\n          history.goBack();\r\n        }}\r\n        style={{ alignSelf: \"center\" }}\r\n      >\r\n        Demo Verileri Kullan\r\n      </div>*/}\r\n\r\n      <div\r\n        className={\"flex contain column scroll\"}\r\n        style={{ backgroundColor: Colors.darkGray }}\r\n      >\r\n        {devices.length ? (\r\n          <div className=\"scroll flex column\" style={{ alignItems: \"center\" }}>\r\n            {devices.map(({ deviceId, deviceName }, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  onClick={() => {\r\n                    IStore.setLoading(true);\r\n                    ipcRenderer.send(\"selected-device\", deviceId);\r\n                  }}\r\n                  className=\"button\"\r\n                  style={{\r\n                    marginTop: \"3vh\",\r\n                  }}\r\n                >\r\n                  <span\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      fontSize: \"3vh\",\r\n                      color: Colors.white,\r\n                    }}\r\n                  >\r\n                    {deviceName}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div className={\"contain center flex\"}>\r\n            {isSearchStarted ? (\r\n              <Spin size=\"large\" />\r\n            ) : (\r\n              <div\r\n                className=\"button\"\r\n                onClick={scan}\r\n                style={{ alignSelf: \"center\" }}\r\n              >\r\n                Cihazları Tara\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectDevice;\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\compass.js",["164","165","166","167","168","169","170","171","172","173","174"],"import * as React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { MStore } from \"../stores/MainStore\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { AngleUnitTypes, HomeScreenTypes } from \"../constants/Config\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Params } from \"../constants/Params\";\r\nimport { info } from \"../functions/toast\";\r\nimport { angleConversion, distanceConversion } from \"../functions/Conversions\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Header from \"../componenets/Header\";\r\nimport { string } from \"../locales\";\r\nimport {\r\n  ColumnHeightOutlined,\r\n  ColumnWidthOutlined,\r\n  ReloadOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Swiper, SwiperSlide, useSwiper } from \"swiper/react/swiper-react\";\r\nimport { Navigation } from \"swiper\";\r\n\r\nlet _auto = false;\r\n\r\nfunction Compass({ navigation }) {\r\n  const history = useHistory();\r\n  const ble = IStore.ble;\r\n  const param = Params();\r\n\r\n  const [distance, setDistance] = useState([]);\r\n  const [distance_unit, setDistanceUnit] = useState(\"--\");\r\n  const [angle_unit, setAngleUnit] = useState(\"--\");\r\n  const [azimuth, setAzimuth] = useState(0);\r\n  const [elevation, setElevation] = useState(0);\r\n  const [roll, setRoll] = useState(0);\r\n  const [auto, setAuto] = useState(_auto);\r\n  const [spinValue, setSpinValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    _auto = false;\r\n    BLEService.event.on(\"distance_and_compass\", _setData);\r\n    controlDevice();\r\n\r\n    return () => {\r\n      try {\r\n        if (auto) {\r\n          _auto = false;\r\n          setAuto(false);\r\n        }\r\n      } catch (e) {}\r\n      BLEService.event.removeListener(\"distance_and_compass\", _setData);\r\n    };\r\n  }, []);\r\n\r\n  function _setData({\r\n    distance,\r\n    distance_unit,\r\n    angle_unit,\r\n    azimuth,\r\n    elevation,\r\n    roll,\r\n  }) {\r\n    setDistance(distance);\r\n    setDistanceUnit(distanceConversion(0, distance_unit, distance_unit).unit);\r\n    setAngleUnit(angleConversion(0, angle_unit, angle_unit).unit);\r\n    setAzimuth(azimuth);\r\n    setElevation(elevation);\r\n    setRoll(roll);\r\n\r\n    setSpinValue(\r\n      360 - angleConversion(azimuth, angle_unit, AngleUnitTypes.Derece.id).angle\r\n    );\r\n\r\n    if (_auto) {\r\n      setTimeout(() => {\r\n        controlDevice();\r\n      }, 2500);\r\n    }\r\n  }\r\n\r\n  function controlDevice() {\r\n    const device = ble.getDevice();\r\n\r\n    if (device) {\r\n      getData();\r\n    } else {\r\n      history.push(\"select-device\");\r\n    }\r\n  }\r\n\r\n  async function getData() {\r\n    if (!_auto) info(string[\"atisyapiliyor\"]);\r\n    ble.sendDataToDevice(\r\n      \"distance_and_compass\",\r\n      param.distance_and_compass.getHex\r\n    );\r\n  }\r\n\r\n  function DistanceView({ distance, distance_unit, row = true }) {\r\n    let len = distance.length;\r\n\r\n    return (\r\n      <div\r\n        className={`flex ${row ? \"row\" : \"column\"}`}\r\n        style={{\r\n          width: \"80%\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        {distance.map((val, index) => (\r\n          <div\r\n            className=\"flex\"\r\n            key={index}\r\n            style={{\r\n              padding: \"10px 0\",\r\n              textAlign: \"center\",\r\n              color: Colors.text,\r\n              fontWeight: \"bold\",\r\n              fontSize: `${\r\n                row ? (len == 3 ? 4 : len == 2 ? 5 : len == 1 ? 6 : 0) : 6\r\n              }vw`,\r\n            }}\r\n          >\r\n            {parseFloat(val.toString()).toFixed(2) + \" \" + distance_unit}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"contain column\">\r\n      <div className=\"center\" style={{ width: \"100%\" }}>\r\n        <Header\r\n          title={string.olcum2}\r\n          onBack={() => {\r\n            history.goBack();\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex-1\" style={{ padding: 20 }}>\r\n        <Swiper\r\n          initialSlide={MStore.settings.home_screen_type}\r\n          navigation={true}\r\n          modules={[Navigation]}\r\n          style={{ display: \"flex\", flex: 1 }}\r\n        >\r\n          <SwiperSlide>\r\n            <div\r\n              className={\" flex-1 column\"}\r\n              style={{ height: \"100%\", alignItems: \"center\" }}\r\n            >\r\n              <div className=\"flex-3 center\">\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    fontSize: \"6vh\",\r\n                    fontWeight: \"bold\",\r\n                    color: Colors.text,\r\n                  }}\r\n                >\r\n                  {azimuth + \" \" + angle_unit}\r\n                </div>\r\n                <img\r\n                  src={require(\"../assets/images/compass.png\").default}\r\n                  style={{\r\n                    height: \"40vh\",\r\n                    transform: `rotate(${spinValue}deg)`,\r\n                    transitionDuration: \"1000ms\",\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"flex-2 row  center\"\r\n                style={{\r\n                  width: \"80%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-around\",\r\n                }}\r\n              >\r\n                <div>\r\n                  <ColumnHeightOutlined\r\n                    style={{ fontSize: \"4vw\", color: Colors.text }}\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"4vw\",\r\n                      color: Colors.text,\r\n                    }}\r\n                  >\r\n                    {elevation + \"\" + angle_unit}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <ColumnWidthOutlined\r\n                    style={{ fontSize: \"4vw\", color: Colors.text }}\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"4vw\",\r\n                      color: Colors.text,\r\n                    }}\r\n                  >\r\n                    {roll + \"\" + angle_unit}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex-2  center\" style={{ width: \"100%\" }}>\r\n                <DistanceView\r\n                  distance={distance}\r\n                  distance_unit={distance_unit}\r\n                />\r\n              </div>\r\n\r\n              <div\r\n                className=\"flex row  center\"\r\n                style={{\r\n                  width: \"50%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-around\",\r\n                }}\r\n              >\r\n                <div\r\n                  onClick={() => {\r\n                    if (!auto) controlDevice();\r\n                    _auto = !_auto;\r\n                    setAuto(!auto);\r\n                  }}\r\n                  className=\"flex-1 center column\"\r\n                >\r\n                  <ReloadOutlined\r\n                    style={{\r\n                      backgroundColor: Colors[auto ? \"green\" : \"red\"],\r\n                      fontSize: \"3.5vh\",\r\n                      color: Colors.white,\r\n                      padding: 13,\r\n                      borderRadius: 100,\r\n                    }}\r\n                  />\r\n                  <div\r\n                    style={{\r\n                      padding: 2,\r\n                      fontSize: \"1.3vh\",\r\n                      color: Colors.white,\r\n                    }}\r\n                  >\r\n                    {string.otomatikatis}\r\n                  </div>\r\n                </div>\r\n                {!auto ? (\r\n                  <div className=\"flex-1 center column\" onClick={controlDevice}>\r\n                    <div\r\n                      className=\"flex center\"\r\n                      style={{\r\n                        backgroundColor: Colors.primary,\r\n                        width: \"6.5vh\",\r\n                        height: \"6.5vh\",\r\n                        color: Colors.white,\r\n                        borderRadius: 100,\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={require(\"../assets/images/measure.png\").default}\r\n                        style={{ width: \"3vh\", height: \"3vh\" }}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        padding: 2,\r\n                        fontSize: \"1.3vh\",\r\n                        color: Colors.white,\r\n                      }}\r\n                    >\r\n                      {string.atisyap}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex-1\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </SwiperSlide>\r\n          <SwiperSlide>\r\n            <div\r\n              className={\" flex-1 column\"}\r\n              style={{ height: \"100%\", alignItems: \"center\" }}\r\n            >\r\n              <div className=\"flex-3 center\">\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    fontSize: \"6vh\",\r\n                    fontWeight: \"bold\",\r\n                    color: Colors.text,\r\n                  }}\r\n                >\r\n                  {azimuth + \" \" + angle_unit}\r\n                </div>\r\n                <img\r\n                  src={require(\"../assets/images/compass.png\").default}\r\n                  style={{\r\n                    height: \"40vh\",\r\n                    transform: `rotate(${spinValue}deg)`,\r\n                    transitionDuration: \"1000ms\",\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"flex-2 row  center\"\r\n                style={{\r\n                  width: \"80%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-around\",\r\n                }}\r\n              >\r\n                <div>\r\n                  <ColumnHeightOutlined\r\n                    style={{ fontSize: \"4vw\", color: Colors.text }}\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"4vw\",\r\n                      color: Colors.text,\r\n                    }}\r\n                  >\r\n                    {elevation + \"\" + angle_unit}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <ColumnWidthOutlined\r\n                    style={{ fontSize: \"4vw\", color: Colors.text }}\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      fontWeight: \"bold\",\r\n                      fontSize: \"4vw\",\r\n                      color: Colors.text,\r\n                    }}\r\n                  >\r\n                    {roll + \"\" + angle_unit}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div\r\n                className=\"flex row  center\"\r\n                style={{\r\n                  width: \"50%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-around\",\r\n                }}\r\n              >\r\n                <div\r\n                  onClick={() => {\r\n                    if (!auto) controlDevice();\r\n                    _auto = !_auto;\r\n                    setAuto(!auto);\r\n                  }}\r\n                  className=\"flex-1 center column\"\r\n                >\r\n                  <ReloadOutlined\r\n                    style={{\r\n                      backgroundColor: Colors[auto ? \"green\" : \"red\"],\r\n                      fontSize: \"3.5vh\",\r\n                      color: Colors.white,\r\n                      padding: 13,\r\n                      borderRadius: 100,\r\n                    }}\r\n                  />\r\n                  <div\r\n                    style={{\r\n                      padding: 2,\r\n                      fontSize: \"1.3vh\",\r\n                      color: Colors.white,\r\n                    }}\r\n                  >\r\n                    {string.otomatikatis}\r\n                  </div>\r\n                </div>\r\n                {!auto ? (\r\n                  <div className=\"flex-1 center column\" onClick={controlDevice}>\r\n                    <div\r\n                      className=\"flex center\"\r\n                      style={{\r\n                        backgroundColor: Colors.primary,\r\n                        width: \"6.5vh\",\r\n                        height: \"6.5vh\",\r\n                        color: Colors.white,\r\n                        borderRadius: 100,\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={require(\"../assets/images/measure.png\").default}\r\n                        style={{ width: \"3vh\", height: \"3vh\" }}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        padding: 2,\r\n                        fontSize: \"1.3vh\",\r\n                        color: Colors.white,\r\n                      }}\r\n                    >\r\n                      {string.atisyap}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex-1\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </SwiperSlide>\r\n          <SwiperSlide>\r\n            <div\r\n              className={\" flex-1 column\"}\r\n              style={{ height: \"100%\", alignItems: \"center\" }}\r\n            >\r\n              <div className=\"flex-2  center\" style={{ width: \"100%\" }}>\r\n                <DistanceView\r\n                  distance={distance}\r\n                  distance_unit={distance_unit}\r\n                  row={false}\r\n                />\r\n              </div>\r\n\r\n              <div\r\n                className=\"flex row  center\"\r\n                style={{\r\n                  width: \"50%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-around\",\r\n                }}\r\n              >\r\n                <div\r\n                  onClick={() => {\r\n                    if (!auto) controlDevice();\r\n                    _auto = !_auto;\r\n                    setAuto(!auto);\r\n                  }}\r\n                  className=\"flex-1 center column\"\r\n                >\r\n                  <ReloadOutlined\r\n                    style={{\r\n                      backgroundColor: Colors[auto ? \"green\" : \"red\"],\r\n                      fontSize: \"3.5vh\",\r\n                      color: Colors.white,\r\n                      padding: 13,\r\n                      borderRadius: 100,\r\n                    }}\r\n                  />\r\n                  <div\r\n                    style={{\r\n                      padding: 2,\r\n                      fontSize: \"1.3vh\",\r\n                      color: Colors.white,\r\n                    }}\r\n                  >\r\n                    {string.otomatikatis}\r\n                  </div>\r\n                </div>\r\n                {!auto ? (\r\n                  <div className=\"flex-1 center column\" onClick={controlDevice}>\r\n                    <div\r\n                      className=\"flex center\"\r\n                      style={{\r\n                        backgroundColor: Colors.primary,\r\n                        width: \"6.5vh\",\r\n                        height: \"6.5vh\",\r\n                        color: Colors.white,\r\n                        borderRadius: 100,\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={require(\"../assets/images/measure.png\").default}\r\n                        style={{ width: \"3vh\", height: \"3vh\" }}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        padding: 2,\r\n                        fontSize: \"1.3vh\",\r\n                        color: Colors.white,\r\n                      }}\r\n                    >\r\n                      {string.atisyap}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex-1\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </SwiperSlide>\r\n        </Swiper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default observer(Compass);\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Loading.js",["175"],"import React, { useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { Spin } from \"antd\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\n\r\nconst Loading = () => {\r\n  if (!IStore.loading) return null;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n        height: \"100vh\",\r\n        zIndex: 9999,\r\n        flex: 1,\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"center\"\r\n        style={{\r\n          border: `4px solid ${Colors.primary}`,\r\n          width: 80,\r\n          height: 80,\r\n          backgroundColor: Colors.darkGray,\r\n          borderRadius: 1000,\r\n        }}\r\n      >\r\n        <Spin size=\"large\" style={{ display: \"flex\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Loading);\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\slide.js",["176"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Col } from \"antd\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { string } from \"../locales\";\r\nimport { MStore } from \"../stores/MainStore\";\r\n\r\nconst Slide = () => {\r\n  const history = useHistory();\r\n  const [page, setPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n  }, []);\r\n\r\n  const slide = [\r\n    {\r\n      title: \"olcum\",\r\n      desc: \"olcumdesc\",\r\n      icon: require(\"../assets/images/olcum.png\").default,\r\n    },\r\n    {\r\n      title: \"cihaziyapilandir\",\r\n      desc: \"cihaziyapilandirdesc\",\r\n      icon: require(\"../assets/images/cihaz.png\").default,\r\n    },\r\n    /*{\r\n            title:\"aygityazilimi\",\r\n            desc:\"aygityazilimidesc\",\r\n            icon:require(\"../assets/images/aygit.png\").default\r\n        },*/\r\n    {\r\n      title: \"cihazbagla\",\r\n      desc: \"cihazbagladesc\",\r\n      icon: require(\"../assets/images/bagla.png\").default,\r\n    },\r\n  ];\r\n\r\n  const { title, desc, icon } = slide[page - 1];\r\n\r\n  return (\r\n    <div\r\n      className=\"flex-1 column contain center background-img\"\r\n      style={{\r\n        width: \"100%\",\r\n        backgroundImage: `url(${\r\n          require(\"../assets/images/slide-bg/bg1.png\").default\r\n        })`,\r\n      }}\r\n    >\r\n      <div\r\n        className=\"flex center background-img \"\r\n        style={{\r\n          width: \"50vh\",\r\n          height: \"50vh\",\r\n          backgroundImage: `url(${\r\n            require(\"../assets/images/slide-bg/bg2.png\").default\r\n          })`,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"flex row center\"\r\n          style={{ marginLeft: \"18vw\", flexDirection: \"space-between\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n              padding: \"3vw\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"4vh\",\r\n              color: Colors.white,\r\n            }}\r\n          >\r\n            {string[title]}\r\n          </div>\r\n          <div\r\n            className=\"flex center\"\r\n            style={{\r\n              padding: \"4vh\",\r\n              borderRadius: 1000,\r\n              backgroundColor: Colors.primary,\r\n            }}\r\n          >\r\n            <img\r\n              src={icon}\r\n              alt={title}\r\n              style={{ width: \"6vh\", height: \"6vh\" }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: \"50%\",\r\n          textAlign: \"center\",\r\n          fontWeight: \"500\",\r\n          fontSize: \"2vh\",\r\n          color: Colors.text,\r\n        }}\r\n      >\r\n        {string[desc]}\r\n      </div>\r\n      <div className=\"flex row center\" style={{ marginTop: \"4vh\" }}>\r\n        {slide.map((_, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              margin: 10,\r\n              width: \"10vw\",\r\n              height: 10,\r\n              borderRadius: 10,\r\n              backgroundColor:\r\n                page >= index + 1 ? Colors.primary : Colors.lightBlack,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div\r\n        onClick={() => {\r\n          if (page < slide.length) {\r\n            setPage(page + 1);\r\n          } else {\r\n            MStore.setFirst(false);\r\n            history.push(\"/\");\r\n          }\r\n        }}\r\n        className=\"flex center btn\"\r\n        style={{\r\n          marginTop: \"3vh\",\r\n          padding: \"1vh 7vh\",\r\n          borderRadius: 15,\r\n          backgroundColor: Colors.primary,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            textAlign: \"center\",\r\n            fontWeight: \"500\",\r\n            fontSize: \"2vh\",\r\n            color: Colors.white,\r\n          }}\r\n        >\r\n          {string[\"devamet\"]}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slide;\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\moreInfo.js",["177"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Header, { MoreInfoButton } from \"../componenets/Header\";\r\nimport { string } from \"../locales\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { RightOutlined } from \"@ant-design/icons\";\r\n\r\nimport { contacts, findType, HomeScreenTypes } from \"../constants/Config\";\r\nimport { MStore } from \"../stores/MainStore\";\r\nimport { Modal, Switch } from \"antd\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { setModalTypes } from \"../componenets/SetModal\";\r\nimport useStayAwake from \"use-stay-awake\";\r\n\r\nexport function Contact({ onClose = () => {} }) {\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <div\r\n          className=\"background-img\"\r\n          style={{\r\n            display: \"flex\",\r\n            width: 60,\r\n            height: 55,\r\n            backgroundImage: `url(${\r\n              require(\"../assets/images/modal/corner.png\").default\r\n            })`,\r\n          }}\r\n        >\r\n          <div\r\n            style={{ marginLeft: 20, marginBottom: 10 }}\r\n            className=\"flex-1 center\"\r\n          >\r\n            <img\r\n              src={require(\"../assets/images/modal/iletisim.png\").default}\r\n              height={25}\r\n              width={25}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ padding: 15 }}>\r\n        <div\r\n          style={{\r\n            fontSize: 18,\r\n            fontWeight: \"bold\",\r\n            color: Colors.primary,\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          {string[\"bizeulasin\"]}\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"flex center row\"\r\n        style={{ display: \"grid\", width: \"100%\", padding: 10 }}\r\n      >\r\n        {Object.values(contacts).map(({ title, value, onPress }, index) => (\r\n          <div\r\n            key={index}\r\n            style={{ cursor: \"pointer\", display: \"flex\" }}\r\n            onClick={() => {\r\n              onPress(value.replace(/ /g, \"\"));\r\n            }}\r\n          >\r\n            <div style={{ padding: 10 }}>\r\n              <div\r\n                style={{\r\n                  color: Colors.white,\r\n                  fontSize: 16,\r\n                }}\r\n              >\r\n                <b style={{ color: Colors.lightPrimary, fontSize: 19 }}>\r\n                  {string[title]}\r\n                </b>\r\n                <span>{\" : \" + value}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div\r\n        className={\"flex row\"}\r\n        style={{\r\n          padding: 15,\r\n          width: \"100%\",\r\n          margin: \"40px 0\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        <div className=\"flex-1 center\">\r\n          <div\r\n            className=\"btn\"\r\n            style={{\r\n              fontSize: 18,\r\n              color: Colors.primary,\r\n              fontWeight: \"bold\",\r\n              padding: 10,\r\n            }}\r\n            onClick={() => {\r\n              onClose();\r\n            }}\r\n          >\r\n            {string.kapat}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MoreInfo = () => {\r\n  const history = useHistory();\r\n  const device = useStayAwake();\r\n\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const { home_screen_type, lock_screen } = MStore.settings;\r\n\r\n  function ContactModal() {\r\n    return (\r\n      <Modal\r\n        bodyStyle={{ padding: 0, backgroundColor: Colors.darkGray }}\r\n        centered\r\n        closable={false}\r\n        visible={visible}\r\n        okText={string.kaydet}\r\n        cancelText={string.kapat}\r\n        onOk={() => {\r\n          setVisible(false);\r\n        }}\r\n        onCancel={() => {\r\n          setVisible(false);\r\n        }}\r\n        footer={null}\r\n      >\r\n        <Contact onClose={() => setVisible(false)} />\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-1 column contain center\">\r\n      <ContactModal />\r\n      <div className=\"center\" style={{ width: \"100%\" }}>\r\n        <Header\r\n          onBack={() => {\r\n            history.goBack();\r\n          }}\r\n          right={() => <MoreInfoButton close />}\r\n        />\r\n      </div>\r\n      <div\r\n        className=\"flex row\"\r\n        style={{ fontSize: 25, fontWeight: \"bold\", color: Colors.primary }}\r\n      >\r\n        {string.dahafazla}\r\n      </div>\r\n      <div\r\n        className=\"flex-1 scroll column\"\r\n        style={{ width: \"100%\", alignItems: \"center\" }}\r\n      >\r\n        <div\r\n          className=\"flex row btn\"\r\n          style={{\r\n            width: \"50%\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            padding: 12,\r\n            margin: \"20px 0px\",\r\n            borderRadius: 15,\r\n            backgroundColor: Colors.secondary,\r\n          }}\r\n          onClick={() => {\r\n            IStore.setSetModal({\r\n              visible: true,\r\n              title: string[\"olcumonceligi\"],\r\n              value: home_screen_type,\r\n              type: setModalTypes.Select,\r\n              options: Object.values(HomeScreenTypes),\r\n              icon: require(\"../assets/images/modal/oncelik.png\"),\r\n              onChange: async (id) => {\r\n                MStore.setSettings({\r\n                  ...MStore.settings,\r\n                  home_screen_type: id,\r\n                });\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\r\n            {string[\"olcumonceligi\"]}\r\n          </div>\r\n          <div className=\"flex row center\">\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flex: 2,\r\n                textAlign: \"left\",\r\n                color: Colors.text,\r\n                padding: 10,\r\n                fontSize: 15,\r\n              }}\r\n            >\r\n              {string[findType(HomeScreenTypes, home_screen_type)]}\r\n            </div>\r\n            <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"flex row\"\r\n          style={{\r\n            borderBottomStyle: \"dashed\",\r\n            borderBottomWidth: 3,\r\n            borderRadius: 2,\r\n            borderColor: \"#667587\",\r\n            width: \"50%\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            padding: 12,\r\n            margin: \"15px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\r\n            {string[\"ekranklidiniengelle\"]}\r\n          </div>\r\n          <div>\r\n            <Switch\r\n              defaultChecked={lock_screen}\r\n              onChange={(lock_screen) => {\r\n                MStore.setSettings({ ...MStore.settings, lock_screen });\r\n                if (lock_screen) {\r\n                  device.preventSleeping();\r\n                } else {\r\n                  device.allowSleeping();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"flex row btn\"\r\n          style={{\r\n            width: \"50%\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            padding: 12,\r\n            margin: \"20px 0px\",\r\n            borderRadius: 15,\r\n            backgroundColor: Colors.secondary,\r\n          }}\r\n          onClick={() => {\r\n            history.push(\"select-device\");\r\n          }}\r\n        >\r\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\r\n            {string[\"cihazabaglan\"]}\r\n          </div>\r\n          <div className=\"flex row center\">\r\n            <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"flex row btn\"\r\n          style={{\r\n            width: \"50%\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            padding: 12,\r\n            margin: \"20px 0px\",\r\n            borderRadius: 15,\r\n            backgroundColor: Colors.secondary,\r\n          }}\r\n          onClick={() => {\r\n            setVisible(true);\r\n          }}\r\n        >\r\n          <div style={{ fontSize: 18, fontWeight: \"bold\", color: Colors.text }}>\r\n            {string[\"hakkinda\"]}\r\n          </div>\r\n          <div className=\"flex row center\">\r\n            <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(MoreInfo);\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\SetModal.tsx",["178","179","180","181","182","183","184","185","186"],"import * as React from \"react\";\r\n\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { InputNumber, Modal, Spin } from \"antd\";\r\nimport { string } from \"../locales\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { CheckCircleOutlined, MinusCircleOutlined } from \"@ant-design/icons\";\r\nimport { error } from \"../functions/toast\";\r\n\r\nexport const setModalTypes = {\r\n  Select: \"select\",\r\n  Number: \"number\",\r\n};\r\n\r\nfunction SetModal() {\r\n  const {\r\n    visible,\r\n    title = \"\",\r\n    description = \"\",\r\n    icon = require(\"../assets/images/cihaz2.png\"),\r\n    value,\r\n    options,\r\n    type,\r\n    numberParams = {},\r\n    onChange = async (data: any) => {},\r\n  } = IStore.set_modal;\r\n\r\n  const [defaultValue, setDefaultValue]: any = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setDefaultValue(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <Modal\r\n      bodyStyle={{ padding: 0, backgroundColor: Colors.darkGray }}\r\n      centered\r\n      closable={false}\r\n      visible={visible}\r\n      okText={string.kaydet}\r\n      cancelText={string.kapat}\r\n      onOk={() => {\r\n        IStore.setSetModal({ visible: false });\r\n      }}\r\n      onCancel={() => {\r\n        IStore.setSetModal({ visible: false });\r\n      }}\r\n      footer={null}\r\n    >\r\n      <div style={{ width: \"100%\" }}>\r\n        {icon ? (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"background-img\"\r\n              style={{\r\n                display: \"flex\",\r\n                width: 60,\r\n                height: 55,\r\n                backgroundImage: `url(${\r\n                  require(\"../assets/images/modal/corner.png\").default\r\n                })`,\r\n              }}\r\n            >\r\n              <div\r\n                style={{ marginLeft: 20, marginBottom: 10 }}\r\n                className=\"flex-1 center\"\r\n              >\r\n                <img src={icon.default} height={25} width={25} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div style={{ height: 25 }} />\r\n        )}\r\n        <div style={{ padding: 15 }}>\r\n          {title ? (\r\n            <div\r\n              style={{\r\n                fontSize: 18,\r\n                fontWeight: \"bold\",\r\n                color: Colors.text,\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              {string[title]}\r\n            </div>\r\n          ) : null}\r\n          {description ? (\r\n            <div\r\n              style={{\r\n                fontSize: 15,\r\n                fontWeight: \"bold\",\r\n                color: Colors.text,\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              {string[description]}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"flex center\" style={{ width: \"100%\", padding: 10 }}>\r\n          {type == setModalTypes.Select ? (\r\n            <Select\r\n              defaultValue={defaultValue}\r\n              options={options}\r\n              onChange={(data: any) => {\r\n                setDefaultValue(data);\r\n              }}\r\n            />\r\n          ) : type == setModalTypes.Number ? (\r\n            <Number\r\n              numberParams={numberParams}\r\n              defaultValue={defaultValue}\r\n              onChange={(data: any) => {\r\n                setDefaultValue(data);\r\n              }}\r\n            />\r\n          ) : null}\r\n        </div>\r\n\r\n        <div\r\n          className={\"flex row\"}\r\n          style={{\r\n            padding: 15,\r\n            width: \"100%\",\r\n            margin: \"40px 0\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          <div className=\"flex-1 center\">\r\n            <div\r\n              className=\"btn\"\r\n              style={{\r\n                fontSize: 18,\r\n                color: Colors.primary,\r\n                fontWeight: \"bold\",\r\n                padding: 10,\r\n              }}\r\n              onClick={() => {\r\n                IStore.setSetModal({ visible: false });\r\n              }}\r\n            >\r\n              {string.kapat}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-1 center\">\r\n            <div\r\n              className=\"btn\"\r\n              style={{\r\n                fontSize: 18,\r\n                color: Colors.primary,\r\n                fontWeight: \"bold\",\r\n                padding: 10,\r\n              }}\r\n              onClick={() => {\r\n                if (loading) {\r\n                  return;\r\n                }\r\n                let value: any = defaultValue;\r\n\r\n                if (type == setModalTypes.Number) {\r\n                  let { fixed, min, max, unit = \"\" } = numberParams;\r\n\r\n                  value = parseInt(value.toString());\r\n                  // console.warn(value, max);\r\n\r\n                  if (isNaN(value) || !/^-?\\d+$/.test(value.toString())) {\r\n                    error(string[\"gecersizveri\"]);\r\n                    return;\r\n                  }\r\n                  if (min != undefined && value < min) {\r\n                    if (fixed) {\r\n                      min = min / Math.pow(10, fixed);\r\n                    }\r\n                    error(\"Minimum \" + min + \" \" + unit);\r\n                    return;\r\n                  }\r\n                  if (max != undefined && value > max) {\r\n                    if (fixed) {\r\n                      max = max / Math.pow(10, fixed);\r\n                    }\r\n                    error(\"Maximum \" + max + \" \" + unit);\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                setLoading(true);\r\n                onChange(value).then(() => {\r\n                  setLoading(false);\r\n                  IStore.setSetModal({ visible: false });\r\n                });\r\n              }}\r\n            >\r\n              {loading ? <Spin /> : string.kaydet}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction Select({ defaultValue, options, onChange }: any) {\r\n  return (\r\n    <div style={{ width: \"50%\" }}>\r\n      {Array.isArray(options)\r\n        ? options.map(({ id, value }: any) => (\r\n            <div\r\n              key={id}\r\n              style={{ width: \"100%\" }}\r\n              onClick={() => {\r\n                onChange(id);\r\n              }}\r\n            >\r\n              <div\r\n                style={\r\n                  {\r\n                    borderBottomStyle: \"dashed\",\r\n                    borderBottomWidth: 1,\r\n                    borderRadius: 1,\r\n                    borderColor: \"#667587\",\r\n                    padding: 10,\r\n                    width: \"100%\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                    \"--active-color\":\r\n                      Colors.text + (defaultValue == id ? \"\" : \"88\"),\r\n                    \"--default-color\": Colors.text,\r\n                  } as React.CSSProperties\r\n                }\r\n                className={`flex row select-button`}\r\n              >\r\n                <div\r\n                  style={\r\n                    {\r\n                      display: \"flex\",\r\n                      flex: 1,\r\n                      fontSize: 15,\r\n                      fontWeight: \"bold\",\r\n                      // color: Colors.text + (defaultValue == id ? \"\" : \"88\"),\r\n                      padding: 7,\r\n                    } as React.CSSProperties\r\n                  }\r\n                >\r\n                  {string[value] ?? value}\r\n                </div>\r\n                {defaultValue == id ? (\r\n                  <CheckCircleOutlined\r\n                    style={{\r\n                      fontSize: 18,\r\n                      // color: Colors.text + (defaultValue == id ? \"\" : \"88\"),\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <MinusCircleOutlined\r\n                    style={{\r\n                      fontSize: 18,\r\n                      // color: Colors.text + (defaultValue == id ? \"\" : \"88\"),\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Number({\r\n  defaultValue = \"loading\",\r\n  onChange,\r\n  numberParams = {},\r\n}: any) {\r\n  let { fixed = 0, min = 0, max = 0, unit = \"\" } = numberParams;\r\n\r\n  if (fixed) {\r\n    min = min / Math.pow(10, fixed);\r\n    max = max / Math.pow(10, fixed);\r\n  }\r\n\r\n  if (defaultValue == \"loading\") return null;\r\n\r\n  return (\r\n    <div className=\"flex center\" style={{ width: \"100%\" }}>\r\n      <div\r\n        className=\"flex row\"\r\n        style={{\r\n          width: \"50%\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          alignSelf: \"center\",\r\n          display: \"flex\",\r\n          padding: 10,\r\n          borderStyle: \"dashed\",\r\n          borderWidth: 1,\r\n          borderRadius: 1,\r\n          borderColor: \"#667587\",\r\n        }}\r\n      >\r\n        <InputNumber\r\n          bordered={false}\r\n          precision={fixed}\r\n          style={{\r\n            flex: 1,\r\n            color: Colors.text,\r\n            backgroundColor: Colors.darkGray,\r\n            borderColor: Colors.text,\r\n          }}\r\n          size=\"large\"\r\n          min={min}\r\n          max={max}\r\n          defaultValue={defaultValue / Math.pow(10, fixed)}\r\n          stringMode\r\n          onChange={(num) => {\r\n            onChange(num * Math.pow(10, fixed));\r\n          }}\r\n        />\r\n        <div style={{ fontSize: 14, color: Colors.text }}>{unit}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer(SetModal);\r\n",["187","188"],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\measure.js",["189"],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\device.js",["190","191"],"import React, { useEffect, useState } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { string } from \"../locales\";\r\nimport Header, { HelpText, MoreInfoButton } from \"../componenets/Header\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { Params } from \"../constants/Params\";\r\nimport { Spin } from \"antd\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Device = () => {\r\n  const history = useHistory();\r\n  const ble = IStore.ble;\r\n  const params = Params();\r\n  const usage_params = {\r\n    serial_no: params.serial_no,\r\n    device_version: params.device_version,\r\n    // temperature: params.temperature,\r\n    // pressure: params.pressure,\r\n    shot_counter: params.shot_counter,\r\n    statuses: params.statuses,\r\n  };\r\n\r\n  const [data, setData] = useState(ble.getData());\r\n  const [device, setDevice] = useState(\"loading\");\r\n\r\n  useEffect(() => {\r\n    BLEService.event.on(\"monitor\", _setData);\r\n    controlDevice();\r\n\r\n    return () => {\r\n      BLEService.event.removeListener(\"monitor\", _setData);\r\n    };\r\n  }, []);\r\n\r\n  function _setData({ all_data }) {\r\n    setData({ ...all_data });\r\n  }\r\n\r\n  function reload() {\r\n    setData({\r\n      ...data,\r\n      ...{\r\n        serial_no: \"\",\r\n        device_version: \"\",\r\n        temperature: \"\",\r\n        pressure: \"\",\r\n        shot_counter: \"\",\r\n        statuses: {\r\n          odometer_activity: {\r\n            title: \"lazermesafeolceraktifligi\",\r\n            value: null,\r\n          },\r\n          compass_activity: {\r\n            title: \"pusulaaktifligi\",\r\n            value: null,\r\n          },\r\n          bluetooth_activity: {\r\n            title: \"bluetoothaktifligi\",\r\n            value: null,\r\n          },\r\n          odometer_error: {\r\n            title: \"lazermesafeolcerhatabilgisi\",\r\n            value: null,\r\n          },\r\n          compass_error: {\r\n            title: \"pusulahatabilgisi\",\r\n            value: null,\r\n          },\r\n          bluetooth_error: {\r\n            title: \"bluetoothhatabilgisi\",\r\n            value: null,\r\n          },\r\n          battery_error: {\r\n            title: \"bataryahatabilgisi\",\r\n            value: null,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    controlDevice();\r\n  }\r\n\r\n  async function controlDevice() {\r\n    const device = ble.getDevice();\r\n    setDevice(device);\r\n\r\n    if (device) {\r\n      getValues();\r\n    }\r\n  }\r\n\r\n  function getValues() {\r\n    for (let [key, param] of Object.entries(usage_params)) {\r\n      if (param.getHex) ble.sendDataToDevice(key, param.getHex)\r\n    }\r\n  }\r\n\r\n  if (!device) {\r\n    return (\r\n      <div className=\"column contain center\">\r\n        <div style={{ fontSize: 20, color: Colors.text, fontWeight: \"bold\" }}>\r\n          {string[\"101\"]}\r\n        </div>\r\n        <div\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            history.push(\"select-device\");\r\n          }}\r\n          style={{\r\n            margin: 10,\r\n            padding: \"10px 15px\",\r\n            backgroundColor: Colors.primary,\r\n            borderRadius: 10,\r\n            fontSize: 16,\r\n            color: Colors.text,\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {string.simdibaglan}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (device == \"loading\") {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"center contain column\">\r\n      <div className=\"center\" style={{ width: \"100%\" }}>\r\n        <Header left={() => <HelpText />} right={() => <MoreInfoButton />} />\r\n      </div>\r\n      <div\r\n        className=\"flex row\"\r\n        style={{\r\n          width: \"50%\",\r\n          flexDirection: \"space-between\",\r\n          alignItems: \"center\",\r\n          fontSize: 25,\r\n          fontWeight: \"bold\",\r\n          color: Colors.primary,\r\n        }}\r\n      >\r\n        <div className=\"flex-1\"></div>\r\n        <div className=\"flex-3 center\" style={{ textAlign: \"center\" }}>\r\n          {string.cihazdurumbilgisi}\r\n        </div>\r\n        <div className=\"flex-1\" style={{ justifyContent: \"flex-end\" }}>\r\n          <div className=\"btn\" style={{ padding: 20 }} onClick={reload}>\r\n            <ReloadOutlined style={{ fontSize: 20, color: Colors.text }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"flex column scroll\"\r\n        style={{ width: \"100%\", height: \"100vh\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            alignSelf: \"center\",\r\n            padding: 20,\r\n            margin: 20,\r\n            borderRadius: 10,\r\n            backgroundColor: Colors.secondary,\r\n            width: \"50%\",\r\n          }}\r\n        >\r\n          {Object.entries(usage_params).map(([key, { title }]) => {\r\n            const value = data[key];\r\n\r\n            return (\r\n              <div\r\n                key={key}\r\n                style={{\r\n                  margin: 5,\r\n                  marginBottom: 20,\r\n                  padding: 5,\r\n                  borderStyle: \"dashed\",\r\n                  borderWidth: 1,\r\n                  borderRadius: 1,\r\n                  borderColor: \"#667587\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    color: Colors.text,\r\n                    padding: 10,\r\n                    fontSize: 16,\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  {string[title]}\r\n                </div>\r\n                <hr style={{ borderColor: \"#4c5f72\" }} />\r\n                <div>\r\n                  {value ? (\r\n                    typeof value == \"string\" ? (\r\n                      <div\r\n                        style={{\r\n                          height: 50,\r\n                          color: Colors.text,\r\n                          padding: 10,\r\n                          fontSize: 16,\r\n                          fontWeight: \"bold\",\r\n                        }}\r\n                      >\r\n                        {value}\r\n                      </div>\r\n                    ) : (\r\n                      Object.values(value).map(({ title, value }, index) => (\r\n                        <div\r\n                          key={index}\r\n                          className=\"flex row\"\r\n                          style={{\r\n                            justifyContent: \"space-between\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flex: 2,\r\n                              textAlign: \"left\",\r\n                              color: Colors.text,\r\n                              padding: 10,\r\n                              fontSize: 16,\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {string[title]}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              height: 40,\r\n                              display: \"flex\",\r\n                              flex: 1,\r\n                              textAlign: \"left\",\r\n                              color: Colors.text,\r\n                              padding: 10,\r\n                              fontSize: 14,\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {value ? string[value] ?? value : <Spin />}\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    )\r\n                  ) : (\r\n                    <div\r\n                      style={{\r\n                        padding: 10,\r\n                        height: 50,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <Spin />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div style={{ height: 100 }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Device);\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\laserMeter.js",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport GoogleMapReact, { fitBounds } from \"google-map-react\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { Spin } from \"antd\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { findLocation } from \"../functions/findLocation\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport { info, success } from \"../functions/toast\";\r\nimport { Params } from \"../constants/Params\";\r\nimport { distanceConversion } from \"../functions/Conversions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { string } from \"../locales\";\r\nimport { DistanceUnitTypes } from \"../constants/Config\";\r\nimport { ipcRenderer } from \"electron\";\r\nimport { MStore } from \"../stores/MainStore\";\r\nimport { osName, OsTypes } from \"react-device-detect\";\r\nconst utmObj = require(\"utm-latlng\");\r\n\r\nlet _compass = false;\r\nlet old_heading = 0;\r\nlet _location = {};\r\nlet target_locations = [];\r\nlet bound_target = {};\r\nlet maps = null;\r\n\r\nconst coords = {\r\n  accuracy: 15.98,\r\n  altitude: 124.65,\r\n  altitudeAccuracy: 3.5,\r\n  heading: null,\r\n  latitude: 0,\r\n  longitude: 0,\r\n  speed: null,\r\n};\r\n\r\nconst LaserMeter = () => {\r\n  const ble = IStore.ble;\r\n  const history = useHistory();\r\n  const param = Params();\r\n  const map = useRef();\r\n  const div = useRef();\r\n\r\n  const [location, setLocation] = useState(null);\r\n  const [targets, setTargets] = useState(null);\r\n  const [heading, setHeading] = useState(old_heading);\r\n  const [compass, setCompass] = useState(_compass);\r\n  const [distance_unit, setDistanceUnit] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [device, setDevice] = useState(\"loading\");\r\n\r\n  const target_len = Array.isArray(targets) ? targets.length : 0;\r\n\r\n  useEffect(() => {\r\n    IStore.firsLocation = true;\r\n    const device = ble.getDevice();\r\n    setDevice(device);\r\n\r\n    BLEService.event.on(\"distance_and_compass\", _setData);\r\n\r\n    switch (osName) {\r\n      case OsTypes.Windows:\r\n      case OsTypes.WindowsPhone:\r\n        try {\r\n          ipcRenderer.send(\"get-location\", null);\r\n          ipcRenderer.on(\"find-location\", getLocation);\r\n        } catch (e) {}\r\n        break;\r\n      default:\r\n        getLocation(null, [\"41.015137\", \"28.979530\", \"40\", \"1\", \"1\"]);\r\n        break;\r\n    }\r\n\r\n    return () => {\r\n      BLEService.event.removeListener(\"distance_and_compass\", _setData);\r\n      ipcRenderer.removeListener(\"find-location\", getLocation);\r\n    };\r\n  }, []);\r\n\r\n  async function getLocation(e, res) {\r\n    _location = {\r\n      ...coords,\r\n      latitude: parseFloat(res[0].replace(\",\", \".\")),\r\n      longitude: parseFloat(res[1].replace(\",\", \".\")),\r\n      altitude: parseFloat(res[2].replace(\",\", \".\")),\r\n      accuracy: parseFloat(res[3].replace(\",\", \".\")),\r\n      altitudeAccuracy: parseFloat(res[4].replace(\",\", \".\")),\r\n      latitudeDelta: 0.0922,\r\n      longitudeDelta: 0.0421,\r\n    };\r\n    setLocation(_location);\r\n    if (!IStore.firsLocation) {\r\n      ble.sendDataToDevice(\r\n        \"distance_and_compass\",\r\n        param.distance_and_compass.getHex\r\n      );\r\n    } else {\r\n      IStore.firsLocation = false;\r\n    }\r\n  }\r\n\r\n  function _setData({\r\n    distance,\r\n    distance_unit,\r\n    angle_unit,\r\n    azimuth,\r\n    elevation,\r\n    roll,\r\n  }) {\r\n    if (azimuth == 0 || azimuth == 180 || azimuth == 360) azimuth += 0.000001;\r\n    azimuth = azimuth % 360;\r\n\r\n    setLoading(false);\r\n    if (!_location?.latitude) return;\r\n\r\n    target_locations = [];\r\n\r\n    for (const val of distance) {\r\n      let target = findLocation(\r\n        _location.latitude,\r\n        _location.longitude,\r\n        val,\r\n        azimuth,\r\n        elevation,\r\n        angle_unit,\r\n        distance_unit\r\n      );\r\n      target_locations.push({\r\n        ...target,\r\n        height: target.y_distance,\r\n        distance: target.x_distance,\r\n        azimuth,\r\n        polyline: maps\r\n          ? new maps.Polyline({\r\n              path: [\r\n                { lat: target.latitude, lng: target.longitude },\r\n                { lat: _location.latitude, lng: _location.longitude },\r\n              ],\r\n              geodesic: true,\r\n              strokeColor: Colors.text,\r\n              strokeOpacity: 0.7,\r\n              strokeWeight: 4,\r\n            })\r\n          : null,\r\n      });\r\n    }\r\n    bound_target = target_locations[distance.indexOf(Math.max(...distance))];\r\n    setTargets([...target_locations]);\r\n    setDistanceUnit({\r\n      unit: distanceConversion(distance, distance_unit, distance_unit).unit,\r\n      id: distance_unit,\r\n    });\r\n\r\n    try {\r\n      for (const { polyline } of target_locations) {\r\n        polyline.setMap(map.current);\r\n      }\r\n    } catch (e) {}\r\n\r\n    setTimeout(() => {\r\n      try {\r\n        if (!_compass && maps) {\r\n          map.current.panTo([\r\n            ...target_locations.map(({ latitude, longitude }) => ({\r\n              lat: latitude,\r\n              lng: longitude,\r\n            })),\r\n            { lat: _location.latitude, lng: _location.longitude },\r\n          ]);\r\n        }\r\n      } catch (e) {}\r\n    }, 1000);\r\n  }\r\n\r\n  function controlDevice() {\r\n    try {\r\n      for (const { polyline } of target_locations) {\r\n        polyline.setMap(null);\r\n      }\r\n    } catch (e) {}\r\n    setTargets([]);\r\n    const device = ble.getDevice();\r\n\r\n    if (device) {\r\n      findTarget();\r\n    } else {\r\n      history.push(\"select-device\");\r\n    }\r\n  }\r\n  async function findTarget() {\r\n    info(string[\"atisyapiliyor\"]);\r\n    setLoading(true);\r\n\r\n    switch (osName) {\r\n      case OsTypes.Windows:\r\n      case OsTypes.WindowsPhone:\r\n        try {\r\n          ipcRenderer.send(\"get-location\", null);\r\n        } catch (e) {}\r\n        break;\r\n      default:\r\n        getLocation(null, [\"41.015137\", \"28.979530\", \"40\", \"1\", \"1\"]);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const Marker = ({ my, title }) => {\r\n    if (my) {\r\n      return (\r\n        <div\r\n          className=\"center\"\r\n          style={{\r\n            marginTop: -15,\r\n            marginLeft: -15,\r\n            width: 30,\r\n            height: 30,\r\n            backgroundColor: Colors.primary,\r\n            borderRadius: 100,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              width: 15,\r\n              height: 15,\r\n              backgroundColor: Colors.white,\r\n              borderRadius: 100,\r\n            }}\r\n          ></div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"flex center column\" style={{ marginTop: -40 }}>\r\n        <img\r\n          src={\r\n            target_len > 1\r\n              ? require(\"../assets/images/placeholder-full.png\").default\r\n              : require(\"../assets/images/placeholder.png\").default\r\n          }\r\n          style={{ width: 40, height: 40 }}\r\n        />\r\n        {target_len > 1 ? (\r\n          <div\r\n            style={{\r\n              marginBottom: 10,\r\n              position: \"absolute\",\r\n              textAlign: \"center\",\r\n              fontSize: 17,\r\n              color: Colors.white,\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            {title}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (!location)\r\n    return (\r\n      <div className=\"contain center\">\r\n        <Spin />\r\n      </div>\r\n    );\r\n\r\n  let center = { lat: location.latitude, lng: location.longitude },\r\n    zoom = 15;\r\n\r\n  if (Array.isArray(targets) && targets.length) {\r\n    const res = fitBounds(\r\n      bound_target.azimuth > 180\r\n        ? {\r\n            ne: {\r\n              lat: location.latitude,\r\n              lng: location.longitude,\r\n            },\r\n            sw: {\r\n              lat: bound_target.latitude,\r\n              lng: bound_target.longitude,\r\n            },\r\n          }\r\n        : {\r\n            nw: {\r\n              lat: location.latitude,\r\n              lng: location.longitude,\r\n            },\r\n            se: {\r\n              lat: bound_target.latitude,\r\n              lng: bound_target.longitude,\r\n            },\r\n          },\r\n      {\r\n        width: div?.current?.offsetWidth ?? 0, // Map width in pixels\r\n        height: div?.current?.offsetHeight ?? 0, // Map height in pixels\r\n      }\r\n    );\r\n    center = res.center;\r\n    zoom = (res.zoom ?? 10) - 0.5;\r\n  }\r\n\r\n  function ConvertDDToDMS(D) {\r\n    return [\r\n      0 | D,\r\n      \"D \",\r\n      0 | (((D = (D < 0 ? -D : D) + 1e-4) % 1) * 60),\r\n      \"' \",\r\n      0 | (((D * 60) % 1) * 60),\r\n      '\"',\r\n    ].join(\"\");\r\n  }\r\n\r\n  const utm = new utmObj();\r\n\r\n  if (!device) {\r\n    return (\r\n      <div className=\"column contain center\">\r\n        <div style={{ fontSize: 20, color: Colors.text, fontWeight: \"bold\" }}>\r\n          {string[\"101\"]}\r\n        </div>\r\n        <div\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            history.push(\"select-device\");\r\n          }}\r\n          style={{\r\n            margin: 10,\r\n            padding: \"10px 15px\",\r\n            backgroundColor: Colors.primary,\r\n            borderRadius: 10,\r\n            fontSize: 16,\r\n            color: Colors.text,\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {string.simdibaglan}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (device == \"loading\") {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: \"90vh\", width: \"100%\" }}>\r\n      <div ref={div} style={{ display: \"flex\", height: \"55%\", width: \"100%\" }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: \"AIzaSyAfEVYF6sbIlbFX_5td27xdbIj4hW0ixvk\" }}\r\n          center={center}\r\n          zoom={zoom}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({ map: _map, maps: _maps }) => {\r\n            map.current = _map;\r\n            maps = _maps;\r\n          }}\r\n          options={{\r\n            styles: [\r\n              { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\r\n              {\r\n                elementType: \"labels.text.stroke\",\r\n                stylers: [{ color: \"#242f3e\" }],\r\n              },\r\n              {\r\n                elementType: \"labels.text.fill\",\r\n                stylers: [{ color: \"#746855\" }],\r\n              },\r\n              ...require(\"../assets/styles/googleMap.json\"),\r\n            ],\r\n          }}\r\n        >\r\n          <Marker lat={location.latitude} lng={location.longitude} my />\r\n          {Array.isArray(targets) && targets.length\r\n            ? targets.map((target, index) => (\r\n                <Marker\r\n                  key={index}\r\n                  lat={target.latitude}\r\n                  lng={target.longitude}\r\n                  title={index + 1}\r\n                />\r\n              ))\r\n            : null}\r\n        </GoogleMapReact>\r\n      </div>\r\n      <div\r\n        className=\"flex-1 center column\"\r\n        style={{ height: \"45%\", width: \"100%\" }}\r\n      >\r\n        {target_len ? (\r\n          <div\r\n            className=\"flex-1 row center\"\r\n            style={{\r\n              ...(target_len == 1 ? {} : { display: \"-webkit-box\" }),\r\n              overflowX: \"scroll\",\r\n              width: \"100%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-around\",\r\n            }}\r\n          >\r\n            {Array.isArray(targets)\r\n              ? targets.map(\r\n                  ({ latitude, longitude, height, distance }, index) => (\r\n                    <div key={index} style={{ padding: 10, margin: 10 }}>\r\n                      {target_len > 1 ? (\r\n                        <div\r\n                          style={{\r\n                            textAlign: \"center\",\r\n                            width: \"100%\",\r\n                            fontSize: \"1.1rem\",\r\n                            marginBottom: 15,\r\n                            color: Colors.white,\r\n                            textDecorationLine: \"underline\",\r\n                            fontWeight: \"500\",\r\n                          }}\r\n                        >\r\n                          {\"Hedef \" + (index + 1)}\r\n                        </div>\r\n                      ) : null}\r\n\r\n                      <div\r\n                        className=\"flex row\"\r\n                        style={{\r\n                          backgroundColor: Colors.primary + \"20\",\r\n                          borderRadius: 10,\r\n                          padding: 5,\r\n                          margin: 5,\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className=\"flex column\"\r\n                          style={{\r\n                            padding: 10,\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={\r\n                              require(\"../assets/images/distance.png\").default\r\n                            }\r\n                            style={{ width: \"2.2rem\", height: \"2.2rem\" }}\r\n                          />\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.9rem\",\r\n                              color: Colors.white,\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {parseFloat(distance).toFixed(2) +\r\n                              distance_unit.unit}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.7rem\",\r\n                              color: Colors.primary,\r\n                            }}\r\n                          >\r\n                            {string.mesafe2}\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          className=\"flex column\"\r\n                          style={{\r\n                            padding: 10,\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={require(\"../assets/images/target.png\").default}\r\n                            style={{ width: \"2.2rem\", height: \"2.2rem\" }}\r\n                          />\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.9rem\",\r\n                              color: Colors.white,\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {\"±\" +\r\n                              parseFloat(\r\n                                distanceConversion(\r\n                                  location.accuracy,\r\n                                  DistanceUnitTypes.Metre.id,\r\n                                  distance_unit.id\r\n                                ).distance\r\n                              ).toFixed(2) +\r\n                              distance_unit.unit}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.7rem\",\r\n                              color: Colors.primary,\r\n                            }}\r\n                          >\r\n                            {string.konumdogrulugu}\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          className=\"flex column\"\r\n                          style={{\r\n                            padding: 10,\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={require(\"../assets/images/height.png\").default}\r\n                            style={{ width: \"2.2rem\", height: \"2.2rem\" }}\r\n                          />\r\n                          <div className=\"flex row center\">\r\n                            <div\r\n                              style={{\r\n                                fontSize: \"0.9rem\",\r\n                                color: Colors.white,\r\n                                fontWeight: \"bold\",\r\n                              }}\r\n                            >\r\n                              {parseFloat(\r\n                                height + (location.altitude ?? 0)\r\n                              ).toFixed(2) + distance_unit.unit}\r\n                            </div>\r\n                            {location.altitudeAccuracy ? (\r\n                              <div\r\n                                style={{\r\n                                  fontSize: \"0.7rem\",\r\n                                  color: Colors.white,\r\n                                  fontWeight: \"bold\",\r\n                                  marginLeft: 5,\r\n                                }}\r\n                              >\r\n                                {\"±\" +\r\n                                  parseInt(\r\n                                    distanceConversion(\r\n                                      location.altitudeAccuracy,\r\n                                      DistanceUnitTypes.Metre.id,\r\n                                      distance_unit.id\r\n                                    ).distance\r\n                                  )}\r\n                              </div>\r\n                            ) : null}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.7rem\",\r\n                              color: Colors.primary,\r\n                            }}\r\n                          >\r\n                            {string.yukseklik}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className=\"flex row\"\r\n                        style={{\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"space-between\",\r\n                          width: \"100%\",\r\n                        }}\r\n                      >\r\n                        <div\r\n                          className=\"flex-1 column\"\r\n                          style={{\r\n                            padding: 10,\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <div\r\n                            className=\"center\"\r\n                            style={{\r\n                              width: \"1.8rem\",\r\n                              height: \"1.8rem\",\r\n                              backgroundColor: Colors.primary,\r\n                              borderRadius: 100,\r\n                            }}\r\n                          >\r\n                            <div\r\n                              style={{\r\n                                width: \"0.9rem\",\r\n                                height: \"0.9rem\",\r\n                                backgroundColor: Colors.white,\r\n                                borderRadius: 100,\r\n                              }}\r\n                            ></div>\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.8rem\",\r\n                              color: Colors.white,\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {MStore.hedefkonumgosterimtipi === \"utm\"\r\n                              ? utm.convertLatLngToUtm(\r\n                                  location.latitude,\r\n                                  location.longitude,\r\n                                  3\r\n                                ).Easting +\r\n                                \" \" +\r\n                                string[\"saga\"]\r\n                              : ConvertDDToDMS(location.latitude) + \" N\"}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.8rem\",\r\n                              color: Colors.white,\r\n                              fontWeight: \"500\",\r\n                            }}\r\n                          >\r\n                            {MStore.hedefkonumgosterimtipi === \"utm\"\r\n                              ? utm.convertLatLngToUtm(\r\n                                  location.latitude,\r\n                                  location.longitude,\r\n                                  3\r\n                                ).Northing +\r\n                                \" \" +\r\n                                string[\"yukariya\"]\r\n                              : ConvertDDToDMS(location.longitude) + \" E\"}\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          className=\"flex-1\"\r\n                          style={{\r\n                            borderStyle: \"dashed\",\r\n                            borderWidth: 1,\r\n                            borderRadius: 1,\r\n                            borderColor: \"#667587\",\r\n                          }}\r\n                        />\r\n                        <div\r\n                          className=\"flex-1 column\"\r\n                          style={{\r\n                            padding: 10,\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={\r\n                              require(\"../assets/images/placeholder.png\")\r\n                                .default\r\n                            }\r\n                            style={{ width: \"1.8rem\", height: \"1.8rem\" }}\r\n                          />\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.8rem\",\r\n                              color: Colors.white,\r\n                              fontWeight: \"500\",\r\n                            }}\r\n                          >\r\n                            {MStore.hedefkonumgosterimtipi === \"utm\"\r\n                              ? utm.convertLatLngToUtm(latitude, longitude, 3)\r\n                                  .Easting +\r\n                                \" \" +\r\n                                string[\"saga\"]\r\n                              : ConvertDDToDMS(latitude) + \" N\"}\r\n                          </div>\r\n                          <div\r\n                            style={{\r\n                              fontSize: \"0.8rem\",\r\n                              color: Colors.white,\r\n                              fontWeight: \"500\",\r\n                            }}\r\n                          >\r\n                            {MStore.hedefkonumgosterimtipi === \"utm\"\r\n                              ? utm.convertLatLngToUtm(latitude, longitude, 3)\r\n                                  .Northing +\r\n                                \" \" +\r\n                                string[\"yukariya\"]\r\n                              : ConvertDDToDMS(longitude) + \" E\"}\r\n                          </div>\r\n                          <div\r\n                            onClick={() => {\r\n                              let txt =\r\n                                MStore.hedefkonumgosterimtipi === \"utm\"\r\n                                  ? utm.convertLatLngToUtm(\r\n                                      latitude,\r\n                                      longitude,\r\n                                      3\r\n                                    ).Easting +\r\n                                    \" \" +\r\n                                    string[\"saga\"]\r\n                                  : ConvertDDToDMS(latitude) + \" N\";\r\n\r\n                              txt += \"\\n\";\r\n\r\n                              txt +=\r\n                                MStore.hedefkonumgosterimtipi === \"utm\"\r\n                                  ? utm.convertLatLngToUtm(\r\n                                      latitude,\r\n                                      longitude,\r\n                                      3\r\n                                    ).Northing +\r\n                                    \" \" +\r\n                                    string[\"yukariya\"]\r\n                                  : ConvertDDToDMS(longitude) + \" E\";\r\n\r\n                              navigator.clipboard.writeText(txt);\r\n\r\n                              success(string[\"hedefkonumkopyalandi\"]);\r\n                            }}\r\n                            className=\"flex row center btn\"\r\n                            style={{\r\n                              padding: \"10px 15px\",\r\n                              borderRadius: 10,\r\n                              marginTop: 5,\r\n                              backgroundColor: Colors.primary,\r\n                            }}\r\n                          >\r\n                            <div\r\n                              style={{\r\n                                color: Colors.white,\r\n                                fontWeight: \"bold\",\r\n                                fontSize: 14,\r\n                                marginRight: 5,\r\n                              }}\r\n                            >\r\n                              {string.paylas}\r\n                            </div>\r\n                            <img\r\n                              src={\r\n                                require(\"../assets/images/share.png\").default\r\n                              }\r\n                              style={{ width: 18, height: 18 }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                )\r\n              : null}\r\n          </div>\r\n        ) : null}\r\n        <div\r\n          onClick={controlDevice}\r\n          className=\"flex row center btn\"\r\n          style={{\r\n            padding: \"10px 15px\",\r\n            margin: 10,\r\n            borderRadius: 10,\r\n            backgroundColor: Colors.primary,\r\n          }}\r\n        >\r\n          <div\r\n            style={{ color: Colors.white, fontWeight: \"bold\", fontSize: 14 }}\r\n          >\r\n            {string.atisyap}\r\n          </div>\r\n          <img\r\n            src={require(\"../assets/images/measure.png\").default}\r\n            style={{ width: 25, height: 25 }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaserMeter;\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\pages\\setting.js",["210","211","212"],"import React, { useEffect, useState } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { string } from \"../locales\";\r\nimport Header, { HelpText, MoreInfoButton } from \"../componenets/Header\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { Params } from \"../constants/Params\";\r\nimport { InputNumber, Spin } from \"antd\";\r\nimport { ReloadOutlined, RightOutlined } from \"@ant-design/icons\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport BLEService from \"../services/BLEService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport { MStore } from \"../stores/MainStore\";\r\nimport { setModalTypes } from \"../componenets/SetModal\";\r\nimport { osName, OsTypes } from \"react-device-detect\";\r\nimport { ipcRenderer } from \"electron\";\r\nconst geomagnetism = require(\"geomagnetism\");\r\n\r\nconst Setting = () => {\r\n  const history = useHistory();\r\n  const ble = IStore.ble;\r\n  const params = Params();\r\n  const usage_params = {\r\n    distance_unit: params.distance_unit,\r\n    article_mode: params.article_mode,\r\n    language: params.language,\r\n    angle_unit_type: params.angle_unit_type,\r\n    night_vision_mode: params.night_vision_mode,\r\n    device_sleep_time: params.device_sleep_time,\r\n    bluetooth_sleep_time: params.bluetooth_sleep_time,\r\n    bottom_door_lock: params.bottom_door_lock,\r\n    top_door_lock: params.top_door_lock,\r\n    magnetic_declination_angle: params.magnetic_declination_angle,\r\n  };\r\n\r\n  const [data, setData] = useState(ble.getData());\r\n  const [device, setDevice] = useState(\"loading\");\r\n\r\n  useEffect(() => {\r\n    BLEService.event.on(\"monitor\", _setData);\r\n    controlDevice();\r\n\r\n    switch (osName) {\r\n      case OsTypes.Windows:\r\n      case OsTypes.WindowsPhone:\r\n        try {\r\n          ipcRenderer.send(\"get-location\", null);\r\n          ipcRenderer.on(\"find-location\", getLocation);\r\n        } catch (e) {}\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return () => {\r\n      BLEService.event.removeListener(\"monitor\", _setData);\r\n      ipcRenderer.removeListener(\"find-location\", getLocation);\r\n    };\r\n  }, []);\r\n\r\n  function _setData({ all_data }) {\r\n    setData({ ...all_data });\r\n  }\r\n\r\n  function getLocation(e, res) {\r\n    magneticAngle({\r\n      latitude: parseFloat(res[0].replace(\",\", \".\")),\r\n      longitude: parseFloat(res[1].replace(\",\", \".\")),\r\n    });\r\n  }\r\n\r\n  function magneticAngle(coords) {\r\n    const info = geomagnetism\r\n      .model()\r\n      .point([coords.latitude, coords.longitude]);\r\n\r\n    if (info[\"decl\"]) {\r\n      IStore.decl = Number(parseFloat(info.decl).toFixed(1));\r\n      ble.sendDataToDevice(\r\n        params.magnetic_declination_angle.title,\r\n        params.magnetic_declination_angle.getHex\r\n      );\r\n    }\r\n  }\r\n\r\n  function reload() {\r\n    setData({\r\n      ...data,\r\n      ...{\r\n        distance_unit: \"\",\r\n        article_mode: \"\",\r\n        language: \"\",\r\n        angle_unit_type: \"\",\r\n        night_vision_mode: \"\",\r\n        device_sleep_time: null,\r\n        bluetooth_sleep_time: null,\r\n        bottom_door_lock: 0,\r\n        top_door_lock: 0,\r\n        magnetic_declination_angle: 0,\r\n      },\r\n    });\r\n\r\n    controlDevice();\r\n  }\r\n\r\n  async function controlDevice() {\r\n    const device = ble.getDevice();\r\n    setDevice(device);\r\n\r\n    if (device) {\r\n      getValues();\r\n    }\r\n  }\r\n\r\n  function getValues() {\r\n    for (let [key, param] of Object.entries(usage_params)) {\r\n      if (param.getHex) ble.sendDataToDevice(key, param.getHex);\r\n    }\r\n  }\r\n\r\n  if (!device) {\r\n    return (\r\n      <div className=\"column contain center\">\r\n        <div style={{ fontSize: 20, color: Colors.text, fontWeight: \"bold\" }}>\r\n          {string[\"101\"]}\r\n        </div>\r\n        <div\r\n          className=\"btn\"\r\n          onClick={() => {\r\n            history.push(\"select-device\");\r\n          }}\r\n          style={{\r\n            margin: 10,\r\n            padding: \"10px 15px\",\r\n            backgroundColor: Colors.primary,\r\n            borderRadius: 10,\r\n            fontSize: 16,\r\n            color: Colors.text,\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {string.simdibaglan}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (device == \"loading\") {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"center contain column\">\r\n      <div className=\"center\" style={{ width: \"100%\" }}>\r\n        <Header left={() => <HelpText />} right={() => <MoreInfoButton />} />\r\n      </div>\r\n\r\n      <div\r\n        className=\"flex row\"\r\n        style={{\r\n          width: \"50%\",\r\n          flexDirection: \"space-between\",\r\n          alignItems: \"center\",\r\n          fontSize: 25,\r\n          fontWeight: \"bold\",\r\n          color: Colors.primary,\r\n        }}\r\n      >\r\n        <div className=\"flex-1\"></div>\r\n        <div className=\"flex-3 center\" style={{ textAlign: \"center\" }}>\r\n          {string.ayarlar}\r\n        </div>\r\n        <div className=\"flex-1\" style={{ justifyContent: \"flex-end\" }}>\r\n          <div className=\"btn\" style={{ padding: 20 }} onClick={reload}>\r\n            <ReloadOutlined style={{ fontSize: 20, color: Colors.text }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"flex column scroll\"\r\n        style={{ width: \"100%\", height: \"100vh\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            alignSelf: \"center\",\r\n            padding: 20,\r\n            margin: 20,\r\n            borderRadius: 10,\r\n            width: \"50%\",\r\n          }}\r\n        >\r\n          {Object.entries(usage_params).map(\r\n            (\r\n              [\r\n                key,\r\n                { title, setHex = () => {}, options, type, numberParams = {} },\r\n              ],\r\n              index\r\n            ) => {\r\n              const value = data[key];\r\n\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"flex row btn\"\r\n                  style={{\r\n                    zIndex: 999,\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                    padding: 12,\r\n                    margin: \"15px 0px\",\r\n                    borderRadius: 15,\r\n                    backgroundColor: Colors.secondary,\r\n                  }}\r\n                  onClick={() => {\r\n                    if (value) {\r\n                      IStore.setSetModal({\r\n                        visible: true,\r\n                        title,\r\n                        value: value?.id ?? value,\r\n                        type,\r\n                        numberParams,\r\n                        options: options ? Object.values(options) : null,\r\n                        onChange: async (id) => {\r\n                          if (key === \"night_vision_mode\" && id === 1) {\r\n                            confirmAlert({\r\n                              title: string[\"uyari\"],\r\n                              message: string[\"ekranparlakligi\"],\r\n                              buttons: [\r\n                                {\r\n                                  label: string[\"hayir\"],\r\n                                  onClick: () => {},\r\n                                },\r\n                                {\r\n                                  label: string[\"evet\"],\r\n                                  onClick: () => {\r\n                                    ble.sendDataToDevice(key, setHex(id));\r\n                                  },\r\n                                },\r\n                              ],\r\n                            });\r\n                          } else ble.sendDataToDevice(key, setHex(id));\r\n\r\n                          return true;\r\n                        },\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      fontSize: 18,\r\n                      fontWeight: \"bold\",\r\n                      color: Colors.text,\r\n                    }}\r\n                  >\r\n                    {string[title]}\r\n                  </div>\r\n                  <div className=\"flex row center\">\r\n                    {value ? (\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flex: 2,\r\n                          textAlign: \"left\",\r\n                          color: Colors.text,\r\n                          padding: 10,\r\n                          fontSize: 16,\r\n                          fontWeight: \"bold\",\r\n                        }}\r\n                      >\r\n                        {value?.value\r\n                          ? string[value?.value] ?? value?.value\r\n                          : (numberParams?.fixed\r\n                              ? value / Math.pow(10, numberParams?.fixed)\r\n                              : value) +\r\n                            \"\" +\r\n                            (numberParams?.unit\r\n                              ? \" \" + numberParams?.unit\r\n                              : \"\")}\r\n                      </div>\r\n                    ) : (\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flex: 2,\r\n                          textAlign: \"left\",\r\n                          padding: 10,\r\n                        }}\r\n                      >\r\n                        <Spin />\r\n                      </div>\r\n                    )}\r\n                    <RightOutlined\r\n                      style={{ fontSize: 20, color: Colors.text }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            }\r\n          )}\r\n          <div\r\n            className=\"flex row btn\"\r\n            style={{\r\n              zIndex: 999,\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n              padding: 12,\r\n              margin: \"15px 0px\",\r\n              borderRadius: 15,\r\n              backgroundColor: Colors.secondary,\r\n            }}\r\n            onClick={() => {\r\n              IStore.setSetModal({\r\n                visible: true,\r\n                title: string[\"hedefkonumgosterimformati\"],\r\n                value: MStore.hedefkonumgosterimtipi,\r\n                type: setModalTypes.Select,\r\n                options: [\r\n                  {\r\n                    id: \"utm\",\r\n                    value: string[\"utm\"],\r\n                  },\r\n                  {\r\n                    id: \"latlong\",\r\n                    value: string[\"latlong\"],\r\n                  },\r\n                ],\r\n                onChange: async (id) => {\r\n                  MStore.hedefkonumgosterimtipi = id;\r\n                  return true;\r\n                },\r\n              });\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                fontSize: 18,\r\n                fontWeight: \"bold\",\r\n                color: Colors.text,\r\n              }}\r\n            >\r\n              {string[\"hedefkonumgosterimformati\"]}\r\n            </div>\r\n            <div className=\"flex row center\">\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flex: 2,\r\n                  textAlign: \"left\",\r\n                  color: Colors.text,\r\n                  padding: 10,\r\n                  fontSize: 16,\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                {string[MStore.hedefkonumgosterimtipi]}\r\n              </div>\r\n\r\n              <RightOutlined style={{ fontSize: 20, color: Colors.text }} />\r\n            </div>\r\n          </div>\r\n          <div style={{ height: 100 }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Setting);\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\componenets\\Header.js",["213","214","215","216"],"import React, { useEffect, useState } from \"react\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { string } from \"../locales\";\r\nimport { LeftOutlined } from \"@ant-design/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { Contact } from \"../pages/moreInfo\";\r\nimport { Modal } from \"antd\";\r\n\r\nexport function HelpText() {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  function ContactModal() {\r\n    return (\r\n      <Modal\r\n        bodyStyle={{ padding: 0, backgroundColor: Colors.darkGray }}\r\n        centered\r\n        closable={false}\r\n        visible={visible}\r\n        okText={string.kaydet}\r\n        cancelText={string.kapat}\r\n        onOk={() => {\r\n          setVisible(false);\r\n        }}\r\n        onCancel={() => {\r\n          setVisible(false);\r\n        }}\r\n        footer={null}\r\n      >\r\n        <Contact onClose={() => setVisible(false)} />\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ContactModal />\r\n      <div\r\n        className=\"btn\"\r\n        onClick={() => {\r\n          setVisible(true);\r\n        }}\r\n        style={{\r\n          cursor: \"pointer\",\r\n          padding: 20,\r\n          textDecorationLine: \"underline\",\r\n          fontWeigh: \"bold\",\r\n          fontSize: 14,\r\n        }}\r\n      >\r\n        {string.yardimaihtiyacinvarmi}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function MoreInfoButton({ close = false }) {\r\n  const history = useHistory();\r\n\r\n  if (close) {\r\n    return (\r\n      <div>\r\n        <img\r\n          style={{ marginTop: 15, width: 70, height: 75 }}\r\n          src={require(\"../assets/images/secili-dahafazla.png\").default}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        history.push(\"more-info\");\r\n      }}\r\n      className=\"btn\"\r\n    >\r\n      <img\r\n        style={{ width: 50, height: 50 }}\r\n        src={require(\"../assets/images/dahafazla.png\").default}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header({\r\n  onBack,\r\n  left = () => <div />,\r\n  title = \"\",\r\n  right = () => <div />,\r\n}) {\r\n  return (\r\n    <div\r\n      className=\"flex row\"\r\n      style={{\r\n        flexDirection: \"space-between\",\r\n        alignItems: \"center\",\r\n        color: Colors.text,\r\n        width: \"100%\",\r\n        height: 60,\r\n        backgroundColor: Colors.darkGray,\r\n      }}\r\n    >\r\n      <div className=\"flex-1 left\">\r\n        {onBack ? (\r\n          <div className=\"btn\" onClick={onBack} style={{ padding: 20 }}>\r\n            <LeftOutlined style={{ fontSize: 25, color: Colors.text }} />\r\n          </div>\r\n        ) : null}\r\n        {left()}\r\n      </div>\r\n      <div\r\n        className=\"flex-1 center\"\r\n        style={{ fontSize: 18, fontWeight: \"bold\" }}\r\n      >\r\n        {title}\r\n      </div>\r\n      <div className=\"flex-1 right\">{right()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Params.ts",["217"],"import {\r\n  AngleUnitTypes,\r\n  ArticleMode,\r\n  BluetoothSleepTime,\r\n  DeviceSleepTime,\r\n  DistanceUnitTypes,\r\n  Language,\r\n  NightVisionMode,\r\n} from \"./Config\";\r\nimport { string } from \"../locales\";\r\nimport { setModalTypes } from \"../componenets/SetModal\";\r\nimport { productId } from \"../functions/AES\";\r\n\r\ndeclare global {\r\n  interface Array<T> {\r\n    checksum(data: any): Array<T>;\r\n  }\r\n}\r\n\r\nexport const PROCESS_KEYS = {\r\n  KimlikDurumBilgisi: 0xa0,\r\n  KimlikDogrulama: 0xa1,\r\n  KimlikDogrulamaSorgu: 0xa2,\r\n  KimlikDogrulamaSifreli: 0xa3,\r\n  DurumBilgisi: 0x10,\r\n  Versiyon: 0x11,\r\n  Mesafe: 0x12,\r\n  CIT: 0x13,\r\n  AltKapiLimitiYaz: 0x14,\r\n  AltKapiLimiti: 0x15,\r\n  UstKapiLimitiYaz: 0x16,\r\n  UstKapiLimiti: 0x17,\r\n  ArtikilYaz: 0x18,\r\n  Artikil: 0x19,\r\n  DilYaz: 0x1a,\r\n  Dil: 0x1b,\r\n  Pusula: 0x1c,\r\n  MesafeVePusula: 0x1d,\r\n  Sicaklik: 0x1e,\r\n  AciOlcuBirimiYaz: 0x1f,\r\n  AciOlcuBirimi: 0x20,\r\n  MesafeOlcuBirimiYaz: 0x21,\r\n  MesafeOlcuBirimi: 0x22,\r\n  GeceGorusYaz: 0x23,\r\n  GeceGorus: 0x24,\r\n  CihazKapanmaSuresiYaz: 0x25,\r\n  CihazKapanmaSuresi: 0x26,\r\n  BluetoothKapanmaSuresiYaz: 0x29,\r\n  BluetoothKapanmaSuresi: 0x2a,\r\n  ManyetikSapmaAcisiYaz: 0x2b,\r\n  ManyetikSapmaAcisi: 0x2c,\r\n  SeriNo: 0x51,\r\n  Sayac: 0x53,\r\n  Basinc: 0x68,\r\n};\r\n\r\nexport const PROCESS_KEYS_LENGTH = {\r\n  KimlikDurumBilgisi: {\r\n    key: 0xa0,\r\n    length: 5,\r\n  },\r\n  KimlikDogrulama: {\r\n    key: 0xa1,\r\n    length: 5,\r\n  },\r\n  KimlikDogrulamaSorgu: {\r\n    key: 0xa2,\r\n    length: 19,\r\n  },\r\n  KimlikDogrulamaSifreli: {\r\n    key: 0xa3,\r\n    length: 39,\r\n  },\r\n  DurumBilgisi: {\r\n    key: 0x10,\r\n    length: 5,\r\n  },\r\n  Versiyon: {\r\n    key: 0x11,\r\n    length: 5,\r\n  },\r\n  Mesafe: {\r\n    key: 0x12,\r\n    length: 13,\r\n  },\r\n  CIT: {\r\n    key: 0x13,\r\n    length: 5,\r\n  },\r\n  AltKapiLimitiYaz: {\r\n    key: 0x14,\r\n    length: 5,\r\n  },\r\n  AltKapiLimiti: {\r\n    key: 0x15,\r\n    length: 5,\r\n  },\r\n  UstKapiLimitiYaz: {\r\n    key: 0x16,\r\n    length: 5,\r\n  },\r\n  UstKapiLimiti: {\r\n    key: 0x17,\r\n    length: 5,\r\n  },\r\n  ArtikilYaz: {\r\n    key: 0x18,\r\n    length: 5,\r\n  },\r\n  Artikil: {\r\n    key: 0x19,\r\n    length: 5,\r\n  },\r\n  DilYaz: {\r\n    key: 0x1a,\r\n    length: 5,\r\n  },\r\n  Dil: {\r\n    key: 0x1b,\r\n    length: 5,\r\n  },\r\n  Pusula: {\r\n    key: 0x1c,\r\n    length: 10,\r\n  },\r\n  MesafeVePusula: {\r\n    key: 0x1d,\r\n    length: 20,\r\n  },\r\n  Sicaklik: {\r\n    key: 0x1e,\r\n    length: 5,\r\n  },\r\n  AciOlcuBirimiYaz: {\r\n    key: 0x1f,\r\n    length: 5,\r\n  },\r\n  AciOlcuBirimi: {\r\n    key: 0x20,\r\n    length: 5,\r\n  },\r\n  MesafeOlcuBirimiYaz: {\r\n    key: 0x21,\r\n    length: 5,\r\n  },\r\n  MesafeOlcuBirimi: {\r\n    key: 0x22,\r\n    length: 5,\r\n  },\r\n  GeceGorusYaz: {\r\n    key: 0x23,\r\n    length: 5,\r\n  },\r\n  GeceGorus: {\r\n    key: 0x24,\r\n    length: 5,\r\n  },\r\n  CihazKapanmaSuresiYaz: {\r\n    key: 0x25,\r\n    length: 5,\r\n  },\r\n  CihazKapanmaSuresi: {\r\n    key: 0x26,\r\n    length: 5,\r\n  },\r\n  BluetoothKapanmaSuresiYaz: {\r\n    key: 0x29,\r\n    length: 5,\r\n  },\r\n  BluetoothKapanmaSuresi: {\r\n    key: 0x2a,\r\n    length: 5,\r\n  },\r\n  ManyetikSapmaAcisiYaz: {\r\n    key: 0x2b,\r\n    length: 5,\r\n  },\r\n  ManyetikSapmaAcisi: {\r\n    key: 0x2c,\r\n    length: 5,\r\n  },\r\n  SeriNo: {\r\n    key: 0x51,\r\n    length: 5,\r\n  },\r\n  Sayac: {\r\n    key: 0x53,\r\n    length: 7,\r\n  },\r\n  Basinc: {\r\n    key: 0x68,\r\n    length: 7,\r\n  },\r\n};\r\n\r\nArray.prototype.checksum = function (data: number) {\r\n  return checkSum([...this, ...intToBytes(data)]);\r\n};\r\n\r\nfunction intToBytes(x: number) {\r\n  return [x << 16, x << 24].map((z) => z >>> 24);\r\n}\r\n\r\nfunction checkSum(bytes: any) {\r\n  let checksum = 0x00;\r\n  for (let i = 0; i < bytes.length; i++) checksum += bytes[i] & 0xff;\r\n\r\n  checksum = (~checksum + 1) & 0xff;\r\n  return [...bytes, checksum];\r\n}\r\n\r\nexport const Params = () => {\r\n  return {\r\n    kimlikdogrulama: {\r\n      title: \"kimlikdogrulama\",\r\n      getHex: checkSum([0xa8, PROCESS_KEYS.KimlikDogrulama, 0x00, 0x00]),\r\n    },\r\n    kimlikdurumbilgisi: {\r\n      title: \"durumbilgisi\",\r\n      getHex: (cevapVerilenKomut: number, durumBilgisi: number) =>\r\n        checkSum([\r\n          0xa8,\r\n          PROCESS_KEYS.KimlikDurumBilgisi,\r\n          cevapVerilenKomut,\r\n          durumBilgisi,\r\n        ]),\r\n    },\r\n    kimlikdogrulamasorgu: {\r\n      title: \"kimlikdogrulamasorgu\",\r\n      getHex: (dogrulamaVerisi: Uint8Array) =>\r\n        checkSum([0xa8, PROCESS_KEYS.KimlikDogrulamaSorgu, ...dogrulamaVerisi]),\r\n    },\r\n    kimlikdogrulamasorgususifreli: {\r\n      title: \"kimlikdogrulamasorgususifreli\",\r\n      getHex: (iv: Uint8Array, sifrelenmisDogrulamaVerisi: Uint8Array) =>\r\n        checkSum([\r\n          0xa8,\r\n          PROCESS_KEYS.KimlikDogrulamaSifreli,\r\n          ...iv,\r\n          ...sifrelenmisDogrulamaVerisi,\r\n          ...productId,\r\n        ]),\r\n    },\r\n    statuses: {\r\n      title: \"cihazdurumbilgisi\",\r\n      getHex: [0xa5, PROCESS_KEYS.DurumBilgisi].checksum(0),\r\n    },\r\n    device_version: {\r\n      title: \"cihazversiyonu\",\r\n      getHex: [0xa5, PROCESS_KEYS.Versiyon].checksum(0),\r\n    },\r\n    bottom_door_lock: {\r\n      title: \"altkapikilidi\",\r\n      type: setModalTypes.Number,\r\n      numberParams: { fixed: 0, min: 0, max: 15000, unit: string.metre2 },\r\n      setHex: (number: number) =>\r\n        [0xa5, PROCESS_KEYS.AltKapiLimitiYaz].checksum(number),\r\n      getHex: [0xa5, PROCESS_KEYS.AltKapiLimiti].checksum(0),\r\n    },\r\n    top_door_lock: {\r\n      title: \"ustkapikilidi\",\r\n      type: setModalTypes.Number,\r\n      numberParams: { fixed: 0, min: 0, max: 5000, unit: string.metre2 },\r\n      setHex: (number: number) =>\r\n        [0xa5, PROCESS_KEYS.UstKapiLimitiYaz].checksum(number),\r\n      getHex: [0xa5, PROCESS_KEYS.UstKapiLimiti].checksum(0),\r\n    },\r\n    article_mode: {\r\n      title: \"artikilmodu\",\r\n      options: ArticleMode,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) => [0xa5, PROCESS_KEYS.ArtikilYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.Artikil].checksum(0),\r\n    },\r\n    language: {\r\n      title: \"dilsecimi\",\r\n      options: Language,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) => [0xa5, PROCESS_KEYS.DilYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.Dil].checksum(0),\r\n    },\r\n    distance_and_compass: {\r\n      title: \"mesafevepusula\",\r\n      getHex: [0xa5, PROCESS_KEYS.MesafeVePusula].checksum(0),\r\n    },\r\n    temperature: {\r\n      title: \"sicaklik\",\r\n      getHex: [0xa5, PROCESS_KEYS.Sicaklik].checksum(0),\r\n    },\r\n    angle_unit_type: {\r\n      title: \"aciolcubirimi\",\r\n      options: AngleUnitTypes,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) =>\r\n        [0xa5, PROCESS_KEYS.AciOlcuBirimiYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.AciOlcuBirimi].checksum(0),\r\n    },\r\n    distance_unit: {\r\n      title: \"mesafeolcubirimi\",\r\n      options: DistanceUnitTypes,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) =>\r\n        [0xa5, PROCESS_KEYS.MesafeOlcuBirimiYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.MesafeOlcuBirimi].checksum(0),\r\n    },\r\n    night_vision_mode: {\r\n      title: \"gecegorusmodu\",\r\n      options: NightVisionMode,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) => [0xa5, PROCESS_KEYS.GeceGorusYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.GeceGorus].checksum(0),\r\n    },\r\n    device_sleep_time: {\r\n      title: \"cihazkapanmasuresi\",\r\n      options: DeviceSleepTime,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) =>\r\n        [0xa5, PROCESS_KEYS.CihazKapanmaSuresiYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.CihazKapanmaSuresi].checksum(0),\r\n    },\r\n    bluetooth_sleep_time: {\r\n      title: \"bluetoothzamanasimisuresi\",\r\n      options: BluetoothSleepTime,\r\n      type: setModalTypes.Select,\r\n      setHex: (id: number) =>\r\n        [0xa5, PROCESS_KEYS.BluetoothKapanmaSuresiYaz].checksum(id),\r\n      getHex: [0xa5, PROCESS_KEYS.BluetoothKapanmaSuresi].checksum(0),\r\n    },\r\n    magnetic_declination_angle: {\r\n      title: \"manyetiksapmaacisi\",\r\n      type: setModalTypes.Number,\r\n      numberParams: { fixed: 1, min: -3599, max: 3599, unit: string.derece },\r\n      setHex: (number: number) =>\r\n        [0xa5, PROCESS_KEYS.ManyetikSapmaAcisiYaz].checksum(number),\r\n      getHex: [0xa5, PROCESS_KEYS.ManyetikSapmaAcisi].checksum(0),\r\n    },\r\n    serial_no: {\r\n      title: \"serino\",\r\n      getHex: [0xa6, PROCESS_KEYS.SeriNo].checksum(0),\r\n    },\r\n    shot_counter: {\r\n      title: \"atissayaci\",\r\n      getHex: [0xa6, PROCESS_KEYS.Sayac].checksum(0),\r\n    },\r\n    pressure: {\r\n      title: \"basinc\",\r\n      getHex: [0xa6, PROCESS_KEYS.Basinc].checksum(0),\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\MainStore.ts",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Config.ts",["218","219"],"import { string } from \"../locales\";\r\nimport { success } from \"../functions/toast\";\r\nconst shell = require(\"electron\").shell;\r\n\r\nexport const contacts = {\r\n  Address: {\r\n    title: \"adres\",\r\n    value:\r\n      \"Balıkhisar Mahallesi Koca Seyit Onbaşı Caddesi No: 1 Akyurt-Ankara P.K. 20 Akyurt, 06750 Ankara, Türkiye\",\r\n    onPress: (address: any) => {\r\n      shell.openExternal(`https://goo.gl/maps/mQzWFxXfz91hY4DL6`);\r\n    },\r\n  },\r\n  Email: {\r\n    title: \"mgeo_email\",\r\n    value: \"mgeo_musteri@aselsan.com.tr\",\r\n    onPress: (email: any) => {\r\n      shell.openExternal(`mailto:${email}`);\r\n    },\r\n  },\r\n  Phone: {\r\n    title: \"mgeo_telefon\",\r\n    value: \"+90 850 360 10 30\",\r\n    onPress: (phone: any) => {\r\n      shell.openExternal(`tel:${phone}`);\r\n    },\r\n  },\r\n  Phone2: {\r\n    title: \"telefon\",\r\n    value: \"+90 312 847 53 00\",\r\n    onPress: (phone: any) => {\r\n      shell.openExternal(`tel:${phone}`);\r\n    },\r\n  },\r\n  Faks: {\r\n    title: \"faks\",\r\n    value: \"+90 312 847 53 20\",\r\n    onPress: (phone: string) => {\r\n      navigator.clipboard.writeText(phone);\r\n\r\n      success(string[\"fakskopyalandi\"]);\r\n    },\r\n  },\r\n};\r\n\r\nexport const sss =\r\n  string.dil == \"tr\"\r\n    ? {\r\n        Application: [\r\n          {\r\n            title: \"Uygulama Soru 1\",\r\n            content: \"Cevap 1\",\r\n          },\r\n          {\r\n            title: \"Uygulama Soru 2\",\r\n            content: \"Cevap 2\",\r\n          },\r\n          {\r\n            title: \"Uygulama Soru 3\",\r\n            content: \"Cevap 3\",\r\n          },\r\n        ],\r\n        DEVICE: [\r\n          {\r\n            title: \"Cihaz Soru 1\",\r\n            content: \"Cevap 1\",\r\n          },\r\n          {\r\n            title: \"Cihaz Soru 2\",\r\n            content: \"Cevap 2\",\r\n          },\r\n          {\r\n            title: \"Cihaz Soru 3\",\r\n            content: \"Cevap 3\",\r\n          },\r\n        ],\r\n      }\r\n    : {\r\n        Application: [\r\n          {\r\n            title: \"Application Ask 1\",\r\n            content: \"Answer 1\",\r\n          },\r\n          {\r\n            title: \"Application Ask 2\",\r\n            content: \"Answer 2\",\r\n          },\r\n          {\r\n            title: \"Application Ask 3\",\r\n            content: \"Answer 3\",\r\n          },\r\n        ],\r\n        DEVICE: [\r\n          {\r\n            title: \"Device Ask 1\",\r\n            content: \"Answer 1\",\r\n          },\r\n          {\r\n            title: \"Device Ask 2\",\r\n            content: \"Answer 2\",\r\n          },\r\n          {\r\n            title: \"Device Ask 3\",\r\n            content: \"Answer 3\",\r\n          },\r\n        ],\r\n      };\r\n\r\nexport const HomeScreenTypes = {\r\n  MesafeVePusula: {\r\n    id: 0,\r\n    value: \"mesafevepusula\",\r\n  },\r\n  Pusula: {\r\n    id: 1,\r\n    value: \"pusula\",\r\n  },\r\n  Mesafe: {\r\n    id: 2,\r\n    value: \"mesafe\",\r\n  },\r\n};\r\n\r\nexport const DistanceUnitTypes = {\r\n  Metre: {\r\n    id: 0,\r\n    value: \"metre\",\r\n    symbol: \"m\",\r\n    toFeet: (f: number) => parseFloat((f * 3.281).toString()),\r\n  },\r\n  Feet: {\r\n    id: 1,\r\n    value: \"feet\",\r\n    symbol: \"ft\",\r\n    toMeter: (f: number) => parseFloat((f / 3.281).toString()),\r\n  },\r\n};\r\n\r\nexport const AngleUnitTypes = {\r\n  Derece: {\r\n    id: 0,\r\n    value: \"derece\",\r\n    symbol: \"°\",\r\n  },\r\n  Milyem6000: {\r\n    id: 1,\r\n    value: \"6000 Milyem\",\r\n    symbol: \"m/\",\r\n    toDegree: (m: number) => m * (360 / 6000),\r\n  },\r\n  Milyem6300: {\r\n    id: 2,\r\n    value: \"6300 Milyem\",\r\n    symbol: \"m/\",\r\n    toDegree: (m: number) => m * (360 / 6300),\r\n  },\r\n  Milyem6400: {\r\n    id: 3,\r\n    value: \"6400 Milyem\",\r\n    symbol: \"m/\",\r\n    toDegree: (m: number) => m * (360 / 6400),\r\n  },\r\n};\r\n\r\nexport const OdometerActivityTypes = {\r\n  Kapali: {\r\n    id: \"0\",\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: \"1\",\r\n    value: \"acik\",\r\n  },\r\n};\r\n\r\nexport const CompassActivityTypes = {\r\n  Kapali: {\r\n    id: \"0\",\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: \"1\",\r\n    value: \"acik\",\r\n  },\r\n};\r\n\r\nexport const BluetoothActivityTypes = {\r\n  Kapali: {\r\n    id: \"0\",\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: \"1\",\r\n    value: \"acik\",\r\n  },\r\n};\r\n\r\nexport const OdometerErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  HataYok: {\r\n    id: \"10\",\r\n    value: \"hatayok\",\r\n  },\r\n  HataVar: {\r\n    id: \"11\",\r\n    value: \"hatavar\",\r\n  },\r\n};\r\n\r\nexport const CompassErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  HataYok: {\r\n    id: \"10\",\r\n    value: \"hatayok\",\r\n  },\r\n  HataVar: {\r\n    id: \"11\",\r\n    value: \"hatavar\",\r\n  },\r\n};\r\n\r\nexport const BluetoothErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  HataVar: {\r\n    id: \"10\",\r\n    value: \"hatavar\",\r\n  },\r\n  HataYok: {\r\n    id: \"11\",\r\n    value: \"hatayok\",\r\n  },\r\n};\r\n\r\nexport const BatteryErrorTypes = {\r\n  BilgiYok: {\r\n    id: \"00\",\r\n    value: \"bilgiyok\",\r\n  },\r\n  NA: {\r\n    id: \"01\",\r\n    value: \"N/A\",\r\n  },\r\n  PilGucuIyi: {\r\n    id: \"10\",\r\n    value: \"pilgucuiyi\",\r\n  },\r\n  PilGucuZayif: {\r\n    id: \"11\",\r\n    value: \"pilgucuzayif\",\r\n  },\r\n};\r\n\r\nexport const ArticleMode = {\r\n  Kapali: {\r\n    id: 0,\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: 1,\r\n    value: \"acik\",\r\n  },\r\n  Otomatik: {\r\n    id: 2,\r\n    value: \"otomatik\",\r\n  },\r\n};\r\n\r\nexport const Language = {\r\n  Turkce: {\r\n    id: 0,\r\n    value: \"turkce\",\r\n  },\r\n  Ingilizce: {\r\n    id: 1,\r\n    value: \"ingilizce\",\r\n  },\r\n};\r\n\r\nexport const NightVisionMode = {\r\n  Kapali: {\r\n    id: 0,\r\n    value: \"kapali\",\r\n  },\r\n  Acik: {\r\n    id: 1,\r\n    value: \"acik\",\r\n  },\r\n};\r\n\r\nexport const DeviceSleepTime = {\r\n  t0: {\r\n    id: 0,\r\n    value: \"sonsuz\",\r\n  },\r\n  t20: {\r\n    id: 1,\r\n    value: \"20 \" + string.saniye,\r\n  },\r\n  t30: {\r\n    id: 2,\r\n    value: \"30 \" + string.saniye,\r\n  },\r\n  t60: {\r\n    id: 3,\r\n    value: \"1 \" + string.dakika,\r\n  },\r\n  t120: {\r\n    id: 4,\r\n    value: \"2 \" + string.dakika,\r\n  },\r\n  t300: {\r\n    id: 5,\r\n    value: \"5 \" + string.dakika,\r\n  },\r\n  t600: {\r\n    id: 6,\r\n    value: \"10 \" + string.dakika,\r\n  },\r\n};\r\n\r\nexport const BluetoothSleepTime = {\r\n  t0: {\r\n    id: 0,\r\n    value: \"sonsuz\",\r\n  },\r\n  t20: {\r\n    id: 1,\r\n    value: \"20 \" + string.saniye,\r\n  },\r\n  t30: {\r\n    id: 2,\r\n    value: \"30 \" + string.saniye,\r\n  },\r\n  t60: {\r\n    id: 3,\r\n    value: \"1 \" + string.dakika,\r\n  },\r\n  t120: {\r\n    id: 4,\r\n    value: \"2 \" + string.dakika,\r\n  },\r\n  t300: {\r\n    id: 5,\r\n    value: \"5 \" + string.dakika,\r\n  },\r\n  t600: {\r\n    id: 6,\r\n    value: \"10 \" + string.dakika,\r\n  },\r\n};\r\n\r\nexport function findType(data: any, id: any, key = \"value\") {\r\n  let res: any = \" \";\r\n  try {\r\n    res = Object.values(data).find((e: any) => e.id == id);\r\n    if (key) res = res[key];\r\n  } catch (e) {}\r\n  return res;\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\constants\\Colors.ts",["220"],"export default {\r\n  darkPrimary: \"#002067\",\r\n  primary: \"#024089\",\r\n  lightPrimary: \"#2462ab\",\r\n  secondary: \"#182b3f\",\r\n  white: \"white\",\r\n  black: \"black\",\r\n  gray: \"#8d8b8b\",\r\n  lightGray: \"#f5f5f5\",\r\n  darkGray: \"#1e2227\",\r\n  lightBlack: \"#0f1013\",\r\n  text:\"#a4a5a2\",\r\n  red:\"#B71C1C\",\r\n  green:\"#2E7D32\",\r\n  transparent: \"transparent\",\r\n};\r\n\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\stores\\InstantStore.ts",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\services\\BLEService.ts",["221","222","223","224","225","226","227","228"],"import { AngleUnitTypes, DistanceUnitTypes } from \"../constants/Config\";\r\nimport { error } from \"../functions/toast\";\r\nimport { findData } from \"../functions/findData\";\r\nimport DeviceEventEmitter from \"events\";\r\nimport { Base64ToHex, HexToBase64 } from \"../functions/Buffer\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { l_moment } from \"../functions/cMoment\";\r\nimport { createIV, encrypt } from \"../functions/AES\";\r\nimport { flattenDeep } from \"lodash\";\r\nimport { string } from \"../locales\";\r\n\r\nclass BLEService {\r\n  private device: any = null;\r\n  public characteristic: any = null;\r\n  static _this: BLEService;\r\n  private static event: DeviceEventEmitter = new DeviceEventEmitter();\r\n\r\n  private data = {\r\n    serial_no: \"\",\r\n    device_version: \"\",\r\n    temperature: \"\",\r\n    pressure: \"\",\r\n    shot_counter: \"\",\r\n    statuses: {\r\n      odometer_activity: {\r\n        title: \"lazermesafeolceraktifligi\",\r\n        value: null,\r\n      },\r\n      compass_activity: {\r\n        title: \"pusulaaktifligi\",\r\n        value: null,\r\n      },\r\n      bluetooth_activity: {\r\n        title: \"bluetoothaktifligi\",\r\n        value: null,\r\n      },\r\n      odometer_error: {\r\n        title: \"lazermesafeolcerhatabilgisi\",\r\n        value: null,\r\n      },\r\n      compass_error: {\r\n        title: \"pusulahatabilgisi\",\r\n        value: null,\r\n      },\r\n      bluetooth_error: {\r\n        title: \"bluetoothhatabilgisi\",\r\n        value: null,\r\n      },\r\n      battery_error: {\r\n        title: \"bataryahatabilgisi\",\r\n        value: null,\r\n      },\r\n    },\r\n    distance_unit: \"\",\r\n    article_mode: \"\",\r\n    distance_and_compass: {\r\n      distance: 0,\r\n      distance_unit: DistanceUnitTypes.Metre.id,\r\n      angle_unit: AngleUnitTypes.Derece.id,\r\n      azimuth: 0,\r\n      elevation: 0,\r\n      roll: 0,\r\n    },\r\n    language: \"\",\r\n    angle_unit_type: \"\",\r\n    night_vision_mode: \"\",\r\n    device_sleep_time: null,\r\n    bluetooth_sleep_time: null,\r\n    bottom_door_lock: 0,\r\n    top_door_lock: 0,\r\n    magnetic_declination_angle: 0,\r\n  };\r\n\r\n  constructor() {\r\n    BLEService._this = this;\r\n  }\r\n\r\n  public setData(new_data: any) {\r\n    BLEService._this.data = { ...BLEService._this.data, ...new_data };\r\n  }\r\n  public getData() {\r\n    return BLEService._this.data;\r\n  }\r\n\r\n  public setDevice(device: any) {\r\n    BLEService._this.device = device;\r\n  }\r\n\r\n  public getDevice() {\r\n    return BLEService._this.device;\r\n  }\r\n\r\n  public sendDataToDevice(_key: string, data: any) {\r\n    let device = BLEService._this.getDevice();\r\n    if (!device) {\r\n      throw \"no_connect1\";\r\n    }\r\n\r\n    if (IStore.isEncryptedCommunication) {\r\n      const length = data.length % 16;\r\n      const padding = 16 - length;\r\n\r\n      data = data.concat(new Array(padding).fill(0x00));\r\n\r\n      const iv = createIV();\r\n\r\n      let encrypted = encrypt(data, iv);\r\n\r\n      let message: any = [...iv, ...encrypted].map((e: number) => {\r\n        if (e == 0x7e) {\r\n          return [0x7d, 0x5e];\r\n        } else if (e == 0x7d) {\r\n          return [0x7d, 0x5d];\r\n        }\r\n\r\n        return e;\r\n      });\r\n\r\n      message = flattenDeep(message);\r\n\r\n      data = [0x7e, ...message, 0x7e];\r\n    }\r\n\r\n    IStore.queueService.sendMessageQueue.push({\r\n      data,\r\n    });\r\n  }\r\n\r\n  public startListener() {\r\n    const device = BLEService._this.getDevice();\r\n\r\n    if (!device) throw \"no_connect1\";\r\n\r\n    /* device.addEventListener(\"gattserverdisconnected\", () => {\r\n      BLEService._this.setDevice(null);\r\n    });*/\r\n\r\n    device\r\n      .getPrimaryService(\"2456e1b9-26e2-8f83-e744-f34f01e9d701\")\r\n      .then((service: any) => {\r\n        return service.getCharacteristic(\r\n          \"2456e1b9-26e2-8f83-e744-f34f01e9d703\"\r\n        );\r\n      })\r\n      .then((_characteristic: any) => {\r\n        BLEService._this.characteristic = _characteristic;\r\n        BLEService._this.characteristic.addEventListener(\r\n          \"characteristicvaluechanged\",\r\n          BLEService._this.onChangeListener\r\n        );\r\n        BLEService._this.characteristic.startNotifications();\r\n      })\r\n      .catch((e: any) => {\r\n        // console.warn(e);\r\n        error(string[\"baglantihatasi\"]);\r\n      });\r\n  }\r\n\r\n  public onChangeListener(event: any) {\r\n    let value = event.target.value;\r\n\r\n    if (value) {\r\n      IStore.queueService.receiveMessageQueue.push({\r\n        data: [...new Uint8Array(value.buffer)],\r\n      });\r\n    }\r\n  }\r\n\r\n  public stopListener() {\r\n    try {\r\n      IStore.queueService.RECEIVE_MESSAGE_BUFFER = [];\r\n      IStore.isEncryptedCommunication = false;\r\n      BLEService._this.characteristic.removeEventListener(\r\n        \"characteristicvaluechanged\",\r\n        BLEService._this.onChangeListener\r\n      );\r\n      BLEService._this.characteristic = null;\r\n    } catch {}\r\n  }\r\n}\r\n\r\nexport default BLEService;\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Conversions.tsx",["229","230","231","232","233","234"],"import {AngleUnitTypes, DistanceUnitTypes, findType} from \"../constants/Config\";\r\n\r\n\r\nexport function distanceConversion(distance:number,unit1:any,unit2:any){\r\n    let unit\r\n    try {\r\n        unit1 = findType(DistanceUnitTypes,unit1,\"\")\r\n        unit2 = findType(DistanceUnitTypes,unit2,\"\")\r\n        unit = unit2.symbol\r\n\r\n        if(unit1.id == DistanceUnitTypes.Metre.id && unit2.id == DistanceUnitTypes.Feet.id){\r\n            distance = unit1.toFeet(distance)\r\n        }else if(unit1.id == DistanceUnitTypes.Feet.id && unit2.id == DistanceUnitTypes.Metre.id){\r\n            distance = unit1.toMeter(distance)\r\n        }\r\n    }catch (e) {\r\n        return {distance: 0,unit:\"\"}\r\n    }\r\n\r\n\r\n    return {distance,unit}\r\n}\r\n\r\n\r\nexport function angleConversion(angle:number,unit1:any,unit2:any){\r\n\r\n    let unit\r\n    try {\r\n        unit1 = findType(AngleUnitTypes,unit1,\"\")\r\n        unit2 = findType(AngleUnitTypes,unit2,\"\")\r\n        unit = unit2.symbol\r\n\r\n        if(unit1.id != AngleUnitTypes.Derece.id && unit2.id == AngleUnitTypes.Derece.id){\r\n            angle = unit1.toDegree(angle)\r\n        }\r\n\r\n    }catch (e) {\r\n\r\n        return {angle: 0,unit:\"\"}\r\n    }\r\n\r\n\r\n    return {angle,unit}\r\n}","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\toast.tsx",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findLocation.tsx",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\services\\QueueService.ts",["235","236","237","238","239","240","241","242","243"],"import { chunk, findIndex, isEqual } from \"lodash\";\r\nimport BLEService from \"./BLEService\";\r\nimport { HexToBase64 } from \"../functions/Buffer\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { Params, PROCESS_KEYS, PROCESS_KEYS_LENGTH } from \"../constants/Params\";\r\nimport { createIV, encrypt, decrypt } from \"../functions/AES\";\r\nimport { error, success } from \"../functions/toast\";\r\nimport { string } from \"../locales\";\r\nimport { findData } from \"../functions/findData\";\r\nconst Queue = require(\"fastq\");\r\n\r\ninterface ISendMessage {\r\n  device: any;\r\n  data: number[];\r\n}\r\n\r\ninterface IRecieveMessage {\r\n  data: number[];\r\n}\r\n\r\ninterface IProcessMessage {\r\n  data: number[];\r\n}\r\n\r\nconst params = Params();\r\n\r\nexport default class QueueService {\r\n  private _RECEIVE_MESSAGE_BUFFER: number[] = [];\r\n\r\n  public sendMessageQueue;\r\n  public receiveMessageQueue;\r\n  private processMessageQueue;\r\n  private sendMessageForChunkQueue;\r\n\r\n  public get RECEIVE_MESSAGE_BUFFER() {\r\n    return this._RECEIVE_MESSAGE_BUFFER;\r\n  }\r\n\r\n  public set RECEIVE_MESSAGE_BUFFER(value: number[]) {\r\n    this._RECEIVE_MESSAGE_BUFFER = value;\r\n  }\r\n\r\n  constructor() {\r\n    this.sendMessageQueue = Queue(this.sendMessage, 1);\r\n\r\n    this.sendMessageForChunkQueue = Queue(this.sendMessageForChunk, 1);\r\n\r\n    this.receiveMessageQueue = Queue(this.receiveMessage, 1);\r\n\r\n    this.processMessageQueue = Queue(this.processMessage, 1);\r\n  }\r\n\r\n  private sendMessage = (payload: ISendMessage, cb: any) => {\r\n    const { data } = payload;\r\n\r\n    const chunks = chunk(data, 20);\r\n\r\n    for (const chunk of chunks) {\r\n      this.sendMessageForChunkQueue.push({\r\n        data: chunk,\r\n      });\r\n    }\r\n\r\n    cb(null, true);\r\n  };\r\n\r\n  private sendMessageForChunk = (payload: ISendMessage, cb: any) => {\r\n    const { data } = payload;\r\n\r\n    const device = IStore.ble.getDevice();\r\n\r\n    if (device) {\r\n      device\r\n        .getPrimaryService(\"2456e1b9-26e2-8f83-e744-f34f01e9d701\")\r\n        .then((service: any) => {\r\n          return service.getCharacteristic(\r\n            \"2456e1b9-26e2-8f83-e744-f34f01e9d703\"\r\n          );\r\n        })\r\n        .then((characteristic: any) => {\r\n          return characteristic.writeValue(Uint8Array.from(data));\r\n        })\r\n        .then(() => {\r\n          cb(null, true);\r\n        })\r\n        .catch((e: any) => {\r\n          // console.error(e);\r\n          cb(e, false);\r\n        });\r\n    } else {\r\n      cb(new Error(\"Device not found\"), false);\r\n    }\r\n  };\r\n\r\n  private receiveMessage = (payload: IRecieveMessage, cb: any) => {\r\n    const { data: _data } = payload;\r\n\r\n    this.RECEIVE_MESSAGE_BUFFER.push(..._data);\r\n\r\n    if (IStore.isEncryptedCommunication) {\r\n      const index = findIndex(\r\n        this.RECEIVE_MESSAGE_BUFFER,\r\n        (item) => item == 0x7e\r\n      );\r\n      const secondIndex = findIndex(\r\n        this.RECEIVE_MESSAGE_BUFFER,\r\n        (item) => item == 0x7e,\r\n        index + 1\r\n      );\r\n\r\n      if (index !== -1 && secondIndex === -1 && index !== 0) {\r\n        this.RECEIVE_MESSAGE_BUFFER = this.RECEIVE_MESSAGE_BUFFER.slice(\r\n          index + 1\r\n        );\r\n      }\r\n\r\n      if (index !== -1 && secondIndex !== -1 && index !== secondIndex) {\r\n        try {\r\n          let data = this.RECEIVE_MESSAGE_BUFFER.slice(index, secondIndex + 1);\r\n\r\n          data.forEach((item, index) => {\r\n            if (item == 0x7d && data[index + 1] == 0x5e) {\r\n              data[index] = 0x7e;\r\n              // @ts-ignore\r\n              data[index + 1] = null;\r\n            } else if (item == 0x7d && data[index + 1] == 0x5d) {\r\n              data[index] = 0x7d;\r\n              // @ts-ignore\r\n              data[index + 1] = null;\r\n            }\r\n          });\r\n\r\n          data = data.filter((e) => e !== null);\r\n\r\n          try {\r\n            const iv = Uint8Array.from(data.slice(1, 17));\r\n            const encrypted_data = data.slice(17, data.length - 1);\r\n\r\n            const decrypted_data = decrypt(encrypted_data, iv);\r\n\r\n            this.processMessageQueue.push({\r\n              data: [...decrypted_data],\r\n            });\r\n          } catch (e) {}\r\n\r\n          this.RECEIVE_MESSAGE_BUFFER = this.RECEIVE_MESSAGE_BUFFER.slice(\r\n            secondIndex + 1\r\n          );\r\n        } catch (e) {}\r\n      }\r\n    } else {\r\n      const checkData = Object.values(PROCESS_KEYS_LENGTH);\r\n\r\n      for (const data of checkData) {\r\n        if (\r\n          this.RECEIVE_MESSAGE_BUFFER[1] === data.key &&\r\n          this.RECEIVE_MESSAGE_BUFFER.length == data.length\r\n        ) {\r\n          this.processMessageQueue.push({\r\n            data: [...this.RECEIVE_MESSAGE_BUFFER],\r\n          });\r\n\r\n          this.RECEIVE_MESSAGE_BUFFER = [];\r\n\r\n          return cb(null, true);\r\n        }\r\n      }\r\n    }\r\n\r\n    cb(null, true);\r\n  };\r\n\r\n  private processMessage = (payload: IProcessMessage, cb: any) => {\r\n    const { data } = payload;\r\n    const command = data[1];\r\n\r\n    // console.log(data.map((e) => e.toString(16)));\r\n\r\n    switch (command) {\r\n      case PROCESS_KEYS.KimlikDogrulamaSorgu:\r\n        BLEService._this.sendDataToDevice(\r\n          params.kimlikdurumbilgisi.title,\r\n          params.kimlikdurumbilgisi.getHex(\r\n            PROCESS_KEYS.KimlikDogrulamaSorgu,\r\n            0x00\r\n          )\r\n        );\r\n\r\n        const iv = createIV();\r\n\r\n        const message = data.slice(2, 18);\r\n        const encrypted = encrypt(message, iv);\r\n\r\n        BLEService._this.sendDataToDevice(\r\n          params.kimlikdogrulamasorgususifreli.title,\r\n          params.kimlikdogrulamasorgususifreli.getHex(iv, encrypted)\r\n        );\r\n        break;\r\n\r\n      case PROCESS_KEYS.KimlikDogrulama:\r\n        BLEService._this.sendDataToDevice(\r\n          params.kimlikdurumbilgisi.title,\r\n          params.kimlikdurumbilgisi.getHex(PROCESS_KEYS.KimlikDogrulama, 0x00)\r\n        );\r\n\r\n        IStore.controlData = createIV();\r\n\r\n        BLEService._this.sendDataToDevice(\r\n          params.kimlikdogrulamasorgu.title,\r\n          params.kimlikdogrulamasorgu.getHex(IStore.controlData)\r\n        );\r\n\r\n        break;\r\n\r\n      case PROCESS_KEYS.KimlikDurumBilgisi:\r\n        const cmd = data[2];\r\n        const status = data[3];\r\n\r\n        /* let title = \"Kimlik doğrulama başarısız\";\r\n        if (status == 0x01) error(title, \"Kontrol toplamı hatası\");\r\n        else if (status == 0x02) error(title, \"Komut hatası\");\r\n        else if (status == 0x03) error(title, \"Geçersiz mesaj paketi\");\r\n        else if (status == 0x04) error(title, \"Hatalı içerik\");*/\r\n\r\n        if (status != 0x00) {\r\n          IStore.loadingConnect = -1;\r\n          BLEService._this.stopListener();\r\n          error(\r\n            string[\"kimlikdogrulamabasarisiz\"],\r\n            string[\"desteklenmeyencihaz\"]\r\n          );\r\n        }\r\n\r\n        break;\r\n\r\n      case PROCESS_KEYS.KimlikDogrulamaSifreli:\r\n        const _iv = Uint8Array.from(data.slice(2, 18));\r\n        const _encrypted = data.slice(18, 34);\r\n\r\n        const decrypted = decrypt(_encrypted, _iv);\r\n\r\n        const isOk = isEqual(decrypted, IStore.controlData);\r\n\r\n        BLEService._this.sendDataToDevice(\r\n          params.kimlikdurumbilgisi.title,\r\n          params.kimlikdurumbilgisi.getHex(\r\n            PROCESS_KEYS.KimlikDogrulamaSifreli,\r\n            isOk ? 0x00 : 0x04\r\n          )\r\n        );\r\n\r\n        if (isOk) {\r\n          this.RECEIVE_MESSAGE_BUFFER = [];\r\n          IStore.isEncryptedCommunication = true;\r\n          IStore.loadingConnect = -1;\r\n          IStore.navigation?.goBack?.();\r\n          success();\r\n        }\r\n\r\n        break;\r\n\r\n      default:\r\n        const { key, value: res }: any = findData(HexToBase64(data));\r\n\r\n        BLEService._this.setData({ [key]: res });\r\n\r\n        // @ts-ignore\r\n        BLEService.event.emit(\"monitor\", {\r\n          key,\r\n          value: res,\r\n          all_data: BLEService._this.getData(),\r\n        });\r\n\r\n        // @ts-ignore\r\n        BLEService.event.emit(key, res);\r\n        break;\r\n    }\r\n\r\n    cb(null, true);\r\n  };\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\index.ts",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\AES.tsx",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\tr.ts",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\locales\\en.ts",[],"C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\findData.tsx",["244","245","246"],"import { Params, PROCESS_KEYS } from \"../constants/Params\";\r\nimport { Base64ToHex } from \"./Buffer\";\r\nimport {\r\n  AngleUnitTypes,\r\n  ArticleMode,\r\n  BatteryErrorTypes,\r\n  BluetoothActivityTypes,\r\n  BluetoothErrorTypes,\r\n  BluetoothSleepTime,\r\n  CompassActivityTypes,\r\n  CompassErrorTypes,\r\n  DeviceSleepTime,\r\n  DistanceUnitTypes,\r\n  findType,\r\n  Language,\r\n  NightVisionMode,\r\n  OdometerActivityTypes,\r\n  OdometerErrorTypes,\r\n} from \"../constants/Config\";\r\nimport { IStore } from \"../stores/InstantStore\";\r\nimport { string } from \"../locales\";\r\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\r\n\r\nconst params = Params();\r\n\r\nfunction angleDiffToast(angle: string) {\r\n  const { fixed } = params.magnetic_declination_angle.numberParams;\r\n\r\n  const value1 = angle.substr(0, angle.length - fixed);\r\n  const value2 = angle.substr(fixed * -1);\r\n\r\n  let numberAngle;\r\n\r\n  if (value2 && !value1) {\r\n    numberAngle = Number(\"0.\" + value2);\r\n  } else {\r\n    numberAngle = Number(value1 + \".\" + value2);\r\n  }\r\n\r\n  if (IStore.decl !== null && IStore.firstDeclToast) {\r\n    IStore.firstDeclToast = false;\r\n    const diff = Math.abs(numberAngle - IStore.decl);\r\n\r\n    if (diff >= 0.5) {\r\n      confirmAlert({\r\n        title: string[\"uyari\"],\r\n        message: string[\"manyetiksapmauyari\"],\r\n        buttons: [\r\n          {\r\n            label: string[\"hayir\"],\r\n            onClick: () => {},\r\n          },\r\n          {\r\n            label: string[\"evet\"],\r\n            onClick: () => {\r\n              const _angle = IStore.decl!.toString();\r\n\r\n              const value1 = _angle.split(\".\")[0];\r\n              const value2 = _angle.split(\".\")[1];\r\n\r\n              const _value: any = [\r\n                value1 || 0,\r\n                value2 ? Number(value2).toFixed(1) : 0,\r\n              ];\r\n\r\n              const value = parseInt(\r\n                parseInt(_value[0] ? _value[0] : \"0\") +\r\n                  \"\" +\r\n                  (fixed ? parseInt(_value[1] ? _value[1] : 0) : \"\")\r\n              );\r\n\r\n              IStore.ble.sendDataToDevice(\r\n                params.magnetic_declination_angle.title,\r\n                params.magnetic_declination_angle.setHex(value)\r\n              );\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function findData(value: any) {\r\n  try {\r\n    value = Base64ToHex(value);\r\n    const command = value[1];\r\n\r\n    switch (command) {\r\n      case PROCESS_KEYS.SeriNo:\r\n        return { key: \"serial_no\", value: findSerial(value) };\r\n      case PROCESS_KEYS.Versiyon:\r\n        return { key: \"device_version\", value: findVersion(value) };\r\n      case PROCESS_KEYS.Sicaklik:\r\n        return { key: \"temperature\", value: findTemperature(value) };\r\n      case PROCESS_KEYS.Basinc:\r\n        return { key: \"pressure\", value: findPressure(value) };\r\n      case PROCESS_KEYS.Sayac:\r\n        return { key: \"shot_counter\", value: findShotCounter(value) };\r\n      case PROCESS_KEYS.DurumBilgisi:\r\n        return { key: \"statuses\", value: findStatuses(value) };\r\n      case PROCESS_KEYS.MesafeOlcuBirimi:\r\n      case PROCESS_KEYS.MesafeOlcuBirimiYaz:\r\n        return { key: \"distance_unit\", value: findDistanceUnit(value) };\r\n      case PROCESS_KEYS.Artikil:\r\n      case PROCESS_KEYS.ArtikilYaz:\r\n        return { key: \"article_mode\", value: findArticleMode(value) };\r\n      case PROCESS_KEYS.Dil:\r\n      case PROCESS_KEYS.DilYaz:\r\n        return { key: \"language\", value: findLanguage(value) };\r\n      case PROCESS_KEYS.AciOlcuBirimi:\r\n      case PROCESS_KEYS.AciOlcuBirimiYaz:\r\n        return { key: \"angle_unit_type\", value: findAngleUnit(value) };\r\n      case PROCESS_KEYS.GeceGorus:\r\n      case PROCESS_KEYS.GeceGorusYaz:\r\n        return { key: \"night_vision_mode\", value: findNightVisionMode(value) };\r\n      case PROCESS_KEYS.CihazKapanmaSuresi:\r\n      case PROCESS_KEYS.CihazKapanmaSuresiYaz:\r\n        return { key: \"device_sleep_time\", value: findDeviceSleep(value) };\r\n      case PROCESS_KEYS.BluetoothKapanmaSuresi:\r\n      case PROCESS_KEYS.BluetoothKapanmaSuresiYaz:\r\n        return {\r\n          key: \"bluetooth_sleep_time\",\r\n          value: findBluetoothSleep(value),\r\n        };\r\n      case PROCESS_KEYS.AltKapiLimiti:\r\n      case PROCESS_KEYS.AltKapiLimitiYaz:\r\n        return { key: \"bottom_door_lock\", value: findBottomDoorLock(value) };\r\n      case PROCESS_KEYS.UstKapiLimiti:\r\n      case PROCESS_KEYS.UstKapiLimitiYaz:\r\n        return { key: \"top_door_lock\", value: findTopDoorLock(value) };\r\n      case PROCESS_KEYS.ManyetikSapmaAcisi:\r\n      case PROCESS_KEYS.ManyetikSapmaAcisiYaz:\r\n        return {\r\n          key: \"magnetic_declination_angle\",\r\n          value: findMagneticDeclinationAngle(value),\r\n        };\r\n      case PROCESS_KEYS.MesafeVePusula:\r\n        return {\r\n          key: \"distance_and_compass\",\r\n          value: findDistanceAndCompass(value),\r\n        };\r\n      default:\r\n        return \"Not Found\";\r\n    }\r\n  } catch (e) {\r\n    // console.error(e, value);\r\n    return \"Error Data\";\r\n  }\r\n}\r\n\r\nfunction findSerial(value: any) {\r\n  return ((value[2] << 8) | value[3]).toString();\r\n}\r\n\r\nfunction findVersion(value: any) {\r\n  return value[2] + \".\" + value[3] + \"v\";\r\n}\r\n\r\nfunction findTemperature(value: any) {\r\n  let data = (value[2] << 8) | value[3];\r\n  if ((data & 0x8000) > 0) {\r\n    data = data - 0x10000;\r\n  }\r\n  return data / 100 + \"°\";\r\n}\r\n\r\nfunction findPressure(value: any) {\r\n  return ((value[2] << 8) | value[3]).toString();\r\n}\r\n\r\nfunction findShotCounter(value: any) {\r\n  return (\r\n    (value[2] << 24) |\r\n    (value[3] << 16) |\r\n    (value[4] << 8) |\r\n    value[5]\r\n  ).toString();\r\n}\r\n\r\nfunction findStatuses(value: any) {\r\n  let status1_binary = value[2].toString(2);\r\n  let status2_binary = value[3].toString(2);\r\n\r\n  return {\r\n    odometer_activity: {\r\n      title: \"lazermesafeolceraktifligi\",\r\n      value: findType(OdometerActivityTypes, status1_binary[2]),\r\n    },\r\n    compass_activity: {\r\n      title: \"pusulaaktifligi\",\r\n      value: findType(CompassActivityTypes, status1_binary[1]),\r\n    },\r\n    bluetooth_activity: {\r\n      title: \"bluetoothaktifligi\",\r\n      value: findType(BluetoothActivityTypes, status1_binary[0]),\r\n    },\r\n    odometer_error: {\r\n      title: \"lazermesafeolcerhatabilgisi\",\r\n      value: findType(\r\n        OdometerErrorTypes,\r\n        status2_binary[6] + \"\" + status2_binary[7]\r\n      ),\r\n    },\r\n    compass_error: {\r\n      title: \"pusulahatabilgisi\",\r\n      value: findType(\r\n        CompassErrorTypes,\r\n        status2_binary[4] + \"\" + status2_binary[5]\r\n      ),\r\n    },\r\n    bluetooth_error: {\r\n      title: \"bluetoothhatabilgisi\",\r\n      value: findType(\r\n        BluetoothErrorTypes,\r\n        status2_binary[2] + \"\" + status2_binary[3]\r\n      ),\r\n    },\r\n    battery_error: {\r\n      title: \"bataryahatabilgisi\",\r\n      value: findType(\r\n        BatteryErrorTypes,\r\n        status2_binary[0] + \"\" + status2_binary[1]\r\n      ),\r\n    },\r\n  };\r\n}\r\n\r\nfunction findDistanceUnit(value: any) {\r\n  return findType(DistanceUnitTypes, value[3], \"\");\r\n}\r\n\r\nfunction findArticleMode(value: any) {\r\n  return findType(ArticleMode, value[3], \"\");\r\n}\r\n\r\nfunction findLanguage(value: any) {\r\n  return findType(Language, value[3], \"\");\r\n}\r\n\r\nfunction findAngleUnit(value: any) {\r\n  return findType(AngleUnitTypes, value[3], \"\");\r\n}\r\n\r\nfunction findNightVisionMode(value: any) {\r\n  return findType(NightVisionMode, value[3], \"\");\r\n}\r\n\r\nfunction findDeviceSleep(value: any) {\r\n  return findType(DeviceSleepTime, value[3], \"\");\r\n}\r\n\r\nfunction findBluetoothSleep(value: any) {\r\n  return findType(BluetoothSleepTime, value[3], \"\");\r\n}\r\n\r\nfunction findBottomDoorLock(value: any) {\r\n  return ((value[2] << 8) | value[3]).toString();\r\n}\r\n\r\nfunction findTopDoorLock(value: any) {\r\n  return ((value[2] << 8) | value[3]).toString();\r\n}\r\n\r\nfunction findMagneticDeclinationAngle(value: any) {\r\n  let data = (value[2] << 8) | value[3];\r\n\r\n  if ((data & 0x8000) > 0) {\r\n    data = data - 0x10000;\r\n  }\r\n\r\n  angleDiffToast(data.toString());\r\n\r\n  return data.toString();\r\n}\r\n\r\nfunction findDistanceAndCompass(value: any) {\r\n  const distance_unit = findType(DistanceUnitTypes, value[2], \"id\");\r\n  const distance1 = ((value[3] << 16) | (value[4] << 8) | value[5]) / 100;\r\n  const distance2 = ((value[6] << 16) | (value[7] << 8) | value[8]) / 100;\r\n  const distance3 = ((value[9] << 16) | (value[10] << 8) | value[11]) / 100;\r\n  const distance = [\r\n    ...(distance1 ? [distance1] : []),\r\n    ...(distance2 ? [distance2] : []),\r\n    ...(distance3 ? [distance3] : []),\r\n  ];\r\n\r\n  const angle_unit = findType(AngleUnitTypes, value[12], \"id\");\r\n  let azimuth = (value[13] << 8) | value[14];\r\n  let elevation = (value[15] << 8) | value[16];\r\n  let roll = (value[17] << 8) | value[18];\r\n\r\n  if ((azimuth & 0x8000) > 0) {\r\n    azimuth = azimuth - 0x10000;\r\n  }\r\n  azimuth = azimuth / (angle_unit == AngleUnitTypes.Derece.id ? 10 : 1);\r\n\r\n  if ((elevation & 0x8000) > 0) {\r\n    elevation = elevation - 0x10000;\r\n  }\r\n  elevation = elevation / (angle_unit == AngleUnitTypes.Derece.id ? 10 : 1);\r\n\r\n  if ((roll & 0x8000) > 0) {\r\n    roll = roll - 0x10000;\r\n  }\r\n  roll = roll / (angle_unit == AngleUnitTypes.Derece.id ? 10 : 1);\r\n\r\n  return {\r\n    distance,\r\n    distance_unit,\r\n    angle_unit,\r\n    azimuth,\r\n    elevation,\r\n    roll,\r\n  };\r\n}\r\n","C:\\Users\\Administrator\\Documents\\GitHub\\aselsanlazer\\aselsan-lazer-desktop-app\\src\\functions\\Buffer.tsx",[],{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":19,"column":6,"nodeType":"253","endLine":19,"endColumn":8,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":26},{"ruleId":"255","severity":1,"message":"259","line":1,"column":28,"nodeType":"257","messageId":"258","endLine":1,"endColumn":36},{"ruleId":"255","severity":1,"message":"260","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":16},{"ruleId":"255","severity":1,"message":"261","line":14,"column":10,"nodeType":"257","messageId":"258","endLine":14,"endColumn":21},{"ruleId":"262","severity":1,"message":"263","line":28,"column":15,"nodeType":"264","messageId":"265","endLine":28,"endColumn":17},{"ruleId":"262","severity":1,"message":"263","line":30,"column":18,"nodeType":"264","messageId":"265","endLine":30,"endColumn":20},{"ruleId":"262","severity":1,"message":"263","line":32,"column":18,"nodeType":"264","messageId":"265","endLine":32,"endColumn":20},{"ruleId":"262","severity":1,"message":"263","line":34,"column":18,"nodeType":"264","messageId":"265","endLine":34,"endColumn":20},{"ruleId":"266","severity":1,"message":"267","line":73,"column":15,"nodeType":"268","endLine":80,"endColumn":17},{"ruleId":"262","severity":1,"message":"263","line":76,"column":28,"nodeType":"264","messageId":"265","endLine":76,"endColumn":30},{"ruleId":"266","severity":1,"message":"267","line":88,"column":15,"nodeType":"268","endLine":95,"endColumn":17},{"ruleId":"262","severity":1,"message":"263","line":91,"column":28,"nodeType":"264","messageId":"265","endLine":91,"endColumn":30},{"ruleId":"266","severity":1,"message":"267","line":103,"column":15,"nodeType":"268","endLine":112,"endColumn":17},{"ruleId":"262","severity":1,"message":"263","line":106,"column":28,"nodeType":"264","messageId":"265","endLine":106,"endColumn":30},{"ruleId":"266","severity":1,"message":"267","line":120,"column":15,"nodeType":"268","endLine":127,"endColumn":17},{"ruleId":"262","severity":1,"message":"263","line":123,"column":28,"nodeType":"264","messageId":"265","endLine":123,"endColumn":30},{"ruleId":"255","severity":1,"message":"269","line":4,"column":18,"nodeType":"257","messageId":"258","endLine":4,"endColumn":26},{"ruleId":"255","severity":1,"message":"270","line":4,"column":28,"nodeType":"257","messageId":"258","endLine":4,"endColumn":36},{"ruleId":"255","severity":1,"message":"271","line":6,"column":26,"nodeType":"257","messageId":"258","endLine":6,"endColumn":41},{"ruleId":"255","severity":1,"message":"272","line":20,"column":31,"nodeType":"257","messageId":"258","endLine":20,"endColumn":40},{"ruleId":"251","severity":1,"message":"273","line":53,"column":6,"nodeType":"253","endLine":53,"endColumn":8,"suggestions":"274"},{"ruleId":"262","severity":1,"message":"263","line":121,"column":28,"nodeType":"264","messageId":"265","endLine":121,"endColumn":30},{"ruleId":"262","severity":1,"message":"263","line":121,"column":43,"nodeType":"264","messageId":"265","endLine":121,"endColumn":45},{"ruleId":"262","severity":1,"message":"263","line":121,"column":58,"nodeType":"264","messageId":"265","endLine":121,"endColumn":60},{"ruleId":"266","severity":1,"message":"267","line":166,"column":17,"nodeType":"268","endLine":173,"endColumn":19},{"ruleId":"266","severity":1,"message":"267","line":268,"column":23,"nodeType":"268","endLine":271,"endColumn":25},{"ruleId":"266","severity":1,"message":"267","line":305,"column":17,"nodeType":"268","endLine":312,"endColumn":19},{"ruleId":"266","severity":1,"message":"267","line":401,"column":23,"nodeType":"268","endLine":404,"endColumn":25},{"ruleId":"266","severity":1,"message":"267","line":482,"column":23,"nodeType":"268","endLine":485,"endColumn":25},{"ruleId":"255","severity":1,"message":"256","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":26},{"ruleId":"255","severity":1,"message":"275","line":3,"column":10,"nodeType":"257","messageId":"258","endLine":3,"endColumn":13},{"ruleId":"266","severity":1,"message":"267","line":41,"column":13,"nodeType":"268","endLine":45,"endColumn":15},{"ruleId":"266","severity":1,"message":"267","line":77,"column":17,"nodeType":"268","endLine":77,"endColumn":66},{"ruleId":"262","severity":1,"message":"263","line":111,"column":17,"nodeType":"264","messageId":"265","endLine":111,"endColumn":19},{"ruleId":"262","severity":1,"message":"263","line":119,"column":20,"nodeType":"264","messageId":"265","endLine":119,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":171,"column":26,"nodeType":"264","messageId":"265","endLine":171,"endColumn":28},{"ruleId":"262","severity":1,"message":"276","line":181,"column":27,"nodeType":"264","messageId":"265","endLine":181,"endColumn":29},{"ruleId":"262","severity":1,"message":"276","line":188,"column":27,"nodeType":"264","messageId":"265","endLine":188,"endColumn":29},{"ruleId":"262","severity":1,"message":"263","line":237,"column":51,"nodeType":"264","messageId":"265","endLine":237,"endColumn":53},{"ruleId":"262","severity":1,"message":"263","line":257,"column":31,"nodeType":"264","messageId":"265","endLine":257,"endColumn":33},{"ruleId":"262","severity":1,"message":"263","line":292,"column":20,"nodeType":"264","messageId":"265","endLine":292,"endColumn":22},{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"266","severity":1,"message":"267","line":38,"column":9,"nodeType":"268","endLine":46,"endColumn":11},{"ruleId":"251","severity":1,"message":"277","line":36,"column":6,"nodeType":"253","endLine":36,"endColumn":8,"suggestions":"278"},{"ruleId":"262","severity":1,"message":"263","line":129,"column":14,"nodeType":"264","messageId":"265","endLine":129,"endColumn":16},{"ruleId":"255","severity":1,"message":"279","line":45,"column":10,"nodeType":"257","messageId":"258","endLine":45,"endColumn":17},{"ruleId":"255","severity":1,"message":"280","line":45,"column":19,"nodeType":"257","messageId":"258","endLine":45,"endColumn":29},{"ruleId":"255","severity":1,"message":"281","line":46,"column":10,"nodeType":"257","messageId":"258","endLine":46,"endColumn":17},{"ruleId":"255","severity":1,"message":"282","line":46,"column":19,"nodeType":"257","messageId":"258","endLine":46,"endColumn":29},{"ruleId":"255","severity":1,"message":"283","line":48,"column":10,"nodeType":"257","messageId":"258","endLine":48,"endColumn":17},{"ruleId":"251","severity":1,"message":"284","line":77,"column":6,"nodeType":"253","endLine":77,"endColumn":8,"suggestions":"285"},{"ruleId":"262","severity":1,"message":"263","line":109,"column":17,"nodeType":"264","messageId":"265","endLine":109,"endColumn":19},{"ruleId":"262","severity":1,"message":"263","line":109,"column":33,"nodeType":"264","messageId":"265","endLine":109,"endColumn":35},{"ruleId":"262","severity":1,"message":"263","line":109,"column":51,"nodeType":"264","messageId":"265","endLine":109,"endColumn":53},{"ruleId":"266","severity":1,"message":"267","line":233,"column":9,"nodeType":"268","endLine":240,"endColumn":11},{"ruleId":"262","severity":1,"message":"263","line":341,"column":14,"nodeType":"264","messageId":"265","endLine":341,"endColumn":16},{"ruleId":"262","severity":1,"message":"263","line":393,"column":30,"nodeType":"264","messageId":"265","endLine":393,"endColumn":32},{"ruleId":"266","severity":1,"message":"267","line":437,"column":27,"nodeType":"268","endLine":442,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":470,"column":27,"nodeType":"268","endLine":473,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":508,"column":27,"nodeType":"268","endLine":511,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":640,"column":27,"nodeType":"268","endLine":646,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":723,"column":29,"nodeType":"268","endLine":728,"endColumn":31},{"ruleId":"266","severity":1,"message":"267","line":753,"column":11,"nodeType":"268","endLine":756,"endColumn":13},{"ruleId":"255","severity":1,"message":"286","line":7,"column":10,"nodeType":"257","messageId":"258","endLine":7,"endColumn":21},{"ruleId":"251","severity":1,"message":"287","line":59,"column":6,"nodeType":"253","endLine":59,"endColumn":8,"suggestions":"288"},{"ruleId":"262","severity":1,"message":"263","line":148,"column":14,"nodeType":"264","messageId":"265","endLine":148,"endColumn":16},{"ruleId":"255","severity":1,"message":"256","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":26},{"ruleId":"255","severity":1,"message":"289","line":6,"column":10,"nodeType":"257","messageId":"258","endLine":6,"endColumn":16},{"ruleId":"266","severity":1,"message":"267","line":63,"column":9,"nodeType":"268","endLine":66,"endColumn":11},{"ruleId":"266","severity":1,"message":"267","line":77,"column":7,"nodeType":"268","endLine":80,"endColumn":9},{"ruleId":"290","severity":1,"message":"291","line":196,"column":1,"nodeType":"292","messageId":"265","endLine":198,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":47,"column":14,"nodeType":"264","messageId":"265","endLine":47,"endColumn":16},{"ruleId":"262","severity":1,"message":"263","line":376,"column":53,"nodeType":"264","messageId":"265","endLine":376,"endColumn":55},{"ruleId":"293","severity":1,"message":"294","line":1,"column":1,"nodeType":"295","endLine":16,"endColumn":3},{"ruleId":"296","severity":1,"message":"297","line":3,"column":10,"nodeType":"257","messageId":"258","endLine":3,"endColumn":18},{"ruleId":"296","severity":1,"message":"298","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":21},{"ruleId":"296","severity":1,"message":"299","line":5,"column":23,"nodeType":"257","messageId":"258","endLine":5,"endColumn":34},{"ruleId":"296","severity":1,"message":"300","line":7,"column":10,"nodeType":"257","messageId":"258","endLine":7,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":96,"column":7,"nodeType":"303","messageId":"304","endLine":96,"endColumn":27},{"ruleId":"262","severity":1,"message":"263","line":110,"column":15,"nodeType":"264","messageId":"265","endLine":110,"endColumn":17},{"ruleId":"262","severity":1,"message":"263","line":112,"column":22,"nodeType":"264","messageId":"265","endLine":112,"endColumn":24},{"ruleId":"301","severity":1,"message":"302","line":132,"column":18,"nodeType":"303","messageId":"304","endLine":132,"endColumn":38},{"ruleId":"262","severity":1,"message":"263","line":11,"column":21,"nodeType":"264","messageId":"265","endLine":11,"endColumn":23},{"ruleId":"262","severity":1,"message":"263","line":11,"column":63,"nodeType":"264","messageId":"265","endLine":11,"endColumn":65},{"ruleId":"262","severity":1,"message":"263","line":13,"column":27,"nodeType":"264","messageId":"265","endLine":13,"endColumn":29},{"ruleId":"262","severity":1,"message":"263","line":13,"column":68,"nodeType":"264","messageId":"265","endLine":13,"endColumn":70},{"ruleId":"262","severity":1,"message":"276","line":33,"column":21,"nodeType":"264","messageId":"265","endLine":33,"endColumn":23},{"ruleId":"262","severity":1,"message":"263","line":33,"column":61,"nodeType":"264","messageId":"265","endLine":33,"endColumn":63},{"ruleId":"262","severity":1,"message":"263","line":103,"column":24,"nodeType":"264","messageId":"265","endLine":103,"endColumn":26},{"ruleId":"262","severity":1,"message":"263","line":107,"column":24,"nodeType":"264","messageId":"265","endLine":107,"endColumn":26},{"ruleId":"262","severity":1,"message":"263","line":122,"column":22,"nodeType":"264","messageId":"265","endLine":122,"endColumn":24},{"ruleId":"262","severity":1,"message":"263","line":122,"column":49,"nodeType":"264","messageId":"265","endLine":122,"endColumn":51},{"ruleId":"262","severity":1,"message":"263","line":126,"column":29,"nodeType":"264","messageId":"265","endLine":126,"endColumn":31},{"ruleId":"262","severity":1,"message":"263","line":126,"column":56,"nodeType":"264","messageId":"265","endLine":126,"endColumn":58},{"ruleId":"262","severity":1,"message":"263","line":157,"column":46,"nodeType":"264","messageId":"265","endLine":157,"endColumn":48},{"ruleId":"296","severity":1,"message":"305","line":216,"column":15,"nodeType":"257","messageId":"258","endLine":216,"endColumn":18},{"ruleId":"262","severity":1,"message":"276","line":225,"column":20,"nodeType":"264","messageId":"265","endLine":225,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":296,"column":35,"nodeType":"264","messageId":"265","endLine":296,"endColumn":37},{"ruleId":"262","severity":1,"message":"263","line":301,"column":39,"nodeType":"264","messageId":"265","endLine":301,"endColumn":41},{"ruleId":"262","severity":1,"message":"263","line":306,"column":29,"nodeType":"264","messageId":"265","endLine":306,"endColumn":31},"no-native-reassign",["306"],"no-negated-in-lhs",["307"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'controlData'. Either include it or remove the dependency array.","ArrayExpression",["308"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'styled' is defined but never used.","'ipcRenderer' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'HelpText' is defined but never used.","'MoreInfo' is defined but never used.","'HomeScreenTypes' is defined but never used.","'useSwiper' is defined but never used.","React Hook useEffect has missing dependencies: '_setData', 'auto', and 'controlDevice'. Either include them or remove the dependency array.",["309"],"'Col' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'controlDevice'. Either include it or remove the dependency array.",["310"],"'heading' is assigned a value but never used.","'setHeading' is assigned a value but never used.","'compass' is assigned a value but never used.","'setCompass' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ble' and 'getLocation'. Either include them or remove the dependency array.",["311"],"'InputNumber' is defined but never used.","React Hook useEffect has missing dependencies: 'controlDevice' and 'getLocation'. Either include them or remove the dependency array.",["312"],"'IStore' is defined but never used.","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'findData' is defined but never used.","'Base64ToHex' is defined but never used.","'HexToBase64' is defined but never used.","'l_moment' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'cmd' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},"Update the dependencies array to be: [controlData]",{"range":"323","text":"324"},"Update the dependencies array to be: [_setData, auto, controlDevice]",{"range":"325","text":"326"},"Update the dependencies array to be: [controlDevice]",{"range":"327","text":"328"},"Update the dependencies array to be: [ble, getLocation]",{"range":"329","text":"330"},"Update the dependencies array to be: [controlDevice, getLocation]",{"range":"331","text":"332"},[526,528],"[controlData]",[1807,1809],"[_setData, auto, controlDevice]",[1198,1200],"[controlDevice]",[2465,2467],"[ble, getLocation]",[2132,2134],"[controlDevice, getLocation]"]